{
  "version": 1,
  "components": {
    "@mui/material/Accordion#Accordion": {
      "id": "@mui/material/Accordion#Accordion",
      "name": "Accordion",
      "props": {
        "defaultExpanded": {
          "type": "boolean"
        },
        "expanded": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "Slots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ [P in keyof K]?: K[P]; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; rounded?: string; expanded?: string; disabled?: string; gutters?: string; region?: string; }"
        },
        "disableGutters": {
          "type": "boolean"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children?: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children?: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "elevation": {
          "type": "number"
        },
        "square": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "elevation",
            "outlined"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Accordion",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "exclusiveChildren": [
          "@mui/material#AccordionSummary",
          "@mui/material#AccordionDetails",
          "@mui/material/AccordionActions#AccordionActions"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/AccordionActions#AccordionActions": {
      "id": "@mui/material/AccordionActions#AccordionActions",
      "name": "AccordionActions",
      "props": {
        "disableSpacing": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; spacing?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/AccordionActions",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Accordion#Accordion"
        ],
        "exclusiveParent": "@mui/material/Accordion#Accordion"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#AccordionDetails": {
      "id": "@mui/material#AccordionDetails",
      "name": "AccordionDetails",
      "comment": "Demos:\n\n- [Accordion](https://mui.com/material-ui/react-accordion/)\n\nAPI:\n\n- [AccordionDetails API](https://mui.com/material-ui/api/accordion-details/)",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "AccordionDetails"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/AccordionDetails/AccordionDetails.d.ts"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Accordion#Accordion"
        ],
        "exclusiveParent": "@mui/material/Accordion#Accordion"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#AccordionSummary": {
      "id": "@mui/material#AccordionSummary",
      "name": "AccordionSummary",
      "comment": "Demos:\n\n- [Accordion](https://mui.com/material-ui/react-accordion/)\n\nAPI:\n\n- [AccordionSummary API](https://mui.com/material-ui/api/accordion-summary/)\n- inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; expanded?: string; focusVisible?: string; disabled?: string; gutters?: string; contentGutters?: string; content?: string; expandIconWrapper?: string; }"
        },
        "expandIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "tabIndex": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "AccordionSummary"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/AccordionSummary/AccordionSummary.d.ts"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Accordion#Accordion"
        ],
        "exclusiveParent": "@mui/material/Accordion#Accordion",
        "exclusiveChildren": [
          "@mui/x-date-pickers/icons#ArrowDropDownIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Alert#Alert": {
      "id": "@mui/material/Alert#Alert",
      "name": "Alert",
      "props": {
        "severity": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error"
          ]
        },
        "variant": {
          "type": "string-union",
          "values": [
            "outlined",
            "filled",
            "standard"
          ]
        },
        "action": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error"
          ]
        },
        "closeText": {
          "type": "string"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "iconMapping": {
          "type": "custom",
          "typeName": "{ success?: ReactNode; info?: ReactNode; warning?: ReactNode; error?: ReactNode; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; filled?: string; outlined?: string; standard?: string; colorSuccess?: string; colorInfo?: string; colorWarning?: string; colorError?: string; standardSuccess?: string; standardInfo?: string; standardWarning?: string; standardError?: string; outlinedSuccess?: string; outlinedInfo?: string; outlinedWarning?: string; outlinedError?: string; filledSuccess?: string; filledInfo?: string; filledWarning?: string; filledError?: string; icon?: string; message?: string; action?: string; }"
        },
        "components": {
          "type": "custom",
          "typeName": "{ CloseButton?: ElementType<any, keyof IntrinsicElements>; CloseIcon?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ closeButton?: IconButtonProps; closeIcon?: SvgIconProps; }"
        },
        "role": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "elevation": {
          "type": "number"
        },
        "square": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "slots": {
          "type": "custom",
          "typeName": "Slots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ [P in keyof K]?: K[P]; }"
        }
      },
      "export": {
        "path": "@mui/material/Alert",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/material/Collapse#Collapse",
          "@mui/material/Snackbar#Snackbar",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/material#AlertTitle"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#AlertTitle": {
      "id": "@mui/material#AlertTitle",
      "name": "AlertTitle",
      "comment": "Demos:\n\n- [Alert](https://mui.com/material-ui/react-alert/)\n\nAPI:\n\n- [AlertTitle API](https://mui.com/material-ui/api/alert-title/)\n- inherits [Typography API](https://mui.com/material-ui/api/typography/)",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right",
            "inherit",
            "justify"
          ]
        },
        "gutterBottom": {
          "type": "boolean"
        },
        "noWrap": {
          "type": "boolean"
        },
        "paragraph": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "button",
            "caption",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "inherit",
            "subtitle1",
            "subtitle2",
            "body1",
            "body2",
            "overline"
          ]
        },
        "variantMapping": {
          "type": "custom",
          "typeName": "{ button?: string; caption?: string; h1?: string; h2?: string; h3?: string; h4?: string; h5?: string; h6?: string; inherit?: string; subtitle1?: string; subtitle2?: string; body1?: string; body2?: string; overline?: string; }"
        },
        "p": {
          "type": "any"
        },
        "color": {
          "type": "any"
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any"
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignItems": {
          "type": "any"
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "columnGap": {
          "type": "any"
        },
        "display": {
          "type": "any"
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any"
        },
        "flexShrink": {
          "type": "any"
        },
        "flexWrap": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any"
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any"
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "height": {
          "type": "any"
        },
        "justifyContent": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any"
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textAlign": {
          "type": "any"
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any"
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "width": {
          "type": "any"
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "gap": {
          "type": "any"
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any"
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any"
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "AlertTitle"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/AlertTitle/AlertTitle.d.ts"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Alert#Alert"
        ],
        "exclusiveParent": "@mui/material/Alert#Alert"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/AppBar#AppBar": {
      "id": "@mui/material/AppBar#AppBar",
      "name": "AppBar",
      "props": {
        "position": {
          "type": "string-union",
          "values": [
            "fixed",
            "absolute",
            "sticky",
            "static",
            "relative"
          ]
        },
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default",
            "transparent"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "enableColorOnDark": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; positionFixed?: string; positionAbsolute?: string; positionSticky?: string; positionStatic?: string; positionRelative?: string; colorDefault?: string; colorPrimary?: string; colorSecondary?: string; colorInherit?: string; colorTransparent?: string; colorError?: string; colorInfo?: string; colorSuccess?: string; colorWarning?: string; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "elevation": {
          "type": "number"
        },
        "square": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "elevation",
            "outlined"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/AppBar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material#ThemeProvider",
          "@mui/material/Dialog#Dialog"
        ],
        "exclusiveChildren": [
          "@mui/material/Container#Container"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Autocomplete#Autocomplete": {
      "id": "@mui/material/Autocomplete#Autocomplete",
      "name": "Autocomplete",
      "props": {
        "id": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "open": {
          "type": "boolean"
        },
        "isOptionEqualToValue": {
          "type": "custom",
          "typeName": "(option: Value, value: Value) => boolean"
        },
        "getOptionLabel": {
          "type": "custom",
          "typeName": "(option: Value | AutocompleteFreeSoloValueMapping<FreeSolo>) => string"
        },
        "options": {
          "type": "custom",
          "typeName": "readonly Value[]"
        },
        "loading": {
          "type": "boolean"
        },
        "renderInput": {
          "type": "custom",
          "typeName": "(params: AutocompleteRenderInputParams) => ReactNode"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "inputValue": {
          "type": "string"
        },
        "multiple": {
          "type": "custom",
          "typeName": "Multiple"
        },
        "disableCloseOnSelect": {
          "type": "boolean"
        },
        "renderOption": {
          "type": "custom",
          "typeName": "(props: HTMLAttributes<HTMLLIElement> & { key: any; }, option: Value, state: AutocompleteRenderOptionState, ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>) => ReactNode"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "value": {
          "type": "custom",
          "typeName": "Multiple extends true ? (Value | AutocompleteFreeSoloValueMapping<FreeSolo>)[] : DisableClearable extends true ? NonNullable<Value | AutocompleteFreeSoloValueMapping<FreeSolo>> : Value | AutocompleteFreeSoloValueMapping<FreeSolo>"
        },
        "autoHighlight": {
          "type": "boolean"
        },
        "getOptionDisabled": {
          "type": "custom",
          "typeName": "(option: Value) => boolean"
        },
        "filterOptions": {
          "type": "custom",
          "typeName": "(options: Value[], state: FilterOptionsState<Value>) => Value[]"
        },
        "renderTags": {
          "type": "custom",
          "typeName": "(value: Value[], getTagProps: AutocompleteRenderGetTagProps, ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>) => ReactNode"
        },
        "freeSolo": {
          "type": "custom",
          "typeName": "FreeSolo"
        },
        "disableClearable": {
          "type": "custom",
          "typeName": "DisableClearable"
        },
        "selectOnFocus": {
          "type": "boolean"
        },
        "clearOnBlur": {
          "type": "boolean"
        },
        "handleHomeEndKeys": {
          "type": "boolean"
        },
        "PopperComponent": {
          "type": "custom",
          "typeName": "((props: PopperProps, deprecatedLegacyContext?: any) => ReactNode) | (new (props: PopperProps, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "noOptionsText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "autoComplete": {
          "type": "boolean"
        },
        "includeInputInList": {
          "type": "boolean"
        },
        "filterSelectedOptions": {
          "type": "boolean"
        },
        "groupBy": {
          "type": "custom",
          "typeName": "(option: Value) => string"
        },
        "limitTags": {
          "type": "number"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "Multiple extends true ? (Value | AutocompleteFreeSoloValueMapping<FreeSolo>)[] : DisableClearable extends true ? NonNullable<Value | AutocompleteFreeSoloValueMapping<FreeSolo>> : Value | AutocompleteFreeSoloValueMapping<FreeSolo>"
        },
        "clearOnEscape": {
          "type": "boolean"
        },
        "disableListWrap": {
          "type": "boolean"
        },
        "openOnFocus": {
          "type": "boolean"
        },
        "autoSelect": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "blurOnSelect": {
          "type": "custom",
          "typeName": "boolean | \"touch\" | \"mouse\""
        },
        "readOnly": {
          "type": "boolean"
        },
        "renderGroup": {
          "type": "custom",
          "typeName": "(params: AutocompleteRenderGroupParams) => ReactNode"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "ListboxComponent": {
          "type": "custom",
          "typeName": "((props: HTMLAttributes<HTMLElement>, deprecatedLegacyContext?: any) => ReactNode) | (new (props: HTMLAttributes<HTMLElement>, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "ChipProps": {
          "type": "custom",
          "typeName": "ChipOwnProps & CommonProps & DistributiveOmit<ComponentPropsWithRef<ChipComponent>, \"className\" | \"style\" | \"classes\" | \"children\" | \"sx\" | \"variant\" | \"label\" | \"tabIndex\" | \"color\" | \"disabled\" | \"icon\" | \"size\" | \"avatar\" | \"clickable\" | \"deleteIcon\" | \"onDelete\" | \"skipFocusWhenDisabled\"> & { component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; fullWidth?: string; expanded?: string; focused?: string; focusVisible?: string; tag?: string; tagSizeSmall?: string; tagSizeMedium?: string; hasPopupIcon?: string; hasClearIcon?: string; inputRoot?: string; input?: string; inputFocused?: string; endAdornment?: string; clearIndicator?: string; popupIndicator?: string; popupIndicatorOpen?: string; popper?: string; popperDisablePortal?: string; paper?: string; listbox?: string; loading?: string; noOptions?: string; option?: string; groupLabel?: string; groupUl?: string; }"
        },
        "clearIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "clearText": {
          "type": "string"
        },
        "closeText": {
          "type": "string"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ clearIndicator?: Partial<IconButtonProps>; paper?: PaperProps; popper?: Partial<PopperProps>; popupIndicator?: Partial<IconButtonProps>; }"
        },
        "forcePopupIcon": {
          "type": "custom",
          "typeName": "boolean | \"auto\""
        },
        "fullWidth": {
          "type": "boolean"
        },
        "getLimitTagsText": {
          "type": "custom",
          "typeName": "(more: number) => ReactNode"
        },
        "ListboxProps": {
          "type": "custom",
          "typeName": "HTMLAttributes<HTMLUListElement> & { sx?: SxProps<Theme>; ref?: Ref<Element>; }"
        },
        "loadingText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "openText": {
          "type": "string"
        },
        "PaperComponent": {
          "type": "custom",
          "typeName": "((props: HTMLAttributes<HTMLElement>, deprecatedLegacyContext?: any) => ReactNode) | (new (props: HTMLAttributes<HTMLElement>, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "popupIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ clearIndicator?: Partial<IconButtonProps>; paper?: PaperProps; popper?: Partial<PopperProps>; popupIndicator?: Partial<IconButtonProps>; }"
        },
        "unstable_classNamePrefix": {
          "type": "string"
        },
        "unstable_isActiveElementInListbox": {
          "type": "custom",
          "typeName": "(listbox: RefObject<HTMLElement>) => boolean"
        },
        "componentName": {
          "type": "string"
        },
        "disabledItemsFocusable": {
          "type": "boolean"
        },
        "getOptionKey": {
          "type": "custom",
          "typeName": "(option: Value | AutocompleteFreeSoloValueMapping<FreeSolo>) => string | number"
        },
        "className": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Autocomplete",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/material/ClickAwayListener#ClickAwayListener"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Avatar#Avatar": {
      "id": "@mui/material/Avatar#Avatar",
      "name": "Avatar",
      "props": {
        "alt": {
          "type": "string"
        },
        "src": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "square",
            "rounded",
            "circular"
          ]
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorDefault?: string; circular?: string; rounded?: string; square?: string; img?: string; fallback?: string; }"
        },
        "imgProps": {
          "type": "custom",
          "typeName": "ImgHTMLAttributes<HTMLImageElement> & { sx?: SxProps<Theme>; }"
        },
        "sizes": {
          "type": "string"
        },
        "srcSet": {
          "type": "string"
        },
        "slots": {
          "type": "custom",
          "typeName": "Slots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ [P in keyof K]?: K[P]; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Avatar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ListItemAvatar#ListItemAvatar",
          "@mui/material/IconButton#IconButton",
          "@mui/material/Stack#Stack",
          "@mui/material/Badge#Badge",
          "@mui/material/AvatarGroup#AvatarGroup",
          "@mui/material/CardHeader#CardHeader",
          "@mui/material/Chip#Chip",
          "@mui/material/Grid#Grid",
          "@mui/material/Unstable_Grid2#Grid",
          "@mui/material/MenuItem#MenuItem",
          "@mui/material/Skeleton#Skeleton",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Pageview#PageviewIcon",
          "@mui/icons-material/Assignment#AssignmentIcon",
          "@mui/icons-material/Person#PersonIcon",
          "@mui/icons-material/Image#ImageIcon",
          "@mui/icons-material/Work#WorkIcon",
          "@mui/icons-material/BeachAccess#BeachAccessIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/AvatarGroup#AvatarGroup": {
      "id": "@mui/material/AvatarGroup#AvatarGroup",
      "name": "AvatarGroup",
      "props": {
        "renderSurplus": {
          "type": "custom",
          "typeName": "(surplus: number) => ReactNode"
        },
        "total": {
          "type": "number"
        },
        "max": {
          "type": "number"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; avatar?: string; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ additionalAvatar?: AvatarOwnProps & AvatarSlotsAndSlotProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"classes\" | \"children\" | \"sx\" | \"variant\" | \"slots\" | \"slotProps\" | \"alt\" | \"src\" | \"sizes\" | \"srcSet\" | \"imgProps\"> & AvatarGroupComponentsPropsOverrides; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ additionalAvatar?: AvatarOwnProps & AvatarSlotsAndSlotProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"classes\" | \"children\" | \"sx\" | \"variant\" | \"slots\" | \"slotProps\" | \"alt\" | \"src\" | \"sizes\" | \"srcSet\" | \"imgProps\"> & AvatarGroupComponentsPropsOverrides; }"
        },
        "spacing": {
          "type": "custom",
          "typeName": "number | \"small\" | \"medium\""
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "square",
            "rounded",
            "circular"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/AvatarGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Backdrop#Backdrop": {
      "id": "@mui/material/Backdrop#Backdrop",
      "name": "Backdrop",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "open": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; invisible?: string; }"
        },
        "invisible": {
          "type": "boolean"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "((instance: unknown) => void) | RefObject<unknown>"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "in": {
          "type": "boolean"
        },
        "mountOnEnter": {
          "type": "boolean"
        },
        "unmountOnExit": {
          "type": "boolean"
        },
        "timeout": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "easing": {
          "type": "custom",
          "typeName": "string | { enter?: string; exit?: string; }"
        },
        "addEndListener": {
          "type": "custom",
          "typeName": "{ implicit: (node: HTMLElement, done: () => void) => void; explicit: (done: () => void) => void; }[RefElement extends undefined ? \"implicit\" : \"explicit\"]"
        },
        "appear": {
          "type": "boolean"
        },
        "enter": {
          "type": "boolean"
        },
        "exit": {
          "type": "boolean"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/material/Backdrop",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Badge#Badge": {
      "id": "@mui/material/Badge#Badge",
      "name": "Badge",
      "props": {
        "badgeContent": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default"
          ]
        },
        "overlap": {
          "type": "string-union",
          "values": [
            "circular",
            "rectangular"
          ]
        },
        "anchorOrigin": {
          "type": "custom",
          "typeName": "BadgeOrigin"
        },
        "max": {
          "type": "number"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "standard",
            "dot"
          ]
        },
        "invisible": {
          "type": "boolean"
        },
        "showZero": {
          "type": "boolean"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; badge?: string; dot?: string; standard?: string; anchorOriginTopRight?: string; anchorOriginBottomRight?: string; anchorOriginTopLeft?: string; anchorOriginBottomLeft?: string; invisible?: string; colorPrimary?: string; colorSecondary?: string; colorError?: string; colorInfo?: string; colorSuccess?: string; colorWarning?: string; anchorOriginTopRightRectangular?: string; anchorOriginBottomRightRectangular?: string; anchorOriginTopLeftRectangular?: string; anchorOriginBottomLeftRectangular?: string; anchorOriginTopRightCircular?: string; anchorOriginBottomRightCircular?: string; anchorOriginTopLeftCircular?: string; anchorOriginBottomLeftCircular?: string; overlapRectangular?: string; overlapCircular?: string; }"
        },
        "className": {
          "type": "string"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"span\", BadgeRootSlotPropsOverrides, { anchorOrigin: BadgeOrigin; badgeContent: ReactNode; children?: ReactNode; classes?: Partial<BadgeClasses>; className?: string; color: OverridableStringUnion<\"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\" | \"default\", BadgePropsColorOverrides>; componentsProps?: any; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Badge?: ElementType<any, keyof IntrinsicElements>; }; invisible: boolean; max: number; overlap: \"circular\" | \"rectangular\"; slotProps?: any; slots?: { root?: ElementType<any, keyof IntrinsicElements>; badge?: ElementType<any, keyof IntrinsicElements>; }; showZero: boolean; sx?: SxProps<Theme>; variant: OverridableStringUnion<\"standard\" | \"dot\", BadgePropsVariantOverrides>; displayValue: ReactNode; }>; badge?: SlotComponentProps<\"span\", BadgeBadgeSlotPropsOverrides, { anchorOrigin: BadgeOrigin; badgeContent: ReactNode; children?: ReactNode; classes?: Partial<BadgeClasses>; className?: string; color: OverridableStringUnion<\"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\" | \"default\", BadgePropsColorOverrides>; componentsProps?: any; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Badge?: ElementType<any, keyof IntrinsicElements>; }; invisible: boolean; max: number; overlap: \"circular\" | \"rectangular\"; slotProps?: any; slots?: { root?: ElementType<any, keyof IntrinsicElements>; badge?: ElementType<any, keyof IntrinsicElements>; }; showZero: boolean; sx?: SxProps<Theme>; variant: OverridableStringUnion<\"standard\" | \"dot\", BadgePropsVariantOverrides>; displayValue: ReactNode; }>; }"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Badge?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"span\", BadgeRootSlotPropsOverrides, { anchorOrigin: BadgeOrigin; badgeContent: ReactNode; children?: ReactNode; classes?: Partial<BadgeClasses>; className?: string; color: OverridableStringUnion<\"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\" | \"default\", BadgePropsColorOverrides>; componentsProps?: any; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Badge?: ElementType<any, keyof IntrinsicElements>; }; invisible: boolean; max: number; overlap: \"circular\" | \"rectangular\"; slotProps?: any; slots?: { root?: ElementType<any, keyof IntrinsicElements>; badge?: ElementType<any, keyof IntrinsicElements>; }; showZero: boolean; sx?: SxProps<Theme>; variant: OverridableStringUnion<\"standard\" | \"dot\", BadgePropsVariantOverrides>; displayValue: ReactNode; }>; badge?: SlotComponentProps<\"span\", BadgeBadgeSlotPropsOverrides, { anchorOrigin: BadgeOrigin; badgeContent: ReactNode; children?: ReactNode; classes?: Partial<BadgeClasses>; className?: string; color: OverridableStringUnion<\"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\" | \"default\", BadgePropsColorOverrides>; componentsProps?: any; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Badge?: ElementType<any, keyof IntrinsicElements>; }; invisible: boolean; max: number; overlap: \"circular\" | \"rectangular\"; slotProps?: any; slots?: { root?: ElementType<any, keyof IntrinsicElements>; badge?: ElementType<any, keyof IntrinsicElements>; }; showZero: boolean; sx?: SxProps<Theme>; variant: OverridableStringUnion<\"standard\" | \"dot\", BadgePropsVariantOverrides>; displayValue: ReactNode; }>; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; badge?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Badge",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/IconButton#IconButton",
          "@mui/material/Stack#Stack",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Notifications#NotificationsIcon",
          "@mui/x-date-pickers/PickersDay#PickersDay"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/BottomNavigation#BottomNavigation": {
      "id": "@mui/material/BottomNavigation#BottomNavigation",
      "name": "BottomNavigation",
      "props": {
        "showLabels": {
          "type": "boolean"
        },
        "value": {
          "type": "any"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/BottomNavigation",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Paper#Paper",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/material/BottomNavigationAction#BottomNavigationAction"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/BottomNavigationAction#BottomNavigationAction": {
      "id": "@mui/material/BottomNavigationAction#BottomNavigationAction",
      "name": "BottomNavigationAction",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "value": {
          "type": "any"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; selected?: string; iconOnly?: string; label?: string; }"
        },
        "showLabel": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "tabIndex": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ]
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "export": {
        "path": "@mui/material/BottomNavigationAction",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/BottomNavigation#BottomNavigation"
        ],
        "exclusiveParent": "@mui/material/BottomNavigation#BottomNavigation"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#Box": {
      "id": "@mui/material#Box",
      "name": "Box",
      "comment": "Demos:\n\n- [Box](https://mui.com/material-ui/react-box/)\n\nAPI:\n\n- [Box API](https://mui.com/material-ui/api/box/)",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "custom",
          "typeName": "((instance: unknown) => void) | RefObject<unknown>",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]",
          "source": {
            "type": "code-usage"
          }
        },
        "p": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "any"
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any"
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignItems": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "columnGap": {
          "type": "any"
        },
        "display": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "flexShrink": {
          "type": "any"
        },
        "flexWrap": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any"
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "height": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "justifyContent": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any"
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textAlign": {
          "type": "any"
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any"
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "width": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "gap": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "className": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties",
          "source": {
            "type": "code-usage"
          }
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
          "source": {
            "type": "code-usage"
          }
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "noValidate": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "src": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "alt": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "autoComplete": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "points": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "Box"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/Box/Box.d.ts"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Fade#Fade",
          "@mui/material/Container#Container",
          "@mui/material/Toolbar#Toolbar",
          "@mui/material#Box",
          "@mui/material/Autocomplete#Autocomplete",
          "@mui/material/ClickAwayListener#ClickAwayListener",
          "@mui/material/Grid#Grid",
          "@mui/material/Card#Card",
          "@mui/material/Portal#Portal",
          "@mui/material/Stack#Stack",
          "@mui/material/DialogContent#DialogContent",
          "@mui/material/Drawer#Drawer",
          "@mui/material#Typography",
          "@mui/material/Modal#Modal",
          "@mui/material/NoSsr#NoSsr",
          "@mui/material#ThemeProvider",
          "@mui/material/Popper#Popper",
          "@mui/material/Select#Select",
          "@mui/material/StepContent#StepContent",
          "@mui/material/Collapse#Collapse",
          "@mui/material/TableSortLabel#TableSortLabel",
          "@mui/lab/TabContext#TabContext",
          "@mui/material/Tooltip#Tooltip",
          "@mui/material/Paper#Paper",
          "@mui/x-data-grid#GridToolbarContainer",
          "@mui/x-data-grid-pro#DataGridPro",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/x-date-pickers/PickersLayout#PickersLayoutContentWrapper"
        ],
        "exclusiveChildren": [
          "@mui/material/CssBaseline#CssBaseline",
          "@mui/material/Drawer#Drawer",
          "@mui/material/Slide#Slide",
          "@mui/material/Backdrop#Backdrop",
          "@mui/material/ButtonGroup#ButtonGroup",
          "@mui/material/Card#Card",
          "react-swipeable-views#SwipeableViews",
          "@mui/material/Zoom#Zoom",
          "@mui/material/ImageList#ImageList",
          "react-window#FixedSizeList",
          "@mui/lab/Masonry#Masonry",
          "@mui/material/Snackbar#Snackbar",
          "@mui/material/SpeedDial#SpeedDial",
          "@mui/material/MobileStepper#MobileStepper",
          "@mui/lab/TabContext#TabContext",
          "@mui/lab/TabList#TabList",
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
          "@mui/x-charts-pro/Heatmap#Heatmap",
          "@mui/x-charts/SparkLineChart#SparkLineChart",
          "@mui/x-data-grid-premium#DataGridPremium",
          "@mui/x-data-grid#GridToolbarQuickFilter",
          "@mui/icons-material/Grade#GradeIcon",
          "@mui/icons-material/RocketLaunch#RocketLaunchIcon",
          "@mui/icons-material/Restaurant#RestaurantIcon",
          "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
          "@mui/x-tree-view/RichTreeView#RichTreeView",
          "@mui/x-tree-view/TreeItem2#TreeItem2Checkbox",
          "@mui/x-tree-view-pro/RichTreeViewPro#RichTreeViewPro"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Breadcrumbs#Breadcrumbs": {
      "id": "@mui/material/Breadcrumbs#Breadcrumbs",
      "name": "Breadcrumbs",
      "props": {
        "maxItems": {
          "type": "number"
        },
        "separator": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; ol?: string; li?: string; separator?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ CollapsedIcon?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ collapsedIcon?: SlotComponentProps<OverridableComponent<SvgIconTypeMap<{}, \"svg\">> & { muiName: string; }, BreadcrumbsCollapsedIconSlotPropsOverrides, BreadcrumbsOwnerState>; }"
        },
        "expandText": {
          "type": "string"
        },
        "itemsAfterCollapse": {
          "type": "number"
        },
        "itemsBeforeCollapse": {
          "type": "number"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Breadcrumbs",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack"
        ],
        "exclusiveParent": "@mui/material/Stack#Stack",
        "exclusiveChildren": [
          "@mui/icons-material/NavigateNext#NavigateNextIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#Button": {
      "id": "@mui/material#Button",
      "name": "Button",
      "comment": "Demos:\n\n- [Button Group](https://mui.com/material-ui/react-button-group/)\n- [Button](https://mui.com/material-ui/react-button/)\n\nAPI:\n\n- [Button API](https://mui.com/material-ui/api/button/)\n- inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; text?: string; textInherit?: string; textPrimary?: string; textSecondary?: string; textSuccess?: string; textError?: string; textInfo?: string; textWarning?: string; outlined?: string; outlinedInherit?: string; outlinedPrimary?: string; outlinedSecondary?: string; outlinedSuccess?: string; outlinedError?: string; outlinedInfo?: string; outlinedWarning?: string; contained?: string; containedInherit?: string; containedPrimary?: string; containedSecondary?: string; containedSuccess?: string; containedInfo?: string; containedError?: string; containedWarning?: string; disableElevation?: string; focusVisible?: string; disabled?: string; colorInherit?: string; textSizeSmall?: string; textSizeMedium?: string; textSizeLarge?: string; outlinedSizeSmall?: string; outlinedSizeMedium?: string; outlinedSizeLarge?: string; containedSizeSmall?: string; containedSizeMedium?: string; containedSizeLarge?: string; sizeSmall?: string; sizeMedium?: string; sizeLarge?: string; fullWidth?: string; icon?: string; startIcon?: string; endIcon?: string; iconSizeSmall?: string; iconSizeMedium?: string; iconSizeLarge?: string; colorPrimary?: string; colorSecondary?: string; colorSuccess?: string; colorError?: string; colorInfo?: string; colorWarning?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableElevation": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "endIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal",
          "source": {
            "type": "code-usage"
          }
        },
        "fullWidth": {
          "type": "boolean"
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "startIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string-union",
          "values": [
            "text",
            "outlined",
            "contained"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "tabIndex": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R",
          "source": {
            "type": "code-usage"
          }
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
          "source": {
            "type": "code-usage"
          }
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "Button"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/Button/Button.d.ts"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/AccordionActions#AccordionActions",
          "@mui/material/Alert#Alert",
          "@mui/material#Box",
          "@mui/material/Toolbar#Toolbar",
          "@mui/material/DialogActions#DialogActions",
          "@mui/material/ButtonGroup#ButtonGroup",
          "@mui/material/Stack#Stack",
          "@mui/material#CardActions",
          "material-ui-popup-state#PopupState",
          "@mui/material/Grid#Grid",
          "@mui/material/FormControl#FormControl",
          "@mui/material/Snackbar#Snackbar",
          "@mui/material/MobileStepper#MobileStepper",
          "@mui/material/Paper#Paper",
          "@mui/material/Tooltip#Tooltip",
          "@mui/x-data-grid#GridToolbarContainer",
          "@mui/material/FormGroup#FormGroup",
          "@mui/x-data-grid-premium#GridToolbarContainer",
          "@mui/x-data-grid-pro#GridToolbarContainer"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Remove#RemoveIcon",
          "@mui/icons-material/CloudUpload#CloudUploadIcon",
          "@mui/icons-material/Print#PrintIcon",
          "@mui/icons-material/Brightness7#Brightness7Icon",
          "@mui/icons-material/Brightness4#Brightness4Icon",
          "@mui/icons-material/KeyboardArrowRight#KeyboardArrowRightIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ButtonBase#ButtonBase": {
      "id": "@mui/material/ButtonBase#ButtonBase",
      "name": "ButtonBase",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; disabled?: string; focusVisible?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "tabIndex": {
          "type": "number"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ]
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material/ButtonBase",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Grid#Grid"
        ],
        "exclusiveParent": "@mui/material/Grid#Grid"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ButtonGroup#ButtonGroup": {
      "id": "@mui/material/ButtonGroup#ButtonGroup",
      "name": "ButtonGroup",
      "props": {
        "variant": {
          "type": "string-union",
          "values": [
            "text",
            "outlined",
            "contained"
          ]
        },
        "disableElevation": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "horizontal",
            "vertical"
          ]
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; contained?: string; outlined?: string; text?: string; disableElevation?: string; disabled?: string; firstButton?: string; fullWidth?: string; vertical?: string; grouped?: string; groupedHorizontal?: string; groupedVertical?: string; groupedText?: string; groupedTextHorizontal?: string; groupedTextVertical?: string; groupedTextPrimary?: string; groupedTextSecondary?: string; groupedOutlined?: string; groupedOutlinedHorizontal?: string; groupedOutlinedVertical?: string; groupedOutlinedPrimary?: string; groupedOutlinedSecondary?: string; groupedContained?: string; groupedContainedHorizontal?: string; groupedContainedVertical?: string; groupedContainedPrimary?: string; groupedContainedSecondary?: string; lastButton?: string; middleButton?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/ButtonGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Card#Card": {
      "id": "@mui/material/Card#Card",
      "name": "Card",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "elevation",
            "outlined"
          ]
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "raised": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "elevation": {
          "type": "number"
        },
        "square": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Card",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box",
        "exclusiveChildren": [
          "@mui/material#CardActionArea",
          "@mui/material#CardActions",
          "@mui/material/CardHeader#CardHeader"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#CardActionArea": {
      "id": "@mui/material#CardActionArea",
      "name": "CardActionArea",
      "comment": "Demos:\n\n- [Card](https://mui.com/material-ui/react-card/)\n\nAPI:\n\n- [CardActionArea API](https://mui.com/material-ui/api/card-action-area/)\n- inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)",
      "props": {
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; focusVisible?: string; focusHighlight?: string; }"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "tabIndex": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ]
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "CardActionArea"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/CardActionArea/CardActionArea.d.ts"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Card#Card"
        ],
        "exclusiveParent": "@mui/material/Card#Card"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#CardActions": {
      "id": "@mui/material#CardActions",
      "name": "CardActions",
      "comment": "Demos:\n\n- [Card](https://mui.com/material-ui/react-card/)\n\nAPI:\n\n- [CardActions API](https://mui.com/material-ui/api/card-actions/)",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; spacing?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disableSpacing": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "CardActions"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/CardActions/CardActions.d.ts"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Card#Card"
        ],
        "exclusiveParent": "@mui/material/Card#Card"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/CardContent#CardContent": {
      "id": "@mui/material/CardContent#CardContent",
      "name": "CardContent",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/CardContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#CardActionArea",
          "@mui/material/Card#Card",
          "@mui/material#Box",
          "@mui/material/Collapse#Collapse"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/CardHeader#CardHeader": {
      "id": "@mui/material/CardHeader#CardHeader",
      "name": "CardHeader",
      "props": {
        "avatar": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "action": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "title": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "subheader": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; avatar?: string; action?: string; content?: string; title?: string; subheader?: string; }"
        },
        "disableTypography": {
          "type": "boolean"
        },
        "subheaderTypographyProps": {
          "type": "custom",
          "typeName": "{ component?: SubheaderTypographyComponent; } & TypographyOwnProps & CommonProps & DistributiveOmit<ComponentPropsWithRef<SubheaderTypographyComponent>, \"className\" | \"style\" | \"classes\" | \"children\" | \"sx\" | \"variant\" | \"p\" | \"color\" | \"border\" | \"boxShadow\" | \"fontWeight\" | \"zIndex\" | \"alignContent\" | \"alignItems\" | \"alignSelf\" | \"bottom\" | \"boxSizing\" | \"columnGap\" | \"display\" | \"flexBasis\" | \"flexDirection\" | \"flexGrow\" | \"flexShrink\" | \"flexWrap\" | \"fontFamily\" | \"fontSize\" | \"fontStyle\" | \"gridAutoColumns\" | \"gridAutoFlow\" | \"gridAutoRows\" | \"gridTemplateAreas\" | \"gridTemplateColumns\" | \"gridTemplateRows\" | \"height\" | \"justifyContent\" | \"justifyItems\" | \"justifySelf\" | \"left\" | \"letterSpacing\" | \"lineHeight\" | \"marginBlockEnd\" | \"marginBlockStart\" | \"marginBottom\" | \"marginInlineEnd\" | \"marginInlineStart\" | \"marginLeft\" | \"marginRight\" | \"marginTop\" | \"maxHeight\" | \"maxWidth\" | \"minHeight\" | \"minWidth\" | \"order\" | \"paddingBlockEnd\" | \"paddingBlockStart\" | \"paddingBottom\" | \"paddingInlineEnd\" | \"paddingInlineStart\" | \"paddingLeft\" | \"paddingRight\" | \"paddingTop\" | \"position\" | \"right\" | \"rowGap\" | \"textAlign\" | \"textOverflow\" | \"textTransform\" | \"top\" | \"visibility\" | \"whiteSpace\" | \"width\" | \"borderBottom\" | \"borderColor\" | \"borderLeft\" | \"borderRadius\" | \"borderRight\" | \"borderTop\" | \"flex\" | \"gap\" | \"gridArea\" | \"gridColumn\" | \"gridRow\" | \"margin\" | \"marginBlock\" | \"marginInline\" | \"overflow\" | \"padding\" | \"paddingBlock\" | \"paddingInline\" | \"bgcolor\" | \"m\" | \"mt\" | \"mr\" | \"mb\" | \"ml\" | \"mx\" | \"marginX\" | \"my\" | \"marginY\" | \"pt\" | \"pr\" | \"pb\" | \"pl\" | \"px\" | \"paddingX\" | \"py\" | \"paddingY\" | \"typography\" | \"displayPrint\" | \"component\" | \"align\" | \"gutterBottom\" | \"noWrap\" | \"paragraph\" | \"variantMapping\"> & { component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "titleTypographyProps": {
          "type": "custom",
          "typeName": "{ component?: TitleTypographyComponent; } & TypographyOwnProps & CommonProps & DistributiveOmit<ComponentPropsWithRef<TitleTypographyComponent>, \"className\" | \"style\" | \"classes\" | \"children\" | \"sx\" | \"variant\" | \"p\" | \"color\" | \"border\" | \"boxShadow\" | \"fontWeight\" | \"zIndex\" | \"alignContent\" | \"alignItems\" | \"alignSelf\" | \"bottom\" | \"boxSizing\" | \"columnGap\" | \"display\" | \"flexBasis\" | \"flexDirection\" | \"flexGrow\" | \"flexShrink\" | \"flexWrap\" | \"fontFamily\" | \"fontSize\" | \"fontStyle\" | \"gridAutoColumns\" | \"gridAutoFlow\" | \"gridAutoRows\" | \"gridTemplateAreas\" | \"gridTemplateColumns\" | \"gridTemplateRows\" | \"height\" | \"justifyContent\" | \"justifyItems\" | \"justifySelf\" | \"left\" | \"letterSpacing\" | \"lineHeight\" | \"marginBlockEnd\" | \"marginBlockStart\" | \"marginBottom\" | \"marginInlineEnd\" | \"marginInlineStart\" | \"marginLeft\" | \"marginRight\" | \"marginTop\" | \"maxHeight\" | \"maxWidth\" | \"minHeight\" | \"minWidth\" | \"order\" | \"paddingBlockEnd\" | \"paddingBlockStart\" | \"paddingBottom\" | \"paddingInlineEnd\" | \"paddingInlineStart\" | \"paddingLeft\" | \"paddingRight\" | \"paddingTop\" | \"position\" | \"right\" | \"rowGap\" | \"textAlign\" | \"textOverflow\" | \"textTransform\" | \"top\" | \"visibility\" | \"whiteSpace\" | \"width\" | \"borderBottom\" | \"borderColor\" | \"borderLeft\" | \"borderRadius\" | \"borderRight\" | \"borderTop\" | \"flex\" | \"gap\" | \"gridArea\" | \"gridColumn\" | \"gridRow\" | \"margin\" | \"marginBlock\" | \"marginInline\" | \"overflow\" | \"padding\" | \"paddingBlock\" | \"paddingInline\" | \"bgcolor\" | \"m\" | \"mt\" | \"mr\" | \"mb\" | \"ml\" | \"mx\" | \"marginX\" | \"my\" | \"marginY\" | \"pt\" | \"pr\" | \"pb\" | \"pl\" | \"px\" | \"paddingX\" | \"py\" | \"paddingY\" | \"typography\" | \"displayPrint\" | \"component\" | \"align\" | \"gutterBottom\" | \"noWrap\" | \"paragraph\" | \"variantMapping\"> & { component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/CardHeader",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Card#Card"
        ],
        "exclusiveParent": "@mui/material/Card#Card"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/CardMedia#CardMedia": {
      "id": "@mui/material/CardMedia#CardMedia",
      "name": "CardMedia",
      "props": {
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "image": {
          "type": "string"
        },
        "alt": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "title": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; media?: string; img?: string; }"
        },
        "src": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/CardMedia",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#CardActionArea",
          "@mui/material/Card#Card"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Checkbox#Checkbox": {
      "id": "@mui/material/Checkbox#Checkbox",
      "name": "Checkbox",
      "props": {
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "checkedIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "checked": {
          "type": "boolean"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputHTMLAttributes<HTMLInputElement>"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "indeterminate": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "edge": {
          "type": "custom",
          "typeName": "false | \"end\" | \"start\""
        },
        "tabIndex": {
          "type": "number"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; checked?: string; disabled?: string; indeterminate?: string; colorPrimary?: string; colorSecondary?: string; sizeSmall?: string; sizeMedium?: string; }"
        },
        "id": {
          "type": "string"
        },
        "indeterminateIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "required": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/material/Checkbox",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Autocomplete#Autocomplete",
          "@mui/material/FormControlLabel#FormControlLabel",
          "@mui/material/ListItemIcon#ListItemIcon",
          "@mui/material/ListItem#ListItem",
          "@mui/material/MenuItem#MenuItem",
          "@mui/material/TableCell#TableCell",
          "@mui/material/CardHeader#CardHeader"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/FavoriteBorder#FavoriteBorder",
          "@mui/icons-material/Favorite#Favorite",
          "@mui/icons-material/BookmarkBorder#BookmarkBorderIcon",
          "@mui/icons-material/Bookmark#BookmarkIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Chip#Chip": {
      "id": "@mui/material/Chip#Chip",
      "name": "Chip",
      "props": {
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disabled": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "outlined",
            "filled"
          ]
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "avatar": {
          "type": "custom",
          "typeName": "ReactElement<any, string | JSXElementConstructor<any>>"
        },
        "icon": {
          "type": "custom",
          "typeName": "ReactElement<any, string | JSXElementConstructor<any>>"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "clickable": {
          "type": "boolean"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default"
          ]
        },
        "deleteIcon": {
          "type": "custom",
          "typeName": "ReactElement<any, string | JSXElementConstructor<any>>"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "null"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; sizeSmall?: string; sizeMedium?: string; colorError?: string; colorInfo?: string; colorPrimary?: string; colorSecondary?: string; colorSuccess?: string; colorWarning?: string; disabled?: string; clickable?: string; clickableColorPrimary?: string; clickableColorSecondary?: string; deletable?: string; deletableColorPrimary?: string; deletableColorSecondary?: string; outlined?: string; filled?: string; outlinedPrimary?: string; outlinedSecondary?: string; filledPrimary?: string; filledSecondary?: string; avatar?: string; avatarSmall?: string; avatarMedium?: string; avatarColorPrimary?: string; avatarColorSecondary?: string; icon?: string; iconSmall?: string; iconMedium?: string; iconColorPrimary?: string; iconColorSecondary?: string; label?: string; labelSmall?: string; labelMedium?: string; deleteIcon?: string; deleteIconSmall?: string; deleteIconMedium?: string; deleteIconColorPrimary?: string; deleteIconColorSecondary?: string; deleteIconOutlinedColorPrimary?: string; deleteIconOutlinedColorSecondary?: string; deleteIconFilledColorPrimary?: string; deleteIconFilledColorSecondary?: string; focusVisible?: string; }"
        },
        "skipFocusWhenDisabled": {
          "type": "boolean"
        },
        "tabIndex": {
          "type": "number"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Chip",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Autocomplete#Autocomplete",
          "@mui/material/Stack#Stack",
          "@mui/material#Box",
          "@mui/material/Divider#Divider",
          "@mui/material/ListItem#ListItem"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Done#DoneIcon",
          "@mui/icons-material/Face#FaceIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/CircularProgress#CircularProgress": {
      "id": "@mui/material/CircularProgress#CircularProgress",
      "name": "CircularProgress",
      "props": {
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "size": {
          "type": "custom",
          "typeName": "string | number"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "indeterminate",
            "determinate"
          ]
        },
        "value": {
          "type": "number"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disableShrink": {
          "type": "boolean"
        },
        "thickness": {
          "type": "number"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; determinate?: string; indeterminate?: string; colorPrimary?: string; colorSecondary?: string; svg?: string; circle?: string; circleDeterminate?: string; circleIndeterminate?: string; circleDisableShrink?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/CircularProgress",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Backdrop#Backdrop",
          "@mui/material/Stack#Stack",
          "@mui/material#Box",
          "@mui/material/Fade#Fade",
          "@mui/material/Alert#Alert"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Collapse#Collapse": {
      "id": "@mui/material/Collapse#Collapse",
      "name": "Collapse",
      "props": {
        "in": {
          "type": "boolean"
        },
        "component": {
          "type": "custom",
          "typeName": "\"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | ComponentType<TransitionProps>"
        },
        "timeout": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; } | \"auto\""
        },
        "unmountOnExit": {
          "type": "boolean"
        },
        "collapsedSize": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "horizontal",
            "vertical"
          ]
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; horizontal?: string; entered?: string; hidden?: string; wrapper?: string; wrapperInner?: string; }"
        },
        "easing": {
          "type": "custom",
          "typeName": "string | { enter?: string; exit?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "mountOnEnter": {
          "type": "boolean"
        },
        "addEndListener": {
          "type": "custom",
          "typeName": "{ implicit: (node: HTMLElement, done: () => void) => void; explicit: (done: () => void) => void; }[RefElement extends undefined ? \"implicit\" : \"explicit\"]"
        },
        "appear": {
          "type": "boolean"
        },
        "enter": {
          "type": "boolean"
        },
        "exit": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/Collapse",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/List#List",
          "@mui/material/Card#Card",
          "@mui/material/TableCell#TableCell",
          "react-transition-group#TransitionGroup"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Container#Container": {
      "id": "@mui/material/Container#Container",
      "name": "Container",
      "props": {
        "maxWidth": {
          "type": "custom",
          "typeName": "false | Breakpoint"
        },
        "fixed": {
          "type": "boolean"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; disableGutters?: string; fixed?: string; maxWidthXs?: string; maxWidthSm?: string; maxWidthMd?: string; maxWidthLg?: string; maxWidthXl?: string; }"
        },
        "disableGutters": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Container",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/AppBar#AppBar"
        ],
        "exclusiveParent": "@mui/material/AppBar#AppBar"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Dialog#Dialog": {
      "id": "@mui/material/Dialog#Dialog",
      "name": "Dialog",
      "props": {
        "open": {
          "type": "boolean"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "keepMounted": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "maxWidth": {
          "type": "custom",
          "typeName": "false | Breakpoint"
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "PaperComponent": {
          "type": "custom",
          "typeName": "((props: PaperProps, deprecatedLegacyContext?: any) => ReactNode) | (new (props: PaperProps, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "PaperProps": {
          "type": "custom",
          "typeName": "{ [x: string]: any; [x: number]: any; [x: symbol]: any; children?: ReactNode; classes?: Partial<PaperClasses> & Partial<ClassNameMap<never>>; elevation?: number; square?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"elevation\" | \"outlined\", PaperPropsVariantOverrides>; className?: string; style?: CSSProperties; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "fullScreen": {
          "type": "boolean"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "scroll": {
          "type": "string-union",
          "values": [
            "body",
            "paper"
          ]
        },
        "disableEscapeKeyDown": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; scrollPaper?: string; scrollBody?: string; container?: string; paper?: string; paperScrollPaper?: string; paperScrollBody?: string; paperWidthFalse?: string; paperWidthXs?: string; paperWidthSm?: string; paperWidthMd?: string; paperWidthLg?: string; paperWidthXl?: string; paperFullWidth?: string; paperFullScreen?: string; }"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "container": {
          "type": "custom",
          "typeName": "Element | (() => Element)"
        },
        "slots": {
          "type": "custom",
          "typeName": "ModalSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "BackdropComponent": {
          "type": "custom",
          "typeName": "ComponentType<BackdropProps>"
        },
        "BackdropProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; classes?: Partial<BackdropClasses> & Partial<ClassNameMap<never>>; invisible?: boolean; open?: boolean; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; }; sx?: SxProps<Theme>; transitionDuration?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; TransitionComponent?: JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLElement>; ref?: Ref<unknown>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; in?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; easing?: string | { enter?: string; exit?: string; }; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; appear?: boolean; enter?: boolean; exit?: boolean; key?: Key; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "closeAfterTransition": {
          "type": "boolean"
        },
        "disableAutoFocus": {
          "type": "boolean"
        },
        "disableEnforceFocus": {
          "type": "boolean"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "disableRestoreFocus": {
          "type": "boolean"
        },
        "disableScrollLock": {
          "type": "boolean"
        },
        "hideBackdrop": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/material/Dialog",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "exclusiveChildren": [
          "@mui/material/DialogTitle#DialogTitle",
          "@mui/material/DialogContent#DialogContent",
          "@mui/material/DialogActions#DialogActions"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/DialogActions#DialogActions": {
      "id": "@mui/material/DialogActions#DialogActions",
      "name": "DialogActions",
      "props": {
        "className": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; spacing?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disableSpacing": {
          "type": "boolean"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/DialogActions",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Dialog#Dialog"
        ],
        "exclusiveParent": "@mui/material/Dialog#Dialog"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/DialogContent#DialogContent": {
      "id": "@mui/material/DialogContent#DialogContent",
      "name": "DialogContent",
      "props": {
        "dividers": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; dividers?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/DialogContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Dialog#Dialog"
        ],
        "exclusiveParent": "@mui/material/Dialog#Dialog",
        "exclusiveChildren": [
          "@mui/material/DialogContentText#DialogContentText"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/DialogContentText#DialogContentText": {
      "id": "@mui/material/DialogContentText#DialogContentText",
      "name": "DialogContentText",
      "props": {
        "id": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "tabIndex": {
          "type": "number"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "button",
            "caption",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "inherit",
            "subtitle1",
            "subtitle2",
            "body1",
            "body2",
            "overline"
          ]
        },
        "p": {
          "type": "any"
        },
        "color": {
          "type": "any"
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any"
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignItems": {
          "type": "any"
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "columnGap": {
          "type": "any"
        },
        "display": {
          "type": "any"
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any"
        },
        "flexShrink": {
          "type": "any"
        },
        "flexWrap": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any"
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any"
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "height": {
          "type": "any"
        },
        "justifyContent": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any"
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textAlign": {
          "type": "any"
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any"
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "width": {
          "type": "any"
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "gap": {
          "type": "any"
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any"
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any"
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right",
            "inherit",
            "justify"
          ]
        },
        "gutterBottom": {
          "type": "boolean"
        },
        "noWrap": {
          "type": "boolean"
        },
        "paragraph": {
          "type": "boolean"
        },
        "variantMapping": {
          "type": "custom",
          "typeName": "{ button?: string; caption?: string; h1?: string; h2?: string; h3?: string; h4?: string; h5?: string; h6?: string; inherit?: string; subtitle1?: string; subtitle2?: string; body1?: string; body2?: string; overline?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/DialogContentText",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/DialogContent#DialogContent"
        ],
        "exclusiveParent": "@mui/material/DialogContent#DialogContent"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/DialogTitle#DialogTitle": {
      "id": "@mui/material/DialogTitle#DialogTitle",
      "name": "DialogTitle",
      "props": {
        "id": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "button",
            "caption",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "inherit",
            "subtitle1",
            "subtitle2",
            "body1",
            "body2",
            "overline"
          ]
        },
        "p": {
          "type": "any"
        },
        "color": {
          "type": "any"
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any"
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignItems": {
          "type": "any"
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "columnGap": {
          "type": "any"
        },
        "display": {
          "type": "any"
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any"
        },
        "flexShrink": {
          "type": "any"
        },
        "flexWrap": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any"
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any"
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "height": {
          "type": "any"
        },
        "justifyContent": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any"
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textAlign": {
          "type": "any"
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any"
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "width": {
          "type": "any"
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "gap": {
          "type": "any"
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any"
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any"
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right",
            "inherit",
            "justify"
          ]
        },
        "gutterBottom": {
          "type": "boolean"
        },
        "noWrap": {
          "type": "boolean"
        },
        "paragraph": {
          "type": "boolean"
        },
        "variantMapping": {
          "type": "custom",
          "typeName": "{ button?: string; caption?: string; h1?: string; h2?: string; h3?: string; h4?: string; h5?: string; h6?: string; inherit?: string; subtitle1?: string; subtitle2?: string; body1?: string; body2?: string; overline?: string; }"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/DialogTitle",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Dialog#Dialog"
        ],
        "exclusiveParent": "@mui/material/Dialog#Dialog"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Divider#Divider": {
      "id": "@mui/material/Divider#Divider",
      "name": "Divider",
      "props": {
        "textAlign": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right"
          ]
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string-union",
          "values": [
            "inset",
            "middle",
            "fullWidth"
          ]
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "horizontal",
            "vertical"
          ]
        },
        "flexItem": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "absolute": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; absolute?: string; inset?: string; fullWidth?: string; light?: string; middle?: string; vertical?: string; flexItem?: string; withChildren?: string; withChildrenVertical?: string; textAlignRight?: string; textAlignLeft?: string; wrapper?: string; wrapperVertical?: string; }"
        },
        "light": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Divider",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/List#List",
          "@mui/material/Card#Card",
          "@mui/material/Drawer#Drawer",
          "@mui/material/Menu#Menu",
          "@mui/material/MenuList#MenuList",
          "@mui/material/Stack#Stack",
          "@mui/material/Paper#Paper"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Drawer#Drawer": {
      "id": "@mui/material/Drawer#Drawer",
      "name": "Drawer",
      "props": {
        "container": {
          "type": "custom",
          "typeName": "Element | (() => Element)"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "permanent",
            "persistent",
            "temporary"
          ]
        },
        "open": {
          "type": "boolean"
        },
        "ModalProps": {
          "type": "custom",
          "typeName": "{ BackdropComponent?: ElementType<BackdropProps, keyof IntrinsicElements>; BackdropProps?: Partial<BackdropProps>; children?: ReactElement<any, string | JSXElementConstructor<any>>; classes?: Partial<ModalClasses>; className?: string; closeAfterTransition?: boolean; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }; container?: Element | (() => Element); disableAutoFocus?: boolean; disableEnforceFocus?: boolean; disableEscapeKeyDown?: boolean; disablePortal?: boolean; disableRestoreFocus?: boolean; disableScrollLock?: boolean; hideBackdrop?: boolean; keepMounted?: boolean; onBackdropClick?: ReactEventHandler<{}>; onClose?: (event: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => void; onTransitionEnter?: () => void; onTransitionExited?: () => void; open?: boolean; slots?: ModalSlots; slotProps?: { root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }; sx?: SxProps<Theme>; style?: CSSProperties; onChange?: FormEventHandler<HTMLDivElement>; ref?: Ref<HTMLDivElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "anchor": {
          "type": "string-union",
          "values": [
            "bottom",
            "left",
            "right",
            "top"
          ]
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; docked?: string; paper?: string; paperAnchorLeft?: string; paperAnchorRight?: string; paperAnchorTop?: string; paperAnchorBottom?: string; paperAnchorDockedLeft?: string; paperAnchorDockedTop?: string; paperAnchorDockedRight?: string; paperAnchorDockedBottom?: string; modal?: string; }"
        },
        "elevation": {
          "type": "number"
        },
        "PaperProps": {
          "type": "custom",
          "typeName": "{ [x: string]: any; [x: number]: any; [x: symbol]: any; children?: ReactNode; classes?: Partial<PaperClasses> & Partial<ClassNameMap<never>>; elevation?: number; square?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"elevation\" | \"outlined\", PaperPropsVariantOverrides>; className?: string; style?: CSSProperties; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "SlideProps": {
          "type": "custom",
          "typeName": "{ appear?: boolean; children?: ReactElement<any, any>; container?: Element | ((element: Element) => Element); direction?: \"left\" | \"right\" | \"up\" | \"down\"; easing?: string | { enter?: string; exit?: string; }; in?: boolean; ref?: Ref<unknown>; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; enter?: boolean; exit?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; className?: string; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; slot?: string; spellCheck?: Booleanish; style?: CSSProperties; tabIndex?: number; title?: string; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChange?: FormEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; }"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "ModalSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "BackdropComponent": {
          "type": "custom",
          "typeName": "ComponentType<BackdropProps>"
        },
        "BackdropProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; classes?: Partial<BackdropClasses> & Partial<ClassNameMap<never>>; invisible?: boolean; open?: boolean; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; }; sx?: SxProps<Theme>; transitionDuration?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; TransitionComponent?: JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLElement>; ref?: Ref<unknown>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; in?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; easing?: string | { enter?: string; exit?: string; }; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; appear?: boolean; enter?: boolean; exit?: boolean; key?: Key; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "closeAfterTransition": {
          "type": "boolean"
        },
        "disableAutoFocus": {
          "type": "boolean"
        },
        "disableEnforceFocus": {
          "type": "boolean"
        },
        "disableEscapeKeyDown": {
          "type": "boolean"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "disableRestoreFocus": {
          "type": "boolean"
        },
        "disableScrollLock": {
          "type": "boolean"
        },
        "hideBackdrop": {
          "type": "boolean"
        },
        "keepMounted": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/material/Drawer",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Fab#Fab": {
      "id": "@mui/material/Fab#Fab",
      "name": "Fab",
      "props": {
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "variant": {
          "type": "string-union",
          "values": [
            "circular",
            "extended"
          ]
        },
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; primary?: string; secondary?: string; extended?: string; circular?: string; focusVisible?: string; disabled?: string; colorInherit?: string; sizeSmall?: string; sizeMedium?: string; }"
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "href": {
          "type": "string"
        },
        "tabIndex": {
          "type": "number"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ]
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material/Fab",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Zoom#Zoom"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Navigation#NavigationIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Fade#Fade": {
      "id": "@mui/material/Fade#Fade",
      "name": "Fade",
      "props": {
        "in": {
          "type": "boolean"
        },
        "appear": {
          "type": "boolean"
        },
        "timeout": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "unmountOnExit": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "easing": {
          "type": "custom",
          "typeName": "string | { enter?: string; exit?: string; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "((instance: unknown) => void) | RefObject<unknown>"
        },
        "className": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "mountOnEnter": {
          "type": "boolean"
        },
        "addEndListener": {
          "type": "custom",
          "typeName": "{ implicit: (node: HTMLElement, done: () => void) => void; explicit: (done: () => void) => void; }[RefElement extends undefined ? \"implicit\" : \"explicit\"]"
        },
        "enter": {
          "type": "boolean"
        },
        "exit": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/material/Fade",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Unstable_TrapFocus#TrapFocus",
          "@mui/material/Modal#Modal",
          "@mui/material/Popper#Popper",
          "@mui/material#Box"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/FilledInput#FilledInput": {
      "id": "@mui/material/FilledInput#FilledInput",
      "name": "FilledInput",
      "props": {
        "id": {
          "type": "string"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "unknown"
        },
        "endAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "type": {
          "type": "string"
        },
        "startAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorSecondary?: string; underline?: string; focused?: string; disabled?: string; adornedStart?: string; adornedEnd?: string; error?: string; sizeSmall?: string; multiline?: string; hiddenLabel?: string; input?: string; inputSizeSmall?: string; inputHiddenLabel?: string; inputMultiline?: string; inputAdornedStart?: string; inputAdornedEnd?: string; inputTypeSearch?: string; }"
        },
        "hiddenLabel": {
          "type": "boolean"
        },
        "disableUnderline": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }"
        },
        "error": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "autoComplete": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "rows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "disableInjectingGlobalStyles": {
          "type": "boolean"
        },
        "inputComponent": {
          "type": "custom",
          "typeName": "\"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"data\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"figcaption\" | \"figure\" | \"footer\" | \"head\" | \"header\" | \"hgroup\" | \"i\" | \"input\" | \"kbd\" | \"keygen\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"textarea\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<InputBaseComponentProps>"
        },
        "multiline": {
          "type": "boolean"
        },
        "renderSuffix": {
          "type": "custom",
          "typeName": "(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode"
        },
        "maxRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "minRows": {
          "type": "custom",
          "typeName": "string | number"
        }
      },
      "export": {
        "path": "@mui/material/FilledInput",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControl#FormControl"
        ],
        "exclusiveParent": "@mui/material/FormControl#FormControl"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/FormControl#FormControl": {
      "id": "@mui/material/FormControl#FormControl",
      "name": "FormControl",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string-union",
          "values": [
            "outlined",
            "filled",
            "standard"
          ]
        },
        "required": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; marginNormal?: string; marginDense?: string; fullWidth?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "focused": {
          "type": "boolean"
        },
        "hiddenLabel": {
          "type": "boolean"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense",
            "normal"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/FormControl",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Grid#Grid",
          "@mui/material/Paper#Paper",
          "@mui/material/Stack#Stack",
          "@mui/material/FormGroup#FormGroup"
        ],
        "exclusiveChildren": [
          "@mui/material/FormLabel#FormLabel",
          "@mui/material/FormHelperText#FormHelperText",
          "@mui/material/InputLabel#InputLabel",
          "@mui/material/Select#Select",
          "@mui/material/NativeSelect#NativeSelect",
          "@mui/material/FilledInput#FilledInput"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/FormControlLabel#FormControlLabel": {
      "id": "@mui/material/FormControlLabel#FormControlLabel",
      "name": "FormControlLabel",
      "props": {
        "control": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "required": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "labelPlacement": {
          "type": "string-union",
          "values": [
            "bottom",
            "top",
            "end",
            "start"
          ]
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "checked": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; labelPlacementStart?: string; labelPlacementTop?: string; labelPlacementBottom?: string; disabled?: string; label?: string; error?: string; required?: string; asterisk?: string; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ typography?: TypographyProps; }"
        },
        "disableTypography": {
          "type": "boolean"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "name": {
          "type": "string"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ typography?: TypographyProps; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "htmlFor": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/FormControlLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormGroup#FormGroup",
          "@mui/material#Box",
          "@mui/material/RadioGroup#RadioGroup",
          "@mui/material/Stack#Stack"
        ],
        "exclusiveChildren": [
          "@mui/material/Radio#Radio"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/FormGroup#FormGroup": {
      "id": "@mui/material/FormGroup#FormGroup",
      "name": "FormGroup",
      "props": {
        "row": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; row?: string; error?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/FormGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/FormControl#FormControl"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/FormHelperText#FormHelperText": {
      "id": "@mui/material/FormHelperText#FormHelperText",
      "name": "FormHelperText",
      "props": {
        "id": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; error?: string; disabled?: string; sizeSmall?: string; contained?: string; focused?: string; filled?: string; required?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "filled": {
          "type": "boolean"
        },
        "focused": {
          "type": "boolean"
        },
        "margin": {
          "type": "custom",
          "typeName": "\"dense\""
        },
        "required": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "outlined",
            "filled",
            "standard"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/FormHelperText",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControl#FormControl"
        ],
        "exclusiveParent": "@mui/material/FormControl#FormControl"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/FormLabel#FormLabel": {
      "id": "@mui/material/FormLabel#FormLabel",
      "name": "FormLabel",
      "props": {
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string"
        },
        "form": {
          "type": "string"
        },
        "htmlFor": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorSecondary?: string; focused?: string; disabled?: string; error?: string; filled?: string; required?: string; asterisk?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "filled": {
          "type": "boolean"
        },
        "focused": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/material/FormLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControl#FormControl"
        ],
        "exclusiveParent": "@mui/material/FormControl#FormControl"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Grid#Grid": {
      "id": "@mui/material/Grid#Grid",
      "name": "Grid",
      "props": {
        "container": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "item": {
          "type": "boolean"
        },
        "spacing": {
          "type": "custom",
          "typeName": "GridSpacing | GridSpacing[] | { [key: string]: GridSpacing; }"
        },
        "xs": {
          "type": "custom",
          "typeName": "boolean | GridSize"
        },
        "wrap": {
          "type": "string-union",
          "values": [
            "wrap",
            "nowrap",
            "wrap-reverse"
          ]
        },
        "zeroMinWidth": {
          "type": "boolean"
        },
        "columns": {
          "type": "custom",
          "typeName": "number | number[] | { [key: string]: number; }"
        },
        "sm": {
          "type": "custom",
          "typeName": "boolean | GridSize"
        },
        "direction": {
          "type": "custom",
          "typeName": "GridDirection | GridDirection[] | { [key: string]: GridDirection; }"
        },
        "md": {
          "type": "custom",
          "typeName": "boolean | GridSize"
        },
        "alignItems": {
          "type": "any"
        },
        "justifyContent": {
          "type": "any"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "rowSpacing": {
          "type": "custom",
          "typeName": "GridSpacing | GridSpacing[] | { [key: string]: GridSpacing; }"
        },
        "columnSpacing": {
          "type": "custom",
          "typeName": "GridSpacing | GridSpacing[] | { [key: string]: GridSpacing; }"
        },
        "textAlign": {
          "type": "any"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; container?: string; item?: string; zeroMinWidth?: string; 'direction-xs-column'?: string; 'direction-xs-column-reverse'?: string; 'direction-xs-row-reverse'?: string; 'wrap-xs-nowrap'?: string; 'wrap-xs-wrap-reverse'?: string; 'spacing-xs-1'?: string; 'spacing-xs-2'?: string; 'spacing-xs-3'?: string; 'spacing-xs-4'?: string; 'spacing-xs-5'?: string; 'spacing-xs-6'?: string; 'spacing-xs-7'?: string; 'spacing-xs-8'?: string; 'spacing-xs-9'?: string; 'spacing-xs-10'?: string; 'grid-xs-auto'?: string; 'grid-xs-true'?: string; 'grid-xs-1'?: string; 'grid-xs-2'?: string; 'grid-xs-3'?: string; 'grid-xs-4'?: string; 'grid-xs-5'?: string; 'grid-xs-6'?: string; 'grid-xs-7'?: string; 'grid-xs-8'?: string; 'grid-xs-9'?: string; 'grid-xs-10'?: string; 'grid-xs-11'?: string; 'grid-xs-12'?: string; }"
        },
        "p": {
          "type": "any"
        },
        "color": {
          "type": "any"
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any"
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "columnGap": {
          "type": "any"
        },
        "display": {
          "type": "any"
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any"
        },
        "flexShrink": {
          "type": "any"
        },
        "flexWrap": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any"
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any"
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "height": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any"
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any"
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "width": {
          "type": "any"
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "gap": {
          "type": "any"
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any"
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any"
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "lg": {
          "type": "custom",
          "typeName": "boolean | GridSize"
        },
        "xl": {
          "type": "custom",
          "typeName": "boolean | GridSize"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Grid",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Autocomplete#Autocomplete",
          "@mui/material/Grid#Grid",
          "@mui/material#Box",
          "@mui/material/Paper#Paper",
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider"
        ],
        "exclusiveChildren": [
          "@mui/material/ButtonBase#ButtonBase",
          "@mui/icons-material/DeleteForever#DeleteForeverIcon",
          "@mui/icons-material/DeleteOutlined#DeleteOutlinedIcon",
          "@mui/icons-material/DeleteForeverOutlined#DeleteForeverOutlinedIcon",
          "@mui/icons-material/DeleteRounded#DeleteRoundedIcon",
          "@mui/icons-material/DeleteForeverRounded#DeleteForeverRoundedIcon",
          "@mui/icons-material/DeleteTwoTone#DeleteTwoToneIcon",
          "@mui/icons-material/DeleteForeverTwoTone#DeleteForeverTwoToneIcon",
          "@mui/icons-material/DeleteSharp#DeleteSharpIcon",
          "@mui/icons-material/DeleteForeverSharp#DeleteForeverSharpIcon",
          "@mui/icons-material/ThreeDRotation#ThreeDRotationIcon",
          "@mui/icons-material/FourK#FourKIcon",
          "@mui/icons-material/ThreeSixty#ThreeSixtyIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Grow#Grow": {
      "id": "@mui/material/Grow#Grow",
      "name": "Grow",
      "props": {
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "in": {
          "type": "boolean"
        },
        "appear": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "easing": {
          "type": "custom",
          "typeName": "string | { enter?: string; exit?: string; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "((instance: unknown) => void) | RefObject<unknown>"
        },
        "timeout": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; } | \"auto\""
        },
        "className": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "mountOnEnter": {
          "type": "boolean"
        },
        "unmountOnExit": {
          "type": "boolean"
        },
        "addEndListener": {
          "type": "custom",
          "typeName": "{ implicit: (node: HTMLElement, done: () => void) => void; explicit: (done: () => void) => void; }[RefElement extends undefined ? \"implicit\" : \"explicit\"]"
        },
        "enter": {
          "type": "boolean"
        },
        "exit": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/material/Grow",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Popper#Popper",
          "@mui/material#Box"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Icon#Icon": {
      "id": "@mui/material/Icon#Icon",
      "name": "Icon",
      "props": {
        "color": {
          "type": "string-union",
          "values": [
            "disabled",
            "inherit",
            "action",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "fontSize": {
          "type": "string-union",
          "values": [
            "small",
            "inherit",
            "medium",
            "large"
          ]
        },
        "baseClassName": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorPrimary?: string; colorSecondary?: string; colorAction?: string; colorError?: string; colorDisabled?: string; fontSizeInherit?: string; fontSizeSmall?: string; fontSizeLarge?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Icon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack"
        ],
        "exclusiveParent": "@mui/material/Stack#Stack"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/IconButton#IconButton": {
      "id": "@mui/material/IconButton#IconButton",
      "name": "IconButton",
      "props": {
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default"
          ]
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "edge": {
          "type": "custom",
          "typeName": "false | \"end\" | \"start\""
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ]
        },
        "title": {
          "type": "string"
        },
        "tabIndex": {
          "type": "number"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; edgeStart?: string; edgeEnd?: string; colorInherit?: string; colorPrimary?: string; colorSecondary?: string; colorError?: string; colorInfo?: string; colorSuccess?: string; colorWarning?: string; disabled?: string; sizeSmall?: string; sizeMedium?: string; sizeLarge?: string; }"
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material/IconButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Alert#Alert",
          "@mui/material/Toolbar#Toolbar",
          "@mui/material/MenuItem#MenuItem",
          "@mui/material#Box",
          "@mui/material/Tooltip#Tooltip",
          "@mui/material/Stack#Stack",
          "@mui/material/CardHeader#CardHeader",
          "@mui/material#CardActions",
          "@mui/material/ImageListItemBar#ImageListItemBar",
          "@mui/material/ListItem#ListItem",
          "@mui/material/ListItemSecondaryAction#ListItemSecondaryAction",
          "@mui/material/TableCell#TableCell",
          "@mui/material/Paper#Paper",
          "@mui/material/InputAdornment#InputAdornment",
          "@mui/material/Grid#Grid",
          "@mui/x-tree-view/TreeItem2#TreeItem2Label"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Close#CloseIcon",
          "@mui/icons-material/Menu#MenuIcon",
          "@mui/icons-material/Search#SearchIcon",
          "@mui/icons-material/MoreVert#MoreIcon",
          "@mui/icons-material/Fingerprint#Fingerprint",
          "@mui/icons-material/Alarm#AlarmIcon",
          "@mui/icons-material/AddShoppingCart#AddShoppingCartIcon",
          "@mui/icons-material/SkipNext#SkipNextIcon",
          "@mui/icons-material/SkipPrevious#SkipPreviousIcon",
          "@mui/icons-material/PlayArrow#PlayArrowIcon",
          "@mui/icons-material/MoreVert#MoreVertIcon",
          "@mui/icons-material/Share#ShareIcon",
          "@mui/icons-material/ChevronRight#ChevronRightIcon",
          "@mui/icons-material/ChevronLeft#ChevronLeftIcon",
          "@mui/icons-material/StarBorder#StarBorderIcon",
          "@mui/icons-material/Info#InfoIcon",
          "@mui/icons-material/Comment#CommentIcon",
          "@mui/icons-material/ArrowRight#ArrowRight",
          "@mui/icons-material/FastRewindRounded#FastRewindRounded",
          "@mui/icons-material/PlayArrowRounded#PlayArrowRounded",
          "@mui/icons-material/PauseRounded#PauseRounded",
          "@mui/icons-material/FastForwardRounded#FastForwardRounded",
          "@mui/icons-material/LastPage#LastPageIcon",
          "@mui/icons-material/FirstPage#FirstPageIcon",
          "@mui/icons-material/FilterList#FilterListIcon",
          "@mui/icons-material/Directions#DirectionsIcon",
          "@mui/icons-material/VisibilityOff#VisibilityOff",
          "@mui/icons-material/Visibility#Visibility",
          "@mui/icons-material/KeyboardDoubleArrowLeft#KeyboardDoubleArrowLeftIcon",
          "@mui/icons-material/ChevronLeft#ChevronLeft",
          "@mui/icons-material/ChevronRight#ChevronRight",
          "@mui/icons-material/KeyboardDoubleArrowRight#KeyboardDoubleArrowRightIcon",
          "@mui/icons-material/CloseRounded#CloseRoundedIcon",
          "@mui/icons-material/EditOutlined#EditOutlinedIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ImageList#ImageList": {
      "id": "@mui/material/ImageList#ImageList",
      "name": "ImageList",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "rowHeight": {
          "type": "custom",
          "typeName": "number | \"auto\""
        },
        "gap": {
          "type": "number"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "standard",
            "masonry",
            "quilted",
            "woven"
          ]
        },
        "cols": {
          "type": "number"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; masonry?: string; quilted?: string; standard?: string; woven?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/ImageList",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box",
        "exclusiveChildren": [
          "@mui/material/ImageListItem#ImageListItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ImageListItem#ImageListItem": {
      "id": "@mui/material/ImageListItem#ImageListItem",
      "name": "ImageListItem",
      "props": {
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "cols": {
          "type": "number"
        },
        "rows": {
          "type": "number"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; img?: string; standard?: string; woven?: string; masonry?: string; quilted?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material/ImageListItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ImageList#ImageList"
        ],
        "exclusiveParent": "@mui/material/ImageList#ImageList",
        "exclusiveChildren": [
          "@mui/material/ImageListItemBar#ImageListItemBar"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ImageListItemBar#ImageListItemBar": {
      "id": "@mui/material/ImageListItemBar#ImageListItemBar",
      "name": "ImageListItemBar",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "title": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "position": {
          "type": "string-union",
          "values": [
            "bottom",
            "top",
            "below"
          ]
        },
        "actionIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "actionPosition": {
          "type": "string-union",
          "values": [
            "left",
            "right"
          ]
        },
        "subtitle": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; positionBottom?: string; positionTop?: string; positionBelow?: string; titleWrap?: string; titleWrapBelow?: string; titleWrapActionPosLeft?: string; titleWrapActionPosRight?: string; title?: string; subtitle?: string; actionIcon?: string; actionIconActionPosLeft?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "slot": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/ImageListItemBar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ImageListItem#ImageListItem"
        ],
        "exclusiveParent": "@mui/material/ImageListItem#ImageListItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Input#Input": {
      "id": "@mui/material/Input#Input",
      "name": "Input",
      "props": {
        "id": {
          "type": "string"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "unknown"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "name": {
          "type": "string"
        },
        "inputComponent": {
          "type": "custom",
          "typeName": "\"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"data\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"figcaption\" | \"figure\" | \"footer\" | \"head\" | \"header\" | \"hgroup\" | \"i\" | \"input\" | \"kbd\" | \"keygen\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"textarea\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<InputBaseComponentProps>"
        },
        "endAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "type": {
          "type": "string"
        },
        "startAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "placeholder": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; formControl?: string; focused?: string; disabled?: string; colorSecondary?: string; underline?: string; error?: string; sizeSmall?: string; multiline?: string; fullWidth?: string; input?: string; inputSizeSmall?: string; inputMultiline?: string; inputAdornedStart?: string; inputAdornedEnd?: string; inputTypeSearch?: string; }"
        },
        "disableUnderline": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense"
          ]
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "autoComplete": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "rows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "disableInjectingGlobalStyles": {
          "type": "boolean"
        },
        "multiline": {
          "type": "boolean"
        },
        "renderSuffix": {
          "type": "custom",
          "typeName": "(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode"
        },
        "maxRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "minRows": {
          "type": "custom",
          "typeName": "string | number"
        }
      },
      "export": {
        "path": "@mui/material/Input",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControl#FormControl",
          "@mui/material#Box"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/InputAdornment#InputAdornment": {
      "id": "@mui/material/InputAdornment#InputAdornment",
      "name": "InputAdornment",
      "props": {
        "position": {
          "type": "string-union",
          "values": [
            "end",
            "start"
          ]
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; filled?: string; outlined?: string; standard?: string; positionStart?: string; positionEnd?: string; disablePointerEvents?: string; hiddenLabel?: string; sizeSmall?: string; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disablePointerEvents": {
          "type": "boolean"
        },
        "disableTypography": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "outlined",
            "filled",
            "standard"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/InputAdornment",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/TextField#TextField",
          "@mui/material/OutlinedInput#OutlinedInput",
          "@mui/material/FilledInput#FilledInput",
          "@mui/material/Input#Input"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/InputBase#InputBase": {
      "id": "@mui/material/InputBase#InputBase",
      "name": "InputBase",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "placeholder": {
          "type": "string"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "multiline": {
          "type": "boolean"
        },
        "rows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "autoComplete": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; formControl?: string; focused?: string; disabled?: string; adornedStart?: string; adornedEnd?: string; error?: string; sizeSmall?: string; multiline?: string; colorSecondary?: string; fullWidth?: string; hiddenLabel?: string; readOnly?: string; input?: string; inputSizeSmall?: string; inputMultiline?: string; inputTypeSearch?: string; inputAdornedStart?: string; inputAdornedEnd?: string; inputHiddenLabel?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "unknown"
        },
        "disabled": {
          "type": "boolean"
        },
        "disableInjectingGlobalStyles": {
          "type": "boolean"
        },
        "endAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "error": {
          "type": "boolean"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "inputComponent": {
          "type": "custom",
          "typeName": "\"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"data\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"figcaption\" | \"figure\" | \"footer\" | \"head\" | \"header\" | \"hgroup\" | \"i\" | \"input\" | \"kbd\" | \"keygen\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"textarea\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<InputBaseComponentProps>"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense"
          ]
        },
        "name": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "renderSuffix": {
          "type": "custom",
          "typeName": "(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode"
        },
        "maxRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "minRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "startAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "type": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/InputBase",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Paper#Paper"
        ],
        "exclusiveParent": "@mui/material/Paper#Paper"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/InputLabel#InputLabel": {
      "id": "@mui/material/InputLabel#InputLabel",
      "name": "InputLabel",
      "props": {
        "htmlFor": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "shrink": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "outlined",
            "filled",
            "standard"
          ]
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; focused?: string; disabled?: string; error?: string; required?: string; asterisk?: string; formControl?: string; sizeSmall?: string; shrink?: string; animated?: string; filled?: string; outlined?: string; standard?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "disableAnimation": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "focused": {
          "type": "boolean"
        },
        "margin": {
          "type": "custom",
          "typeName": "\"dense\""
        },
        "required": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "normal"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "filled": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/InputLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControl#FormControl"
        ],
        "exclusiveParent": "@mui/material/FormControl#FormControl"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/LinearProgress#LinearProgress": {
      "id": "@mui/material/LinearProgress#LinearProgress",
      "name": "LinearProgress",
      "props": {
        "variant": {
          "type": "string-union",
          "values": [
            "indeterminate",
            "determinate",
            "buffer",
            "query"
          ]
        },
        "value": {
          "type": "number"
        },
        "valueBuffer": {
          "type": "number"
        },
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorPrimary?: string; colorSecondary?: string; determinate?: string; indeterminate?: string; buffer?: string; query?: string; dashed?: string; dashedColorPrimary?: string; dashedColorSecondary?: string; bar?: string; barColorPrimary?: string; barColorSecondary?: string; bar1Indeterminate?: string; bar1Determinate?: string; bar1Buffer?: string; bar2Indeterminate?: string; bar2Buffer?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/LinearProgress",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Link#Link": {
      "id": "@mui/material/Link#Link",
      "name": "Link",
      "props": {
        "underline": {
          "type": "string-union",
          "values": [
            "none",
            "hover",
            "always"
          ]
        },
        "color": {
          "type": "custom",
          "typeName": "ResponsiveStyleValue<readonly string[] | Color> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | Color>)"
        },
        "href": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string-union",
          "values": [
            "button",
            "caption",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "inherit",
            "subtitle1",
            "subtitle2",
            "body1",
            "body2",
            "overline"
          ]
        },
        "tabIndex": {
          "type": "number"
        },
        "target": {
          "type": "custom",
          "typeName": "(string & {}) | \"_self\" | \"_blank\" | \"_parent\" | \"_top\""
        },
        "type": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; underlineNone?: string; underlineHover?: string; underlineAlways?: string; button?: string; focusVisible?: string; }"
        },
        "TypographyClasses": {
          "type": "custom",
          "typeName": "{ root?: string; body2?: string; body1?: string; caption?: string; button?: string; h1?: string; h2?: string; h3?: string; h4?: string; h5?: string; h6?: string; subtitle1?: string; subtitle2?: string; overline?: string; inherit?: string; alignLeft?: string; alignCenter?: string; alignRight?: string; alignJustify?: string; noWrap?: string; gutterBottom?: string; paragraph?: string; }"
        },
        "p": {
          "type": "any"
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any"
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignItems": {
          "type": "any"
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "columnGap": {
          "type": "any"
        },
        "display": {
          "type": "any"
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any"
        },
        "flexShrink": {
          "type": "any"
        },
        "flexWrap": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any"
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any"
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "height": {
          "type": "any"
        },
        "justifyContent": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any"
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textAlign": {
          "type": "any"
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any"
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "width": {
          "type": "any"
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "gap": {
          "type": "any"
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any"
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any"
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right",
            "inherit",
            "justify"
          ]
        },
        "gutterBottom": {
          "type": "boolean"
        },
        "noWrap": {
          "type": "boolean"
        },
        "paragraph": {
          "type": "boolean"
        },
        "variantMapping": {
          "type": "custom",
          "typeName": "{ button?: string; caption?: string; h1?: string; h2?: string; h3?: string; h4?: string; h5?: string; h6?: string; inherit?: string; subtitle1?: string; subtitle2?: string; body1?: string; body2?: string; overline?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "download": {
          "type": "any"
        },
        "hrefLang": {
          "type": "string"
        },
        "media": {
          "type": "string"
        },
        "ping": {
          "type": "string"
        },
        "referrerPolicy": {
          "type": "string-union",
          "values": [
            "",
            "origin",
            "no-referrer",
            "no-referrer-when-downgrade",
            "origin-when-cross-origin",
            "same-origin",
            "strict-origin",
            "strict-origin-when-cross-origin",
            "unsafe-url"
          ]
        }
      },
      "export": {
        "path": "@mui/material/Link",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Breadcrumbs#Breadcrumbs",
          "@mui/material#Box",
          "@mui/material#Typography"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Whatshot#WhatshotIcon",
          "@mui/icons-material/KeyboardArrowRightRounded#KeyboardArrowRightRounded"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/List#List": {
      "id": "@mui/material/List#List",
      "name": "List",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disablePadding": {
          "type": "boolean"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "dense": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "subheader": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; padding?: string; dense?: string; subheader?: string; }"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/List",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Paper#Paper",
          "@mui/material#Box",
          "@mui/material/Collapse#Collapse",
          "@mui/material/Dialog#Dialog",
          "@mui/material/Drawer#Drawer",
          "@mui/material/Card#Card"
        ],
        "exclusiveChildren": [
          "@mui/material/ListItem#ListItem",
          "react-transition-group#TransitionGroup"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ListItem#ListItem": {
      "id": "@mui/material/ListItem#ListItem",
      "name": "ListItem",
      "props": {
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "disablePadding": {
          "type": "boolean"
        },
        "disableGutters": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "alignItems": {
          "type": "string-union",
          "values": [
            "center",
            "flex-start"
          ]
        },
        "secondaryAction": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "button": {
          "type": "custom",
          "typeName": "false"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; container?: string; focusVisible?: string; dense?: string; alignItemsFlexStart?: string; disabled?: string; divider?: string; gutters?: string; padding?: string; button?: string; secondaryAction?: string; selected?: string; }"
        },
        "ContainerComponent": {
          "type": "custom",
          "typeName": "\"object\" | \"div\" | \"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"embed\" | \"figcaption\" | \"figure\" | \"footer\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"kbd\" | \"keygen\" | \"legend\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"p\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"tbody\" | \"td\" | \"tfoot\" | \"th\" | \"thead\" | \"tr\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<HTMLAttributes<HTMLDivElement>>"
        },
        "ContainerProps": {
          "type": "custom",
          "typeName": "HTMLAttributes<HTMLDivElement>"
        },
        "dense": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "divider": {
          "type": "boolean"
        },
        "selected": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material/ListItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/List#List"
        ],
        "exclusiveParent": "@mui/material/List#List",
        "exclusiveChildren": [
          "@mui/material/ListItemSecondaryAction#ListItemSecondaryAction"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ListItemAvatar#ListItemAvatar": {
      "id": "@mui/material/ListItemAvatar#ListItemAvatar",
      "name": "ListItemAvatar",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; alignItemsFlexStart?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/ListItemAvatar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ListItemButton#ListItemButton",
          "@mui/material/ListItem#ListItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ListItemButton#ListItemButton": {
      "id": "@mui/material/ListItemButton#ListItemButton",
      "name": "ListItemButton",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "to": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "divider": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "dense": {
          "type": "boolean"
        },
        "alignItems": {
          "type": "string-union",
          "values": [
            "center",
            "flex-start"
          ]
        },
        "selected": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; focusVisible?: string; dense?: string; alignItemsFlexStart?: string; disabled?: string; divider?: string; gutters?: string; selected?: string; }"
        },
        "disableGutters": {
          "type": "boolean"
        },
        "tabIndex": {
          "type": "number"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/ListItemButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ListItem#ListItem",
          "@mui/material/List#List",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/ExpandLess#ExpandLess",
          "@mui/icons-material/ExpandMore#ExpandMore",
          "@mui/icons-material/KeyboardArrowDown#KeyboardArrowDown"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ListItemIcon#ListItemIcon": {
      "id": "@mui/material/ListItemIcon#ListItemIcon",
      "name": "ListItemIcon",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; alignItemsFlexStart?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/ListItemIcon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ListItemButton#ListItemButton",
          "@mui/material/ListItem#ListItem",
          "@mui/material/MenuItem#MenuItem"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/MoveToInbox#InboxIcon",
          "@mui/icons-material/Inbox#InboxIcon",
          "@mui/icons-material/Drafts#DraftsIcon",
          "@mui/icons-material/Home#Home",
          "@mui/icons-material/StarBorder#StarBorder",
          "@mui/icons-material/Wifi#WifiIcon",
          "@mui/icons-material/Bluetooth#BluetoothIcon",
          "@mui/icons-material/PersonAdd#PersonAdd",
          "@mui/icons-material/Logout#Logout",
          "@mui/icons-material/Check#Check",
          "@mui/icons-material/ContentCut#ContentCut",
          "@mui/icons-material/ContentCopy#ContentCopy",
          "@mui/icons-material/ContentPaste#ContentPaste",
          "@mui/icons-material/Cloud#Cloud",
          "@mui/icons-material/SettingsApplications#SettingsApplicationsIcon",
          "@mui/icons-material/FilterAlt#IconFilter"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ListItemSecondaryAction#ListItemSecondaryAction": {
      "id": "@mui/material/ListItemSecondaryAction#ListItemSecondaryAction",
      "name": "ListItemSecondaryAction",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; disableGutters?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/ListItemSecondaryAction",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ListItem#ListItem"
        ],
        "exclusiveParent": "@mui/material/ListItem#ListItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ListItemText#ListItemText": {
      "id": "@mui/material/ListItemText#ListItemText",
      "name": "ListItemText",
      "props": {
        "primary": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "secondary": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "id": {
          "type": "string"
        },
        "primaryTypographyProps": {
          "type": "custom",
          "typeName": "{ component?: PrimaryTypographyComponent; } & TypographyOwnProps & CommonProps & DistributiveOmit<ComponentPropsWithRef<PrimaryTypographyComponent>, \"className\" | \"style\" | \"classes\" | \"children\" | \"sx\" | \"variant\" | \"p\" | \"color\" | \"border\" | \"boxShadow\" | \"fontWeight\" | \"zIndex\" | \"alignContent\" | \"alignItems\" | \"alignSelf\" | \"bottom\" | \"boxSizing\" | \"columnGap\" | \"display\" | \"flexBasis\" | \"flexDirection\" | \"flexGrow\" | \"flexShrink\" | \"flexWrap\" | \"fontFamily\" | \"fontSize\" | \"fontStyle\" | \"gridAutoColumns\" | \"gridAutoFlow\" | \"gridAutoRows\" | \"gridTemplateAreas\" | \"gridTemplateColumns\" | \"gridTemplateRows\" | \"height\" | \"justifyContent\" | \"justifyItems\" | \"justifySelf\" | \"left\" | \"letterSpacing\" | \"lineHeight\" | \"marginBlockEnd\" | \"marginBlockStart\" | \"marginBottom\" | \"marginInlineEnd\" | \"marginInlineStart\" | \"marginLeft\" | \"marginRight\" | \"marginTop\" | \"maxHeight\" | \"maxWidth\" | \"minHeight\" | \"minWidth\" | \"order\" | \"paddingBlockEnd\" | \"paddingBlockStart\" | \"paddingBottom\" | \"paddingInlineEnd\" | \"paddingInlineStart\" | \"paddingLeft\" | \"paddingRight\" | \"paddingTop\" | \"position\" | \"right\" | \"rowGap\" | \"textAlign\" | \"textOverflow\" | \"textTransform\" | \"top\" | \"visibility\" | \"whiteSpace\" | \"width\" | \"borderBottom\" | \"borderColor\" | \"borderLeft\" | \"borderRadius\" | \"borderRight\" | \"borderTop\" | \"flex\" | \"gap\" | \"gridArea\" | \"gridColumn\" | \"gridRow\" | \"margin\" | \"marginBlock\" | \"marginInline\" | \"overflow\" | \"padding\" | \"paddingBlock\" | \"paddingInline\" | \"bgcolor\" | \"m\" | \"mt\" | \"mr\" | \"mb\" | \"ml\" | \"mx\" | \"marginX\" | \"my\" | \"marginY\" | \"pt\" | \"pr\" | \"pb\" | \"pl\" | \"px\" | \"paddingX\" | \"py\" | \"paddingY\" | \"typography\" | \"displayPrint\" | \"component\" | \"align\" | \"gutterBottom\" | \"noWrap\" | \"paragraph\" | \"variantMapping\"> & { component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "secondaryTypographyProps": {
          "type": "custom",
          "typeName": "{ component?: SecondaryTypographyComponent; } & TypographyOwnProps & CommonProps & DistributiveOmit<ComponentPropsWithRef<SecondaryTypographyComponent>, \"className\" | \"style\" | \"classes\" | \"children\" | \"sx\" | \"variant\" | \"p\" | \"color\" | \"border\" | \"boxShadow\" | \"fontWeight\" | \"zIndex\" | \"alignContent\" | \"alignItems\" | \"alignSelf\" | \"bottom\" | \"boxSizing\" | \"columnGap\" | \"display\" | \"flexBasis\" | \"flexDirection\" | \"flexGrow\" | \"flexShrink\" | \"flexWrap\" | \"fontFamily\" | \"fontSize\" | \"fontStyle\" | \"gridAutoColumns\" | \"gridAutoFlow\" | \"gridAutoRows\" | \"gridTemplateAreas\" | \"gridTemplateColumns\" | \"gridTemplateRows\" | \"height\" | \"justifyContent\" | \"justifyItems\" | \"justifySelf\" | \"left\" | \"letterSpacing\" | \"lineHeight\" | \"marginBlockEnd\" | \"marginBlockStart\" | \"marginBottom\" | \"marginInlineEnd\" | \"marginInlineStart\" | \"marginLeft\" | \"marginRight\" | \"marginTop\" | \"maxHeight\" | \"maxWidth\" | \"minHeight\" | \"minWidth\" | \"order\" | \"paddingBlockEnd\" | \"paddingBlockStart\" | \"paddingBottom\" | \"paddingInlineEnd\" | \"paddingInlineStart\" | \"paddingLeft\" | \"paddingRight\" | \"paddingTop\" | \"position\" | \"right\" | \"rowGap\" | \"textAlign\" | \"textOverflow\" | \"textTransform\" | \"top\" | \"visibility\" | \"whiteSpace\" | \"width\" | \"borderBottom\" | \"borderColor\" | \"borderLeft\" | \"borderRadius\" | \"borderRight\" | \"borderTop\" | \"flex\" | \"gap\" | \"gridArea\" | \"gridColumn\" | \"gridRow\" | \"margin\" | \"marginBlock\" | \"marginInline\" | \"overflow\" | \"padding\" | \"paddingBlock\" | \"paddingInline\" | \"bgcolor\" | \"m\" | \"mt\" | \"mr\" | \"mb\" | \"ml\" | \"mx\" | \"marginX\" | \"my\" | \"marginY\" | \"pt\" | \"pr\" | \"pb\" | \"pl\" | \"px\" | \"paddingX\" | \"py\" | \"paddingY\" | \"typography\" | \"displayPrint\" | \"component\" | \"align\" | \"gutterBottom\" | \"noWrap\" | \"paragraph\" | \"variantMapping\"> & { component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "inset": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; multiline?: string; dense?: string; inset?: string; primary?: string; secondary?: string; }"
        },
        "disableTypography": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/ListItemText",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ListItemButton#ListItemButton",
          "@mui/material/ListItem#ListItem",
          "@mui/material/MenuItem#MenuItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ListSubheader#ListSubheader": {
      "id": "@mui/material/ListSubheader#ListSubheader",
      "name": "ListSubheader",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "id": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorPrimary?: string; colorInherit?: string; gutters?: string; inset?: string; sticky?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "inherit",
            "primary",
            "default"
          ]
        },
        "disableGutters": {
          "type": "boolean"
        },
        "disableSticky": {
          "type": "boolean"
        },
        "inset": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material/ListSubheader",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ImageListItem#ImageListItem",
          "@mui/material/List#List",
          "@mui/material/Select#Select"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Menu#Menu": {
      "id": "@mui/material/Menu#Menu",
      "name": "Menu",
      "props": {
        "id": {
          "type": "string"
        },
        "anchorEl": {
          "type": "custom",
          "typeName": "Element | (() => Element) | PopoverVirtualElement | (() => PopoverVirtualElement)"
        },
        "anchorOrigin": {
          "type": "custom",
          "typeName": "PopoverOrigin"
        },
        "keepMounted": {
          "type": "boolean"
        },
        "transformOrigin": {
          "type": "custom",
          "typeName": "PopoverOrigin"
        },
        "open": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "PaperProps": {
          "type": "custom",
          "typeName": "{ [x: string]: any; [x: number]: any; [x: symbol]: any; children?: ReactNode; classes?: Partial<PaperClasses> & Partial<ClassNameMap<never>>; elevation?: number; square?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"elevation\" | \"outlined\", PaperPropsVariantOverrides>; className?: string; style?: CSSProperties; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "MenuListProps": {
          "type": "custom",
          "typeName": "{ autoFocus?: boolean; autoFocusItem?: boolean; children?: ReactNode; disabledItemsFocusable?: boolean; disableListWrap?: boolean; variant?: \"menu\" | \"selectedMenu\"; classes?: Partial<ListClasses> & Partial<ClassNameMap<never>>; dense?: boolean; disablePadding?: boolean; subheader?: ReactNode; sx?: SxProps<Theme>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLUListElement>; ref?: Ref<HTMLUListElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLUListElement>; onCopyCapture?: ClipboardEventHandler<HTMLUListElement>; onCut?: ClipboardEventHandler<HTMLUListElement>; onCutCapture?: ClipboardEventHandler<HTMLUListElement>; onPaste?: ClipboardEventHandler<HTMLUListElement>; onPasteCapture?: ClipboardEventHandler<HTMLUListElement>; onCompositionEnd?: CompositionEventHandler<HTMLUListElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLUListElement>; onCompositionStart?: CompositionEventHandler<HTMLUListElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLUListElement>; onCompositionUpdate?: CompositionEventHandler<HTMLUListElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLUListElement>; onFocus?: FocusEventHandler<HTMLUListElement>; onFocusCapture?: FocusEventHandler<HTMLUListElement>; onBlur?: FocusEventHandler<HTMLUListElement>; onBlurCapture?: FocusEventHandler<HTMLUListElement>; onChangeCapture?: FormEventHandler<HTMLUListElement>; onBeforeInput?: FormEventHandler<HTMLUListElement>; onBeforeInputCapture?: FormEventHandler<HTMLUListElement>; onInput?: FormEventHandler<HTMLUListElement>; onInputCapture?: FormEventHandler<HTMLUListElement>; onReset?: FormEventHandler<HTMLUListElement>; onResetCapture?: FormEventHandler<HTMLUListElement>; onSubmit?: FormEventHandler<HTMLUListElement>; onSubmitCapture?: FormEventHandler<HTMLUListElement>; onInvalid?: FormEventHandler<HTMLUListElement>; onInvalidCapture?: FormEventHandler<HTMLUListElement>; onLoad?: ReactEventHandler<HTMLUListElement>; onLoadCapture?: ReactEventHandler<HTMLUListElement>; onError?: ReactEventHandler<HTMLUListElement>; onErrorCapture?: ReactEventHandler<HTMLUListElement>; onKeyDown?: KeyboardEventHandler<HTMLUListElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLUListElement>; onKeyPress?: KeyboardEventHandler<HTMLUListElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLUListElement>; onKeyUp?: KeyboardEventHandler<HTMLUListElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLUListElement>; onAbort?: ReactEventHandler<HTMLUListElement>; onAbortCapture?: ReactEventHandler<HTMLUListElement>; onCanPlay?: ReactEventHandler<HTMLUListElement>; onCanPlayCapture?: ReactEventHandler<HTMLUListElement>; onCanPlayThrough?: ReactEventHandler<HTMLUListElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLUListElement>; onDurationChange?: ReactEventHandler<HTMLUListElement>; onDurationChangeCapture?: ReactEventHandler<HTMLUListElement>; onEmptied?: ReactEventHandler<HTMLUListElement>; onEmptiedCapture?: ReactEventHandler<HTMLUListElement>; onEncrypted?: ReactEventHandler<HTMLUListElement>; onEncryptedCapture?: ReactEventHandler<HTMLUListElement>; onEnded?: ReactEventHandler<HTMLUListElement>; onEndedCapture?: ReactEventHandler<HTMLUListElement>; onLoadedData?: ReactEventHandler<HTMLUListElement>; onLoadedDataCapture?: ReactEventHandler<HTMLUListElement>; onLoadedMetadata?: ReactEventHandler<HTMLUListElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLUListElement>; onLoadStart?: ReactEventHandler<HTMLUListElement>; onLoadStartCapture?: ReactEventHandler<HTMLUListElement>; onPause?: ReactEventHandler<HTMLUListElement>; onPauseCapture?: ReactEventHandler<HTMLUListElement>; onPlay?: ReactEventHandler<HTMLUListElement>; onPlayCapture?: ReactEventHandler<HTMLUListElement>; onPlaying?: ReactEventHandler<HTMLUListElement>; onPlayingCapture?: ReactEventHandler<HTMLUListElement>; onProgress?: ReactEventHandler<HTMLUListElement>; onProgressCapture?: ReactEventHandler<HTMLUListElement>; onRateChange?: ReactEventHandler<HTMLUListElement>; onRateChangeCapture?: ReactEventHandler<HTMLUListElement>; onResize?: ReactEventHandler<HTMLUListElement>; onResizeCapture?: ReactEventHandler<HTMLUListElement>; onSeeked?: ReactEventHandler<HTMLUListElement>; onSeekedCapture?: ReactEventHandler<HTMLUListElement>; onSeeking?: ReactEventHandler<HTMLUListElement>; onSeekingCapture?: ReactEventHandler<HTMLUListElement>; onStalled?: ReactEventHandler<HTMLUListElement>; onStalledCapture?: ReactEventHandler<HTMLUListElement>; onSuspend?: ReactEventHandler<HTMLUListElement>; onSuspendCapture?: ReactEventHandler<HTMLUListElement>; onTimeUpdate?: ReactEventHandler<HTMLUListElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLUListElement>; onVolumeChange?: ReactEventHandler<HTMLUListElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLUListElement>; onWaiting?: ReactEventHandler<HTMLUListElement>; onWaitingCapture?: ReactEventHandler<HTMLUListElement>; onAuxClick?: MouseEventHandler<HTMLUListElement>; onAuxClickCapture?: MouseEventHandler<HTMLUListElement>; onClick?: MouseEventHandler<HTMLUListElement>; onClickCapture?: MouseEventHandler<HTMLUListElement>; onContextMenu?: MouseEventHandler<HTMLUListElement>; onContextMenuCapture?: MouseEventHandler<HTMLUListElement>; onDoubleClick?: MouseEventHandler<HTMLUListElement>; onDoubleClickCapture?: MouseEventHandler<HTMLUListElement>; onDrag?: DragEventHandler<HTMLUListElement>; onDragCapture?: DragEventHandler<HTMLUListElement>; onDragEnd?: DragEventHandler<HTMLUListElement>; onDragEndCapture?: DragEventHandler<HTMLUListElement>; onDragEnter?: DragEventHandler<HTMLUListElement>; onDragEnterCapture?: DragEventHandler<HTMLUListElement>; onDragExit?: DragEventHandler<HTMLUListElement>; onDragExitCapture?: DragEventHandler<HTMLUListElement>; onDragLeave?: DragEventHandler<HTMLUListElement>; onDragLeaveCapture?: DragEventHandler<HTMLUListElement>; onDragOver?: DragEventHandler<HTMLUListElement>; onDragOverCapture?: DragEventHandler<HTMLUListElement>; onDragStart?: DragEventHandler<HTMLUListElement>; onDragStartCapture?: DragEventHandler<HTMLUListElement>; onDrop?: DragEventHandler<HTMLUListElement>; onDropCapture?: DragEventHandler<HTMLUListElement>; onMouseDown?: MouseEventHandler<HTMLUListElement>; onMouseDownCapture?: MouseEventHandler<HTMLUListElement>; onMouseEnter?: MouseEventHandler<HTMLUListElement>; onMouseLeave?: MouseEventHandler<HTMLUListElement>; onMouseMove?: MouseEventHandler<HTMLUListElement>; onMouseMoveCapture?: MouseEventHandler<HTMLUListElement>; onMouseOut?: MouseEventHandler<HTMLUListElement>; onMouseOutCapture?: MouseEventHandler<HTMLUListElement>; onMouseOver?: MouseEventHandler<HTMLUListElement>; onMouseOverCapture?: MouseEventHandler<HTMLUListElement>; onMouseUp?: MouseEventHandler<HTMLUListElement>; onMouseUpCapture?: MouseEventHandler<HTMLUListElement>; onSelect?: ReactEventHandler<HTMLUListElement>; onSelectCapture?: ReactEventHandler<HTMLUListElement>; onTouchCancel?: TouchEventHandler<HTMLUListElement>; onTouchCancelCapture?: TouchEventHandler<HTMLUListElement>; onTouchEnd?: TouchEventHandler<HTMLUListElement>; onTouchEndCapture?: TouchEventHandler<HTMLUListElement>; onTouchMove?: TouchEventHandler<HTMLUListElement>; onTouchMoveCapture?: TouchEventHandler<HTMLUListElement>; onTouchStart?: TouchEventHandler<HTMLUListElement>; onTouchStartCapture?: TouchEventHandler<HTMLUListElement>; onPointerDown?: PointerEventHandler<HTMLUListElement>; onPointerDownCapture?: PointerEventHandler<HTMLUListElement>; onPointerMove?: PointerEventHandler<HTMLUListElement>; onPointerMoveCapture?: PointerEventHandler<HTMLUListElement>; onPointerUp?: PointerEventHandler<HTMLUListElement>; onPointerUpCapture?: PointerEventHandler<HTMLUListElement>; onPointerCancel?: PointerEventHandler<HTMLUListElement>; onPointerCancelCapture?: PointerEventHandler<HTMLUListElement>; onPointerEnter?: PointerEventHandler<HTMLUListElement>; onPointerLeave?: PointerEventHandler<HTMLUListElement>; onPointerOver?: PointerEventHandler<HTMLUListElement>; onPointerOverCapture?: PointerEventHandler<HTMLUListElement>; onPointerOut?: PointerEventHandler<HTMLUListElement>; onPointerOutCapture?: PointerEventHandler<HTMLUListElement>; onGotPointerCapture?: PointerEventHandler<HTMLUListElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLUListElement>; onLostPointerCapture?: PointerEventHandler<HTMLUListElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLUListElement>; onScroll?: UIEventHandler<HTMLUListElement>; onScrollCapture?: UIEventHandler<HTMLUListElement>; onWheel?: WheelEventHandler<HTMLUListElement>; onWheelCapture?: WheelEventHandler<HTMLUListElement>; onAnimationStart?: AnimationEventHandler<HTMLUListElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLUListElement>; onAnimationEnd?: AnimationEventHandler<HTMLUListElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLUListElement>; onAnimationIteration?: AnimationEventHandler<HTMLUListElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLUListElement>; onTransitionEnd?: TransitionEventHandler<HTMLUListElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLUListElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "anchorReference": {
          "type": "string-union",
          "values": [
            "none",
            "anchorEl",
            "anchorPosition"
          ]
        },
        "anchorPosition": {
          "type": "custom",
          "typeName": "PopoverPosition"
        },
        "elevation": {
          "type": "number"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<OverridableComponent<ModalTypeMap<\"div\", {}>>, {}, ModalOwnerState>; paper?: SlotComponentProps<OverridableComponent<PaperTypeMap<{}, \"div\">>, {}, {}>; }"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; paper?: string; list?: string; }"
        },
        "disableAutoFocusItem": {
          "type": "boolean"
        },
        "PopoverClasses": {
          "type": "custom",
          "typeName": "{ root?: string; paper?: string; }"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; } | \"auto\""
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "menu",
            "selectedMenu"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "container": {
          "type": "custom",
          "typeName": "Element | (() => Element)"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; paper?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: PopoverActions) => void) | RefObject<PopoverActions>"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "BackdropComponent": {
          "type": "custom",
          "typeName": "ComponentType<BackdropProps>"
        },
        "BackdropProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; classes?: Partial<BackdropClasses> & Partial<ClassNameMap<never>>; invisible?: boolean; open?: boolean; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; }; sx?: SxProps<Theme>; transitionDuration?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; TransitionComponent?: JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLElement>; ref?: Ref<unknown>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; in?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; easing?: string | { enter?: string; exit?: string; }; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; appear?: boolean; enter?: boolean; exit?: boolean; key?: Key; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "closeAfterTransition": {
          "type": "boolean"
        },
        "disableAutoFocus": {
          "type": "boolean"
        },
        "disableEnforceFocus": {
          "type": "boolean"
        },
        "disableEscapeKeyDown": {
          "type": "boolean"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "disableRestoreFocus": {
          "type": "boolean"
        },
        "disableScrollLock": {
          "type": "boolean"
        },
        "hideBackdrop": {
          "type": "boolean"
        },
        "marginThreshold": {
          "type": "number"
        }
      },
      "export": {
        "path": "@mui/material/Menu",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Toolbar#Toolbar",
          "@mui/material#Box",
          "@mui/material/DialogActions#DialogActions"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/MenuItem#MenuItem": {
      "id": "@mui/material/MenuItem#MenuItem",
      "name": "MenuItem",
      "props": {
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "disabled": {
          "type": "boolean"
        },
        "selected": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "data-mui-test": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "autoFocus": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; focusVisible?: string; dense?: string; disabled?: string; divider?: string; gutters?: string; selected?: string; }"
        },
        "dense": {
          "type": "boolean"
        },
        "disableGutters": {
          "type": "boolean"
        },
        "divider": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "tabIndex": {
          "type": "number"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/MenuItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Menu#Menu",
          "@mui/material/MenuList#MenuList",
          "@mui/material/Select#Select",
          "@mui/material/TextField#TextField"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/FileCopy#FileCopyIcon",
          "@mui/icons-material/MoreHoriz#MoreHorizIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/MenuList#MenuList": {
      "id": "@mui/material/MenuList#MenuList",
      "name": "MenuList",
      "props": {
        "id": {
          "type": "string"
        },
        "autoFocusItem": {
          "type": "boolean"
        },
        "dense": {
          "type": "boolean"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disabledItemsFocusable": {
          "type": "boolean"
        },
        "disableListWrap": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "menu",
            "selectedMenu"
          ]
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; padding?: string; dense?: string; subheader?: string; }"
        },
        "disablePadding": {
          "type": "boolean"
        },
        "subheader": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/MenuList",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ClickAwayListener#ClickAwayListener",
          "@mui/material/Paper#Paper"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/MobileStepper#MobileStepper": {
      "id": "@mui/material/MobileStepper#MobileStepper",
      "name": "MobileStepper",
      "props": {
        "variant": {
          "type": "string-union",
          "values": [
            "progress",
            "text",
            "dots"
          ]
        },
        "steps": {
          "type": "number"
        },
        "position": {
          "type": "string-union",
          "values": [
            "bottom",
            "top",
            "static"
          ]
        },
        "activeStep": {
          "type": "number"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "nextButton": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "backButton": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; positionBottom?: string; positionTop?: string; positionStatic?: string; dots?: string; dot?: string; dotActive?: string; progress?: string; }"
        },
        "LinearProgressProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<LinearProgressClasses>; color?: OverridableStringUnion<\"inherit\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\", LinearProgressPropsColorOverrides>; sx?: SxProps<Theme>; value?: number; valueBuffer?: number; variant?: \"indeterminate\" | \"determinate\" | \"buffer\" | \"query\"; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLSpanElement>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLSpanElement>; onCopyCapture?: ClipboardEventHandler<HTMLSpanElement>; onCut?: ClipboardEventHandler<HTMLSpanElement>; onCutCapture?: ClipboardEventHandler<HTMLSpanElement>; onPaste?: ClipboardEventHandler<HTMLSpanElement>; onPasteCapture?: ClipboardEventHandler<HTMLSpanElement>; onCompositionEnd?: CompositionEventHandler<HTMLSpanElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLSpanElement>; onCompositionStart?: CompositionEventHandler<HTMLSpanElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLSpanElement>; onCompositionUpdate?: CompositionEventHandler<HTMLSpanElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLSpanElement>; onFocus?: FocusEventHandler<HTMLSpanElement>; onFocusCapture?: FocusEventHandler<HTMLSpanElement>; onBlur?: FocusEventHandler<HTMLSpanElement>; onBlurCapture?: FocusEventHandler<HTMLSpanElement>; onChangeCapture?: FormEventHandler<HTMLSpanElement>; onBeforeInput?: FormEventHandler<HTMLSpanElement>; onBeforeInputCapture?: FormEventHandler<HTMLSpanElement>; onInput?: FormEventHandler<HTMLSpanElement>; onInputCapture?: FormEventHandler<HTMLSpanElement>; onReset?: FormEventHandler<HTMLSpanElement>; onResetCapture?: FormEventHandler<HTMLSpanElement>; onSubmit?: FormEventHandler<HTMLSpanElement>; onSubmitCapture?: FormEventHandler<HTMLSpanElement>; onInvalid?: FormEventHandler<HTMLSpanElement>; onInvalidCapture?: FormEventHandler<HTMLSpanElement>; onLoad?: ReactEventHandler<HTMLSpanElement>; onLoadCapture?: ReactEventHandler<HTMLSpanElement>; onError?: ReactEventHandler<HTMLSpanElement>; onErrorCapture?: ReactEventHandler<HTMLSpanElement>; onKeyDown?: KeyboardEventHandler<HTMLSpanElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLSpanElement>; onKeyPress?: KeyboardEventHandler<HTMLSpanElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLSpanElement>; onKeyUp?: KeyboardEventHandler<HTMLSpanElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLSpanElement>; onAbort?: ReactEventHandler<HTMLSpanElement>; onAbortCapture?: ReactEventHandler<HTMLSpanElement>; onCanPlay?: ReactEventHandler<HTMLSpanElement>; onCanPlayCapture?: ReactEventHandler<HTMLSpanElement>; onCanPlayThrough?: ReactEventHandler<HTMLSpanElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLSpanElement>; onDurationChange?: ReactEventHandler<HTMLSpanElement>; onDurationChangeCapture?: ReactEventHandler<HTMLSpanElement>; onEmptied?: ReactEventHandler<HTMLSpanElement>; onEmptiedCapture?: ReactEventHandler<HTMLSpanElement>; onEncrypted?: ReactEventHandler<HTMLSpanElement>; onEncryptedCapture?: ReactEventHandler<HTMLSpanElement>; onEnded?: ReactEventHandler<HTMLSpanElement>; onEndedCapture?: ReactEventHandler<HTMLSpanElement>; onLoadedData?: ReactEventHandler<HTMLSpanElement>; onLoadedDataCapture?: ReactEventHandler<HTMLSpanElement>; onLoadedMetadata?: ReactEventHandler<HTMLSpanElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLSpanElement>; onLoadStart?: ReactEventHandler<HTMLSpanElement>; onLoadStartCapture?: ReactEventHandler<HTMLSpanElement>; onPause?: ReactEventHandler<HTMLSpanElement>; onPauseCapture?: ReactEventHandler<HTMLSpanElement>; onPlay?: ReactEventHandler<HTMLSpanElement>; onPlayCapture?: ReactEventHandler<HTMLSpanElement>; onPlaying?: ReactEventHandler<HTMLSpanElement>; onPlayingCapture?: ReactEventHandler<HTMLSpanElement>; onProgress?: ReactEventHandler<HTMLSpanElement>; onProgressCapture?: ReactEventHandler<HTMLSpanElement>; onRateChange?: ReactEventHandler<HTMLSpanElement>; onRateChangeCapture?: ReactEventHandler<HTMLSpanElement>; onResize?: ReactEventHandler<HTMLSpanElement>; onResizeCapture?: ReactEventHandler<HTMLSpanElement>; onSeeked?: ReactEventHandler<HTMLSpanElement>; onSeekedCapture?: ReactEventHandler<HTMLSpanElement>; onSeeking?: ReactEventHandler<HTMLSpanElement>; onSeekingCapture?: ReactEventHandler<HTMLSpanElement>; onStalled?: ReactEventHandler<HTMLSpanElement>; onStalledCapture?: ReactEventHandler<HTMLSpanElement>; onSuspend?: ReactEventHandler<HTMLSpanElement>; onSuspendCapture?: ReactEventHandler<HTMLSpanElement>; onTimeUpdate?: ReactEventHandler<HTMLSpanElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLSpanElement>; onVolumeChange?: ReactEventHandler<HTMLSpanElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLSpanElement>; onWaiting?: ReactEventHandler<HTMLSpanElement>; onWaitingCapture?: ReactEventHandler<HTMLSpanElement>; onAuxClick?: MouseEventHandler<HTMLSpanElement>; onAuxClickCapture?: MouseEventHandler<HTMLSpanElement>; onClick?: MouseEventHandler<HTMLSpanElement>; onClickCapture?: MouseEventHandler<HTMLSpanElement>; onContextMenu?: MouseEventHandler<HTMLSpanElement>; onContextMenuCapture?: MouseEventHandler<HTMLSpanElement>; onDoubleClick?: MouseEventHandler<HTMLSpanElement>; onDoubleClickCapture?: MouseEventHandler<HTMLSpanElement>; onDrag?: DragEventHandler<HTMLSpanElement>; onDragCapture?: DragEventHandler<HTMLSpanElement>; onDragEnd?: DragEventHandler<HTMLSpanElement>; onDragEndCapture?: DragEventHandler<HTMLSpanElement>; onDragEnter?: DragEventHandler<HTMLSpanElement>; onDragEnterCapture?: DragEventHandler<HTMLSpanElement>; onDragExit?: DragEventHandler<HTMLSpanElement>; onDragExitCapture?: DragEventHandler<HTMLSpanElement>; onDragLeave?: DragEventHandler<HTMLSpanElement>; onDragLeaveCapture?: DragEventHandler<HTMLSpanElement>; onDragOver?: DragEventHandler<HTMLSpanElement>; onDragOverCapture?: DragEventHandler<HTMLSpanElement>; onDragStart?: DragEventHandler<HTMLSpanElement>; onDragStartCapture?: DragEventHandler<HTMLSpanElement>; onDrop?: DragEventHandler<HTMLSpanElement>; onDropCapture?: DragEventHandler<HTMLSpanElement>; onMouseDown?: MouseEventHandler<HTMLSpanElement>; onMouseDownCapture?: MouseEventHandler<HTMLSpanElement>; onMouseEnter?: MouseEventHandler<HTMLSpanElement>; onMouseLeave?: MouseEventHandler<HTMLSpanElement>; onMouseMove?: MouseEventHandler<HTMLSpanElement>; onMouseMoveCapture?: MouseEventHandler<HTMLSpanElement>; onMouseOut?: MouseEventHandler<HTMLSpanElement>; onMouseOutCapture?: MouseEventHandler<HTMLSpanElement>; onMouseOver?: MouseEventHandler<HTMLSpanElement>; onMouseOverCapture?: MouseEventHandler<HTMLSpanElement>; onMouseUp?: MouseEventHandler<HTMLSpanElement>; onMouseUpCapture?: MouseEventHandler<HTMLSpanElement>; onSelect?: ReactEventHandler<HTMLSpanElement>; onSelectCapture?: ReactEventHandler<HTMLSpanElement>; onTouchCancel?: TouchEventHandler<HTMLSpanElement>; onTouchCancelCapture?: TouchEventHandler<HTMLSpanElement>; onTouchEnd?: TouchEventHandler<HTMLSpanElement>; onTouchEndCapture?: TouchEventHandler<HTMLSpanElement>; onTouchMove?: TouchEventHandler<HTMLSpanElement>; onTouchMoveCapture?: TouchEventHandler<HTMLSpanElement>; onTouchStart?: TouchEventHandler<HTMLSpanElement>; onTouchStartCapture?: TouchEventHandler<HTMLSpanElement>; onPointerDown?: PointerEventHandler<HTMLSpanElement>; onPointerDownCapture?: PointerEventHandler<HTMLSpanElement>; onPointerMove?: PointerEventHandler<HTMLSpanElement>; onPointerMoveCapture?: PointerEventHandler<HTMLSpanElement>; onPointerUp?: PointerEventHandler<HTMLSpanElement>; onPointerUpCapture?: PointerEventHandler<HTMLSpanElement>; onPointerCancel?: PointerEventHandler<HTMLSpanElement>; onPointerCancelCapture?: PointerEventHandler<HTMLSpanElement>; onPointerEnter?: PointerEventHandler<HTMLSpanElement>; onPointerLeave?: PointerEventHandler<HTMLSpanElement>; onPointerOver?: PointerEventHandler<HTMLSpanElement>; onPointerOverCapture?: PointerEventHandler<HTMLSpanElement>; onPointerOut?: PointerEventHandler<HTMLSpanElement>; onPointerOutCapture?: PointerEventHandler<HTMLSpanElement>; onGotPointerCapture?: PointerEventHandler<HTMLSpanElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLSpanElement>; onLostPointerCapture?: PointerEventHandler<HTMLSpanElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLSpanElement>; onScroll?: UIEventHandler<HTMLSpanElement>; onScrollCapture?: UIEventHandler<HTMLSpanElement>; onWheel?: WheelEventHandler<HTMLSpanElement>; onWheelCapture?: WheelEventHandler<HTMLSpanElement>; onAnimationStart?: AnimationEventHandler<HTMLSpanElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLSpanElement>; onAnimationEnd?: AnimationEventHandler<HTMLSpanElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLSpanElement>; onAnimationIteration?: AnimationEventHandler<HTMLSpanElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLSpanElement>; onTransitionEnd?: TransitionEventHandler<HTMLSpanElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLSpanElement>; ref?: Ref<unknown>; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "elevation": {
          "type": "number"
        },
        "square": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        }
      },
      "export": {
        "path": "@mui/material/MobileStepper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Modal#Modal": {
      "id": "@mui/material/Modal#Modal",
      "name": "Modal",
      "props": {
        "open": {
          "type": "boolean"
        },
        "keepMounted": {
          "type": "boolean"
        },
        "closeAfterTransition": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "ModalSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "BackdropComponent": {
          "type": "custom",
          "typeName": "ComponentType<BackdropProps>"
        },
        "BackdropProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; classes?: Partial<BackdropClasses> & Partial<ClassNameMap<never>>; invisible?: boolean; open?: boolean; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; }; sx?: SxProps<Theme>; transitionDuration?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; TransitionComponent?: JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLElement>; ref?: Ref<unknown>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; in?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; easing?: string | { enter?: string; exit?: string; }; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; appear?: boolean; enter?: boolean; exit?: boolean; key?: Key; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactElement<any, string | JSXElementConstructor<any>>"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; hidden?: string; backdrop?: string; }"
        },
        "className": {
          "type": "string"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "container": {
          "type": "custom",
          "typeName": "Element | (() => Element)"
        },
        "disableAutoFocus": {
          "type": "boolean"
        },
        "disableEnforceFocus": {
          "type": "boolean"
        },
        "disableEscapeKeyDown": {
          "type": "boolean"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "disableRestoreFocus": {
          "type": "boolean"
        },
        "disableScrollLock": {
          "type": "boolean"
        },
        "hideBackdrop": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Modal",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/NativeSelect#NativeSelect": {
      "id": "@mui/material/NativeSelect#NativeSelect",
      "name": "NativeSelect",
      "props": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "input": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "unknown"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "{ disabled?: boolean; IconComponent?: ElementType<any, keyof IntrinsicElements>; inputRef?: Ref<HTMLSelectElement>; variant?: \"outlined\" | \"filled\" | \"standard\"; error?: boolean; sx?: SxProps<Theme>; autoComplete?: string; form?: string; multiple?: boolean; name?: string; required?: boolean; size?: number; value?: string | number | readonly string[]; onChange?: ChangeEventHandler<HTMLSelectElement>; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; className?: string; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; slot?: string; spellCheck?: Booleanish; style?: CSSProperties; tabIndex?: number; title?: string; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; children?: ReactNode; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLSelectElement>; onCopyCapture?: ClipboardEventHandler<HTMLSelectElement>; onCut?: ClipboardEventHandler<HTMLSelectElement>; onCutCapture?: ClipboardEventHandler<HTMLSelectElement>; onPaste?: ClipboardEventHandler<HTMLSelectElement>; onPasteCapture?: ClipboardEventHandler<HTMLSelectElement>; onCompositionEnd?: CompositionEventHandler<HTMLSelectElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLSelectElement>; onCompositionStart?: CompositionEventHandler<HTMLSelectElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLSelectElement>; onCompositionUpdate?: CompositionEventHandler<HTMLSelectElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLSelectElement>; onFocus?: FocusEventHandler<HTMLSelectElement>; onFocusCapture?: FocusEventHandler<HTMLSelectElement>; onBlur?: FocusEventHandler<HTMLSelectElement>; onBlurCapture?: FocusEventHandler<HTMLSelectElement>; onChangeCapture?: FormEventHandler<HTMLSelectElement>; onBeforeInput?: FormEventHandler<HTMLSelectElement>; onBeforeInputCapture?: FormEventHandler<HTMLSelectElement>; onInput?: FormEventHandler<HTMLSelectElement>; onInputCapture?: FormEventHandler<HTMLSelectElement>; onReset?: FormEventHandler<HTMLSelectElement>; onResetCapture?: FormEventHandler<HTMLSelectElement>; onSubmit?: FormEventHandler<HTMLSelectElement>; onSubmitCapture?: FormEventHandler<HTMLSelectElement>; onInvalid?: FormEventHandler<HTMLSelectElement>; onInvalidCapture?: FormEventHandler<HTMLSelectElement>; onLoad?: ReactEventHandler<HTMLSelectElement>; onLoadCapture?: ReactEventHandler<HTMLSelectElement>; onError?: ReactEventHandler<HTMLSelectElement>; onErrorCapture?: ReactEventHandler<HTMLSelectElement>; onKeyDown?: KeyboardEventHandler<HTMLSelectElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLSelectElement>; onKeyPress?: KeyboardEventHandler<HTMLSelectElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLSelectElement>; onKeyUp?: KeyboardEventHandler<HTMLSelectElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLSelectElement>; onAbort?: ReactEventHandler<HTMLSelectElement>; onAbortCapture?: ReactEventHandler<HTMLSelectElement>; onCanPlay?: ReactEventHandler<HTMLSelectElement>; onCanPlayCapture?: ReactEventHandler<HTMLSelectElement>; onCanPlayThrough?: ReactEventHandler<HTMLSelectElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLSelectElement>; onDurationChange?: ReactEventHandler<HTMLSelectElement>; onDurationChangeCapture?: ReactEventHandler<HTMLSelectElement>; onEmptied?: ReactEventHandler<HTMLSelectElement>; onEmptiedCapture?: ReactEventHandler<HTMLSelectElement>; onEncrypted?: ReactEventHandler<HTMLSelectElement>; onEncryptedCapture?: ReactEventHandler<HTMLSelectElement>; onEnded?: ReactEventHandler<HTMLSelectElement>; onEndedCapture?: ReactEventHandler<HTMLSelectElement>; onLoadedData?: ReactEventHandler<HTMLSelectElement>; onLoadedDataCapture?: ReactEventHandler<HTMLSelectElement>; onLoadedMetadata?: ReactEventHandler<HTMLSelectElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLSelectElement>; onLoadStart?: ReactEventHandler<HTMLSelectElement>; onLoadStartCapture?: ReactEventHandler<HTMLSelectElement>; onPause?: ReactEventHandler<HTMLSelectElement>; onPauseCapture?: ReactEventHandler<HTMLSelectElement>; onPlay?: ReactEventHandler<HTMLSelectElement>; onPlayCapture?: ReactEventHandler<HTMLSelectElement>; onPlaying?: ReactEventHandler<HTMLSelectElement>; onPlayingCapture?: ReactEventHandler<HTMLSelectElement>; onProgress?: ReactEventHandler<HTMLSelectElement>; onProgressCapture?: ReactEventHandler<HTMLSelectElement>; onRateChange?: ReactEventHandler<HTMLSelectElement>; onRateChangeCapture?: ReactEventHandler<HTMLSelectElement>; onResize?: ReactEventHandler<HTMLSelectElement>; onResizeCapture?: ReactEventHandler<HTMLSelectElement>; onSeeked?: ReactEventHandler<HTMLSelectElement>; onSeekedCapture?: ReactEventHandler<HTMLSelectElement>; onSeeking?: ReactEventHandler<HTMLSelectElement>; onSeekingCapture?: ReactEventHandler<HTMLSelectElement>; onStalled?: ReactEventHandler<HTMLSelectElement>; onStalledCapture?: ReactEventHandler<HTMLSelectElement>; onSuspend?: ReactEventHandler<HTMLSelectElement>; onSuspendCapture?: ReactEventHandler<HTMLSelectElement>; onTimeUpdate?: ReactEventHandler<HTMLSelectElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLSelectElement>; onVolumeChange?: ReactEventHandler<HTMLSelectElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLSelectElement>; onWaiting?: ReactEventHandler<HTMLSelectElement>; onWaitingCapture?: ReactEventHandler<HTMLSelectElement>; onAuxClick?: MouseEventHandler<HTMLSelectElement>; onAuxClickCapture?: MouseEventHandler<HTMLSelectElement>; onClick?: MouseEventHandler<HTMLSelectElement>; onClickCapture?: MouseEventHandler<HTMLSelectElement>; onContextMenu?: MouseEventHandler<HTMLSelectElement>; onContextMenuCapture?: MouseEventHandler<HTMLSelectElement>; onDoubleClick?: MouseEventHandler<HTMLSelectElement>; onDoubleClickCapture?: MouseEventHandler<HTMLSelectElement>; onDrag?: DragEventHandler<HTMLSelectElement>; onDragCapture?: DragEventHandler<HTMLSelectElement>; onDragEnd?: DragEventHandler<HTMLSelectElement>; onDragEndCapture?: DragEventHandler<HTMLSelectElement>; onDragEnter?: DragEventHandler<HTMLSelectElement>; onDragEnterCapture?: DragEventHandler<HTMLSelectElement>; onDragExit?: DragEventHandler<HTMLSelectElement>; onDragExitCapture?: DragEventHandler<HTMLSelectElement>; onDragLeave?: DragEventHandler<HTMLSelectElement>; onDragLeaveCapture?: DragEventHandler<HTMLSelectElement>; onDragOver?: DragEventHandler<HTMLSelectElement>; onDragOverCapture?: DragEventHandler<HTMLSelectElement>; onDragStart?: DragEventHandler<HTMLSelectElement>; onDragStartCapture?: DragEventHandler<HTMLSelectElement>; onDrop?: DragEventHandler<HTMLSelectElement>; onDropCapture?: DragEventHandler<HTMLSelectElement>; onMouseDown?: MouseEventHandler<HTMLSelectElement>; onMouseDownCapture?: MouseEventHandler<HTMLSelectElement>; onMouseEnter?: MouseEventHandler<HTMLSelectElement>; onMouseLeave?: MouseEventHandler<HTMLSelectElement>; onMouseMove?: MouseEventHandler<HTMLSelectElement>; onMouseMoveCapture?: MouseEventHandler<HTMLSelectElement>; onMouseOut?: MouseEventHandler<HTMLSelectElement>; onMouseOutCapture?: MouseEventHandler<HTMLSelectElement>; onMouseOver?: MouseEventHandler<HTMLSelectElement>; onMouseOverCapture?: MouseEventHandler<HTMLSelectElement>; onMouseUp?: MouseEventHandler<HTMLSelectElement>; onMouseUpCapture?: MouseEventHandler<HTMLSelectElement>; onSelect?: ReactEventHandler<HTMLSelectElement>; onSelectCapture?: ReactEventHandler<HTMLSelectElement>; onTouchCancel?: TouchEventHandler<HTMLSelectElement>; onTouchCancelCapture?: TouchEventHandler<HTMLSelectElement>; onTouchEnd?: TouchEventHandler<HTMLSelectElement>; onTouchEndCapture?: TouchEventHandler<HTMLSelectElement>; onTouchMove?: TouchEventHandler<HTMLSelectElement>; onTouchMoveCapture?: TouchEventHandler<HTMLSelectElement>; onTouchStart?: TouchEventHandler<HTMLSelectElement>; onTouchStartCapture?: TouchEventHandler<HTMLSelectElement>; onPointerDown?: PointerEventHandler<HTMLSelectElement>; onPointerDownCapture?: PointerEventHandler<HTMLSelectElement>; onPointerMove?: PointerEventHandler<HTMLSelectElement>; onPointerMoveCapture?: PointerEventHandler<HTMLSelectElement>; onPointerUp?: PointerEventHandler<HTMLSelectElement>; onPointerUpCapture?: PointerEventHandler<HTMLSelectElement>; onPointerCancel?: PointerEventHandler<HTMLSelectElement>; onPointerCancelCapture?: PointerEventHandler<HTMLSelectElement>; onPointerEnter?: PointerEventHandler<HTMLSelectElement>; onPointerLeave?: PointerEventHandler<HTMLSelectElement>; onPointerOver?: PointerEventHandler<HTMLSelectElement>; onPointerOverCapture?: PointerEventHandler<HTMLSelectElement>; onPointerOut?: PointerEventHandler<HTMLSelectElement>; onPointerOutCapture?: PointerEventHandler<HTMLSelectElement>; onGotPointerCapture?: PointerEventHandler<HTMLSelectElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLSelectElement>; onLostPointerCapture?: PointerEventHandler<HTMLSelectElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLSelectElement>; onScroll?: UIEventHandler<HTMLSelectElement>; onScrollCapture?: UIEventHandler<HTMLSelectElement>; onWheel?: WheelEventHandler<HTMLSelectElement>; onWheelCapture?: WheelEventHandler<HTMLSelectElement>; onAnimationStart?: AnimationEventHandler<HTMLSelectElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLSelectElement>; onAnimationEnd?: AnimationEventHandler<HTMLSelectElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLSelectElement>; onAnimationIteration?: AnimationEventHandler<HTMLSelectElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLSelectElement>; onTransitionEnd?: TransitionEventHandler<HTMLSelectElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLSelectElement>; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; select?: string; multiple?: string; filled?: string; outlined?: string; standard?: string; disabled?: string; icon?: string; iconOpen?: string; iconFilled?: string; iconOutlined?: string; iconStandard?: string; nativeInput?: string; error?: string; }"
        },
        "IconComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "outlined",
            "filled",
            "standard"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }"
        },
        "type": {
          "type": "string"
        },
        "error": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "name": {
          "type": "string"
        },
        "autoComplete": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "rows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "endAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "disableInjectingGlobalStyles": {
          "type": "boolean"
        },
        "inputComponent": {
          "type": "custom",
          "typeName": "\"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"data\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"figcaption\" | \"figure\" | \"footer\" | \"head\" | \"header\" | \"hgroup\" | \"i\" | \"input\" | \"kbd\" | \"keygen\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"textarea\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<InputBaseComponentProps>"
        },
        "multiline": {
          "type": "boolean"
        },
        "renderSuffix": {
          "type": "custom",
          "typeName": "(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode"
        },
        "maxRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "minRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "startAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disableUnderline": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/material/NativeSelect",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControl#FormControl"
        ],
        "exclusiveParent": "@mui/material/FormControl#FormControl"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/OutlinedInput#OutlinedInput": {
      "id": "@mui/material/OutlinedInput#OutlinedInput",
      "name": "OutlinedInput",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "id": {
          "type": "string"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "unknown"
        },
        "endAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "type": {
          "type": "string"
        },
        "startAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "placeholder": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorSecondary?: string; focused?: string; disabled?: string; adornedStart?: string; adornedEnd?: string; error?: string; sizeSmall?: string; multiline?: string; notchedOutline?: string; input?: string; inputSizeSmall?: string; inputMultiline?: string; inputAdornedStart?: string; inputAdornedEnd?: string; inputTypeSearch?: string; }"
        },
        "notched": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }"
        },
        "error": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "autoComplete": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "rows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "disableInjectingGlobalStyles": {
          "type": "boolean"
        },
        "inputComponent": {
          "type": "custom",
          "typeName": "\"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"data\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"figcaption\" | \"figure\" | \"footer\" | \"head\" | \"header\" | \"hgroup\" | \"i\" | \"input\" | \"kbd\" | \"keygen\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"textarea\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<InputBaseComponentProps>"
        },
        "multiline": {
          "type": "boolean"
        },
        "renderSuffix": {
          "type": "custom",
          "typeName": "(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode"
        },
        "maxRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "minRows": {
          "type": "custom",
          "typeName": "string | number"
        }
      },
      "export": {
        "path": "@mui/material/OutlinedInput",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Select#Select",
          "@mui/material/FormControl#FormControl"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Pagination#Pagination": {
      "id": "@mui/material/Pagination#Pagination",
      "name": "Pagination",
      "props": {
        "count": {
          "type": "number"
        },
        "color": {
          "type": "string-union",
          "values": [
            "standard",
            "primary",
            "secondary"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "renderItem": {
          "type": "custom",
          "typeName": "(params: PaginationRenderItemParams) => ReactNode"
        },
        "showFirstButton": {
          "type": "boolean"
        },
        "showLastButton": {
          "type": "boolean"
        },
        "hidePrevButton": {
          "type": "boolean"
        },
        "hideNextButton": {
          "type": "boolean"
        },
        "page": {
          "type": "number"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "text",
            "outlined"
          ]
        },
        "defaultPage": {
          "type": "number"
        },
        "siblingCount": {
          "type": "number"
        },
        "boundaryCount": {
          "type": "number"
        },
        "shape": {
          "type": "string-union",
          "values": [
            "rounded",
            "circular"
          ]
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; ul?: string; outlined?: string; text?: string; }"
        },
        "getItemAriaLabel": {
          "type": "custom",
          "typeName": "(type: \"page\" | \"first\" | \"last\" | \"next\" | \"previous\" | \"start-ellipsis\" | \"end-ellipsis\", page: number, selected: boolean) => string"
        },
        "componentName": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/Pagination",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack"
        ],
        "exclusiveParent": "@mui/material/Stack#Stack",
        "exclusiveChildren": [
          "@mui/material/PaginationItem#PaginationItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/PaginationItem#PaginationItem": {
      "id": "@mui/material/PaginationItem#PaginationItem",
      "name": "PaginationItem",
      "props": {
        "slots": {
          "type": "custom",
          "typeName": "{ first?: ElementType<any, keyof IntrinsicElements>; last?: ElementType<any, keyof IntrinsicElements>; next?: ElementType<any, keyof IntrinsicElements>; previous?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "component": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "to": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRipple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; page?: string; sizeSmall?: string; sizeLarge?: string; text?: string; textPrimary?: string; textSecondary?: string; outlined?: string; outlinedPrimary?: string; outlinedSecondary?: string; rounded?: string; ellipsis?: string; firstLast?: string; previousNext?: string; focusVisible?: string; disabled?: string; selected?: string; icon?: string; colorPrimary?: string; colorSecondary?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "standard",
            "primary",
            "secondary"
          ]
        },
        "components": {
          "type": "custom",
          "typeName": "{ first?: ElementType<any, keyof IntrinsicElements>; last?: ElementType<any, keyof IntrinsicElements>; next?: ElementType<any, keyof IntrinsicElements>; previous?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "page": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "selected": {
          "type": "boolean"
        },
        "shape": {
          "type": "string-union",
          "values": [
            "rounded",
            "circular"
          ]
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "type": {
          "type": "string-union",
          "values": [
            "page",
            "first",
            "last",
            "next",
            "previous",
            "start-ellipsis",
            "end-ellipsis"
          ]
        },
        "variant": {
          "type": "string-union",
          "values": [
            "text",
            "outlined"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/PaginationItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Pagination#Pagination"
        ],
        "exclusiveParent": "@mui/material/Pagination#Pagination"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Paper#Paper": {
      "id": "@mui/material/Paper#Paper",
      "name": "Paper",
      "props": {
        "square": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "elevation": {
          "type": "number"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "variant": {
          "type": "string-union",
          "values": [
            "elevation",
            "outlined"
          ]
        },
        "tabIndex": {
          "type": "number"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; rounded?: string; outlined?: string; elevation?: string; elevation0?: string; elevation1?: string; elevation2?: string; elevation3?: string; elevation4?: string; elevation5?: string; elevation6?: string; elevation7?: string; elevation8?: string; elevation9?: string; elevation10?: string; elevation11?: string; elevation12?: string; elevation13?: string; elevation14?: string; elevation15?: string; elevation16?: string; elevation17?: string; elevation18?: string; elevation19?: string; elevation20?: string; elevation21?: string; elevation22?: string; elevation23?: string; elevation24?: string; }"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Paper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Grow#Grow",
          "@mui/material/Fade#Fade",
          "react-draggable#Draggable",
          "@mui/material/Grid#Grid",
          "@mui/material/Unstable_Grid2#Grid",
          "@mui/material#ThemeProvider",
          "@mui/lab/Masonry#Masonry",
          "@mui/material/Popover#Popover",
          "@mui/material/Stack#Stack",
          "@mui/material/Popper#Popper"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/TagFaces#TagFacesIcon",
          "@mui/material/TableContainer#TableContainer",
          "react-virtuoso#TableVirtuoso",
          "@mui/material/InputBase#InputBase"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Popover#Popover": {
      "id": "@mui/material/Popover#Popover",
      "name": "Popover",
      "props": {
        "id": {
          "type": "string"
        },
        "open": {
          "type": "boolean"
        },
        "anchorEl": {
          "type": "custom",
          "typeName": "Element | (() => Element) | PopoverVirtualElement | (() => PopoverVirtualElement)"
        },
        "anchorOrigin": {
          "type": "custom",
          "typeName": "PopoverOrigin"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "transformOrigin": {
          "type": "custom",
          "typeName": "PopoverOrigin"
        },
        "disableRestoreFocus": {
          "type": "boolean"
        },
        "disableAutoFocus": {
          "type": "boolean"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: PopoverActions) => void) | RefObject<PopoverActions>"
        },
        "anchorPosition": {
          "type": "custom",
          "typeName": "PopoverPosition"
        },
        "anchorReference": {
          "type": "string-union",
          "values": [
            "none",
            "anchorEl",
            "anchorPosition"
          ]
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; paper?: string; }"
        },
        "container": {
          "type": "custom",
          "typeName": "Element | (() => Element)"
        },
        "elevation": {
          "type": "number"
        },
        "marginThreshold": {
          "type": "number"
        },
        "PaperProps": {
          "type": "custom",
          "typeName": "{ [x: string]: any; [x: number]: any; [x: symbol]: any; children?: ReactNode; classes?: Partial<PaperClasses> & Partial<ClassNameMap<never>>; elevation?: number; square?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"elevation\" | \"outlined\", PaperPropsVariantOverrides>; className?: string; style?: CSSProperties; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; paper?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<OverridableComponent<ModalTypeMap<\"div\", {}>>, {}, ModalOwnerState>; paper?: SlotComponentProps<OverridableComponent<PaperTypeMap<{}, \"div\">>, {}, {}>; }"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; } | \"auto\""
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "BackdropComponent": {
          "type": "custom",
          "typeName": "ComponentType<BackdropProps>"
        },
        "BackdropProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; classes?: Partial<BackdropClasses> & Partial<ClassNameMap<never>>; invisible?: boolean; open?: boolean; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; }; sx?: SxProps<Theme>; transitionDuration?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; TransitionComponent?: JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLElement>; ref?: Ref<unknown>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; in?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; easing?: string | { enter?: string; exit?: string; }; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; appear?: boolean; enter?: boolean; exit?: boolean; key?: Key; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "closeAfterTransition": {
          "type": "boolean"
        },
        "disableEnforceFocus": {
          "type": "boolean"
        },
        "disableEscapeKeyDown": {
          "type": "boolean"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "disableScrollLock": {
          "type": "boolean"
        },
        "hideBackdrop": {
          "type": "boolean"
        },
        "keepMounted": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/material/Popover",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "material-ui-popup-state#PopupState"
        ],
        "exclusiveParent": "material-ui-popup-state#PopupState"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Popper#Popper": {
      "id": "@mui/material/Popper#Popper",
      "name": "Popper",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "open": {
          "type": "boolean"
        },
        "anchorEl": {
          "type": "custom",
          "typeName": "HTMLElement | VirtualElement | (() => HTMLElement) | (() => VirtualElement)"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "transition": {
          "type": "boolean"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "placement": {
          "type": "string-union",
          "values": [
            "bottom",
            "left",
            "right",
            "top",
            "auto",
            "auto-start",
            "auto-end",
            "top-start",
            "top-end",
            "bottom-start",
            "bottom-end",
            "right-start",
            "right-end",
            "left-start",
            "left-end"
          ]
        },
        "id": {
          "type": "string"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", PopperRootSlotPropsOverrides, PopperOwnProps>; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactNode | ((props: PopperChildrenProps) => ReactNode)"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "container": {
          "type": "custom",
          "typeName": "Element | (() => Element)"
        },
        "slots": {
          "type": "custom",
          "typeName": "PopperSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", PopperRootSlotPropsOverrides, PopperOwnProps>; }"
        },
        "keepMounted": {
          "type": "boolean"
        },
        "modifiers": {
          "type": "custom",
          "typeName": "Partial<Modifier<any, any>>[]"
        },
        "popperOptions": {
          "type": "custom",
          "typeName": "{ placement?: Placement; modifiers?: any[]; strategy?: PositioningStrategy; onFirstUpdate?: (arg0: Partial<State>) => void; }"
        },
        "popperRef": {
          "type": "custom",
          "typeName": "((instance: Instance) => void) | RefObject<Instance>"
        }
      },
      "export": {
        "path": "@mui/material/Popper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "material-ui-popup-state#PopupState",
          "@mui/material#Box",
          "@mui/material/ClickAwayListener#ClickAwayListener"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Radio#Radio": {
      "id": "@mui/material/Radio#Radio",
      "name": "Radio",
      "props": {
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "checkedIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "checked": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "name": {
          "type": "string"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputHTMLAttributes<HTMLInputElement>"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; checked?: string; disabled?: string; colorPrimary?: string; colorSecondary?: string; sizeSmall?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "edge": {
          "type": "custom",
          "typeName": "false | \"end\" | \"start\""
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        }
      },
      "export": {
        "path": "@mui/material/Radio",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControlLabel#FormControlLabel"
        ],
        "exclusiveParent": "@mui/material/FormControlLabel#FormControlLabel"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/RadioGroup#RadioGroup": {
      "id": "@mui/material/RadioGroup#RadioGroup",
      "name": "RadioGroup",
      "props": {
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "any"
        },
        "row": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "any"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; row?: string; error?: string; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/RadioGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/DialogContent#DialogContent",
          "@mui/material/FormControl#FormControl"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Rating#Rating": {
      "id": "@mui/material/Rating#Rating",
      "name": "Rating",
      "props": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number"
        },
        "readOnly": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "number"
        },
        "max": {
          "type": "number"
        },
        "precision": {
          "type": "number"
        },
        "getLabelText": {
          "type": "custom",
          "typeName": "(value: number) => string"
        },
        "emptyIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; sizeSmall?: string; sizeMedium?: string; sizeLarge?: string; readOnly?: string; disabled?: string; focusVisible?: string; visuallyHidden?: string; label?: string; labelEmptyValueActive?: string; icon?: string; iconEmpty?: string; iconFilled?: string; iconHover?: string; iconFocus?: string; iconActive?: string; decimal?: string; }"
        },
        "emptyLabelText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "highlightSelectedOnly": {
          "type": "boolean"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "IconContainerComponent": {
          "type": "custom",
          "typeName": "\"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | ComponentType<IconContainerProps>"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Rating",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Select#Select": {
      "id": "@mui/material/Select#Select",
      "name": "Select",
      "props": {
        "autoFocus": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "\"\" | Value"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "labelId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "open": {
          "type": "boolean"
        },
        "input": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "native": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "unknown"
        },
        "multiple": {
          "type": "boolean"
        },
        "MenuProps": {
          "type": "custom",
          "typeName": "{ anchorEl?: Element | (() => Element) | PopoverVirtualElement | (() => PopoverVirtualElement); autoFocus?: boolean; children?: ReactNode; classes?: Partial<MenuClasses>; disableAutoFocusItem?: boolean; MenuListProps?: Partial<MenuListProps>; onClose?: (event: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => void; open?: boolean; PopoverClasses?: Partial<PopoverClasses>; sx?: SxProps<Theme>; transitionDuration?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; } | \"auto\"; TransitionProps?: TransitionProps; variant?: \"menu\" | \"selectedMenu\"; className?: string; style?: React.CSSProperties & import(\"/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@types/react/index\").CSSProperties; onChange?: FormEventHandler<HTMLDivElement>; elevation?: number; ref?: Ref<HTMLDivElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; transformOrigin?: PopoverOrigin; container?: Element | (() => Element); TransitionComponent?: JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>; slots?: { root?: ElementType<any, keyof IntrinsicElements>; paper?: ElementType<any, keyof IntrinsicElements>; }; slotProps?: { root?: SlotComponentProps<OverridableComponent<ModalTypeMap<\"div\", {}>>, {}, ModalOwnerState>; paper?: SlotComponentProps<OverridableComponent<PaperTypeMap<{}, \"div\">>, {}, {}>; }; component?: ElementType<any, keyof IntrinsicElements>; action?: Ref<PopoverActions>; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }; anchorOrigin?: PopoverOrigin; BackdropComponent?: ElementType<BackdropProps, keyof IntrinsicElements>; BackdropProps?: Partial<BackdropProps>; closeAfterTransition?: boolean; disableAutoFocus?: boolean; disableEnforceFocus?: boolean; disableEscapeKeyDown?: boolean; disablePortal?: boolean; disableRestoreFocus?: boolean; disableScrollLock?: boolean; hideBackdrop?: boolean; keepMounted?: boolean; onBackdropClick?: ReactEventHandler<{}>; onTransitionEnter?: () => void; onTransitionExited?: () => void; anchorPosition?: PopoverPosition; anchorReference?: PopoverReference; marginThreshold?: number; PaperProps?: Partial<PaperProps<ElementType<any, keyof IntrinsicElements>>>; }"
        },
        "renderValue": {
          "type": "custom",
          "typeName": "(value: Value) => ReactNode"
        },
        "displayEmpty": {
          "type": "boolean"
        },
        "autoWidth": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "custom",
          "typeName": "\"filled\""
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense"
          ]
        },
        "disabled": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }"
        },
        "type": {
          "type": "string"
        },
        "error": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "autoComplete": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "rows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "endAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "disableInjectingGlobalStyles": {
          "type": "boolean"
        },
        "inputComponent": {
          "type": "custom",
          "typeName": "\"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"data\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"figcaption\" | \"figure\" | \"footer\" | \"head\" | \"header\" | \"hgroup\" | \"i\" | \"input\" | \"kbd\" | \"keygen\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"textarea\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<InputBaseComponentProps>"
        },
        "multiline": {
          "type": "boolean"
        },
        "renderSuffix": {
          "type": "custom",
          "typeName": "(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode"
        },
        "maxRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "minRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "startAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disableUnderline": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; select?: string; multiple?: string; filled?: string; outlined?: string; standard?: string; disabled?: string; icon?: string; iconOpen?: string; iconFilled?: string; iconOutlined?: string; iconStandard?: string; nativeInput?: string; error?: string; }"
        },
        "defaultOpen": {
          "type": "boolean"
        },
        "IconComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "SelectDisplayProps": {
          "type": "custom",
          "typeName": "HTMLAttributes<HTMLDivElement>"
        }
      },
      "export": {
        "path": "@mui/material/Select",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControl#FormControl"
        ],
        "exclusiveParent": "@mui/material/FormControl#FormControl"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Skeleton#Skeleton": {
      "id": "@mui/material/Skeleton#Skeleton",
      "name": "Skeleton",
      "props": {
        "variant": {
          "type": "string-union",
          "values": [
            "text",
            "rounded",
            "circular",
            "rectangular"
          ]
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "animation": {
          "type": "custom",
          "typeName": "false | \"pulse\" | \"wave\""
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; text?: string; rectangular?: string; rounded?: string; circular?: string; pulse?: string; wave?: string; withChildren?: string; fitContent?: string; heightAuto?: string; }"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Skeleton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/CardHeader#CardHeader",
          "@mui/material/Card#Card",
          "@mui/material#Typography",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Slide#Slide": {
      "id": "@mui/material/Slide#Slide",
      "name": "Slide",
      "props": {
        "appear": {
          "type": "boolean"
        },
        "direction": {
          "type": "string-union",
          "values": [
            "left",
            "right",
            "up",
            "down"
          ]
        },
        "in": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "((instance: unknown) => void) | RefObject<unknown>"
        },
        "mountOnEnter": {
          "type": "boolean"
        },
        "unmountOnExit": {
          "type": "boolean"
        },
        "container": {
          "type": "custom",
          "typeName": "Element | ((element: Element) => Element)"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "easing": {
          "type": "custom",
          "typeName": "string | { enter?: string; exit?: string; }"
        },
        "timeout": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "enter": {
          "type": "boolean"
        },
        "exit": {
          "type": "boolean"
        },
        "addEndListener": {
          "type": "custom",
          "typeName": "{ implicit: (node: HTMLElement, done: () => void) => void; explicit: (done: () => void) => void; }[RefElement extends undefined ? \"implicit\" : \"explicit\"]"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Slide",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Slider#Slider": {
      "id": "@mui/material/Slider#Slider",
      "name": "Slider",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "number | number[]"
        },
        "getAriaValueText": {
          "type": "custom",
          "typeName": "(value: number, index: number) => string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "value": {
          "type": "custom",
          "typeName": "number | number[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "marks": {
          "type": "custom",
          "typeName": "boolean | Mark[]"
        },
        "step": {
          "type": "number"
        },
        "valueLabelDisplay": {
          "type": "string-union",
          "values": [
            "on",
            "off",
            "auto"
          ]
        },
        "min": {
          "type": "number"
        },
        "max": {
          "type": "number"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ root?: ElementType<any, keyof IntrinsicElements>; track?: ElementType<any, keyof IntrinsicElements>; rail?: ElementType<any, keyof IntrinsicElements>; thumb?: ElementType<any, keyof IntrinsicElements>; mark?: ElementType<any, keyof IntrinsicElements>; markLabel?: ElementType<any, keyof IntrinsicElements>; valueLabel?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "shiftStep": {
          "type": "number"
        },
        "getAriaLabel": {
          "type": "custom",
          "typeName": "(index: number) => string"
        },
        "disableSwap": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "scale": {
          "type": "custom",
          "typeName": "(value: number) => number"
        },
        "valueLabelFormat": {
          "type": "custom",
          "typeName": "string | ((value: number, index: number) => ReactNode)"
        },
        "track": {
          "type": "custom",
          "typeName": "false | \"normal\" | \"inverted\""
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "horizontal",
            "vertical"
          ]
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Track?: ElementType<any, keyof IntrinsicElements>; Rail?: ElementType<any, keyof IntrinsicElements>; Thumb?: ElementType<any, keyof IntrinsicElements>; Mark?: ElementType<any, keyof IntrinsicElements>; MarkLabel?: ElementType<any, keyof IntrinsicElements>; ValueLabel?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; track?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; rail?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; thumb?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; mark?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; markLabel?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; valueLabel?: SlotComponentProps<typeof SliderValueLabel, SliderComponentsPropsOverrides, SliderOwnerState>; input?: SlotComponentProps<\"input\", SliderComponentsPropsOverrides, SliderOwnerState>; }"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorPrimary?: string; colorSecondary?: string; colorError?: string; colorInfo?: string; colorSuccess?: string; colorWarning?: string; marked?: string; vertical?: string; disabled?: string; dragging?: string; rail?: string; track?: string; trackFalse?: string; trackInverted?: string; thumb?: string; active?: string; focusVisible?: string; mark?: string; markActive?: string; markLabel?: string; markLabelActive?: string; sizeSmall?: string; thumbColorPrimary?: string; thumbColorSecondary?: string; thumbColorError?: string; thumbColorInfo?: string; thumbColorSuccess?: string; thumbColorWarning?: string; thumbSizeSmall?: string; valueLabel?: string; valueLabelOpen?: string; valueLabelCircle?: string; valueLabelLabel?: string; }"
        },
        "className": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; track?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; rail?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; thumb?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; mark?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; markLabel?: SlotComponentProps<\"span\", SliderComponentsPropsOverrides, SliderOwnerState>; valueLabel?: SlotComponentProps<typeof SliderValueLabel, SliderComponentsPropsOverrides, SliderOwnerState>; input?: SlotComponentProps<\"input\", SliderComponentsPropsOverrides, SliderOwnerState>; }"
        },
        "tabIndex": {
          "type": "number"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Slider",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack",
          "@mui/material/Grid#Grid"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Snackbar#Snackbar": {
      "id": "@mui/material/Snackbar#Snackbar",
      "name": "Snackbar",
      "props": {
        "open": {
          "type": "boolean"
        },
        "autoHideDuration": {
          "type": "number"
        },
        "message": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "key": {
          "type": "any"
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "action": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "anchorOrigin": {
          "type": "custom",
          "typeName": "SnackbarOrigin"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; anchorOriginTopCenter?: string; anchorOriginBottomCenter?: string; anchorOriginTopRight?: string; anchorOriginBottomRight?: string; anchorOriginTopLeft?: string; anchorOriginBottomLeft?: string; }"
        },
        "ClickAwayListenerProps": {
          "type": "custom",
          "typeName": "{ children?: ReactElement<any, string | JSXElementConstructor<any>>; disableReactTree?: boolean; mouseEvent?: false | ClickAwayMouseEventHandler; onClickAway?: (event: MouseEvent | TouchEvent) => void; touchEvent?: false | ClickAwayTouchEventHandler; }"
        },
        "ContentProps": {
          "type": "custom",
          "typeName": "{ action?: ReactNode; classes?: Partial<SnackbarContentClasses>; message?: ReactNode; role?: AriaRole; sx?: SxProps<Theme>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLDivElement>; elevation?: number; square?: boolean; variant?: OverridableStringUnion<\"elevation\" | \"outlined\", PaperPropsVariantOverrides>; ref?: Ref<HTMLDivElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "disableWindowBlurListener": {
          "type": "boolean"
        },
        "resumeHideDuration": {
          "type": "number"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/Snackbar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/SnackbarContent#SnackbarContent": {
      "id": "@mui/material/SnackbarContent#SnackbarContent",
      "name": "SnackbarContent",
      "props": {
        "message": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "action": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; message?: string; action?: string; }"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "elevation": {
          "type": "number"
        },
        "square": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "elevation",
            "outlined"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        }
      },
      "export": {
        "path": "@mui/material/SnackbarContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack"
        ],
        "exclusiveParent": "@mui/material/Stack#Stack"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/SpeedDial#SpeedDial": {
      "id": "@mui/material/SpeedDial#SpeedDial",
      "name": "SpeedDial",
      "props": {
        "ariaLabel": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "open": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; fab?: string; directionUp?: string; directionDown?: string; directionLeft?: string; directionRight?: string; actions?: string; actionsClosed?: string; }"
        },
        "direction": {
          "type": "string-union",
          "values": [
            "left",
            "right",
            "up",
            "down"
          ]
        },
        "hidden": {
          "type": "boolean"
        },
        "FabProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<FabClasses> & Partial<ClassNameMap<never>>; color?: OverridableStringUnion<\"success\" | \"info\" | \"warning\" | \"error\" | Color, FabPropsColorOverrides>; disabled?: boolean; disableFocusRipple?: boolean; disableRipple?: boolean; href?: string; size?: OverridableStringUnion<\"small\" | \"medium\" | \"large\", FabPropsSizeOverrides>; variant?: OverridableStringUnion<\"circular\" | \"extended\", FabPropsVariantOverrides>; sx?: SxProps<Theme>; tabIndex?: number; action?: Ref<ButtonBaseActions>; centerRipple?: boolean; disableTouchRipple?: boolean; focusRipple?: boolean; focusVisibleClassName?: string; LinkComponent?: ElementType<any, keyof IntrinsicElements>; onFocusVisible?: FocusEventHandler<any>; TouchRippleProps?: Partial<TouchRippleProps>; touchRippleRef?: Ref<TouchRippleActions>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLButtonElement>; ref?: Ref<HTMLButtonElement>; form?: string; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLButtonElement>; onCopyCapture?: ClipboardEventHandler<HTMLButtonElement>; onCut?: ClipboardEventHandler<HTMLButtonElement>; onCutCapture?: ClipboardEventHandler<HTMLButtonElement>; onPaste?: ClipboardEventHandler<HTMLButtonElement>; onPasteCapture?: ClipboardEventHandler<HTMLButtonElement>; onCompositionEnd?: CompositionEventHandler<HTMLButtonElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionStart?: CompositionEventHandler<HTMLButtonElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdate?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLButtonElement>; onFocus?: FocusEventHandler<HTMLButtonElement>; onFocusCapture?: FocusEventHandler<HTMLButtonElement>; onBlur?: FocusEventHandler<HTMLButtonElement>; onBlurCapture?: FocusEventHandler<HTMLButtonElement>; onChangeCapture?: FormEventHandler<HTMLButtonElement>; onBeforeInput?: FormEventHandler<HTMLButtonElement>; onBeforeInputCapture?: FormEventHandler<HTMLButtonElement>; onInput?: FormEventHandler<HTMLButtonElement>; onInputCapture?: FormEventHandler<HTMLButtonElement>; onReset?: FormEventHandler<HTMLButtonElement>; onResetCapture?: FormEventHandler<HTMLButtonElement>; onSubmit?: FormEventHandler<HTMLButtonElement>; onSubmitCapture?: FormEventHandler<HTMLButtonElement>; onInvalid?: FormEventHandler<HTMLButtonElement>; onInvalidCapture?: FormEventHandler<HTMLButtonElement>; onLoad?: ReactEventHandler<HTMLButtonElement>; onLoadCapture?: ReactEventHandler<HTMLButtonElement>; onError?: ReactEventHandler<HTMLButtonElement>; onErrorCapture?: ReactEventHandler<HTMLButtonElement>; onKeyDown?: KeyboardEventHandler<HTMLButtonElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyPress?: KeyboardEventHandler<HTMLButtonElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyUp?: KeyboardEventHandler<HTMLButtonElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLButtonElement>; onAbort?: ReactEventHandler<HTMLButtonElement>; onAbortCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlay?: ReactEventHandler<HTMLButtonElement>; onCanPlayCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlayThrough?: ReactEventHandler<HTMLButtonElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLButtonElement>; onDurationChange?: ReactEventHandler<HTMLButtonElement>; onDurationChangeCapture?: ReactEventHandler<HTMLButtonElement>; onEmptied?: ReactEventHandler<HTMLButtonElement>; onEmptiedCapture?: ReactEventHandler<HTMLButtonElement>; onEncrypted?: ReactEventHandler<HTMLButtonElement>; onEncryptedCapture?: ReactEventHandler<HTMLButtonElement>; onEnded?: ReactEventHandler<HTMLButtonElement>; onEndedCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedData?: ReactEventHandler<HTMLButtonElement>; onLoadedDataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadata?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadStart?: ReactEventHandler<HTMLButtonElement>; onLoadStartCapture?: ReactEventHandler<HTMLButtonElement>; onPause?: ReactEventHandler<HTMLButtonElement>; onPauseCapture?: ReactEventHandler<HTMLButtonElement>; onPlay?: ReactEventHandler<HTMLButtonElement>; onPlayCapture?: ReactEventHandler<HTMLButtonElement>; onPlaying?: ReactEventHandler<HTMLButtonElement>; onPlayingCapture?: ReactEventHandler<HTMLButtonElement>; onProgress?: ReactEventHandler<HTMLButtonElement>; onProgressCapture?: ReactEventHandler<HTMLButtonElement>; onRateChange?: ReactEventHandler<HTMLButtonElement>; onRateChangeCapture?: ReactEventHandler<HTMLButtonElement>; onResize?: ReactEventHandler<HTMLButtonElement>; onResizeCapture?: ReactEventHandler<HTMLButtonElement>; onSeeked?: ReactEventHandler<HTMLButtonElement>; onSeekedCapture?: ReactEventHandler<HTMLButtonElement>; onSeeking?: ReactEventHandler<HTMLButtonElement>; onSeekingCapture?: ReactEventHandler<HTMLButtonElement>; onStalled?: ReactEventHandler<HTMLButtonElement>; onStalledCapture?: ReactEventHandler<HTMLButtonElement>; onSuspend?: ReactEventHandler<HTMLButtonElement>; onSuspendCapture?: ReactEventHandler<HTMLButtonElement>; onTimeUpdate?: ReactEventHandler<HTMLButtonElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLButtonElement>; onVolumeChange?: ReactEventHandler<HTMLButtonElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLButtonElement>; onWaiting?: ReactEventHandler<HTMLButtonElement>; onWaitingCapture?: ReactEventHandler<HTMLButtonElement>; onAuxClick?: MouseEventHandler<HTMLButtonElement>; onAuxClickCapture?: MouseEventHandler<HTMLButtonElement>; onClick?: MouseEventHandler<HTMLButtonElement>; onClickCapture?: MouseEventHandler<HTMLButtonElement>; onContextMenu?: MouseEventHandler<HTMLButtonElement>; onContextMenuCapture?: MouseEventHandler<HTMLButtonElement>; onDoubleClick?: MouseEventHandler<HTMLButtonElement>; onDoubleClickCapture?: MouseEventHandler<HTMLButtonElement>; onDrag?: DragEventHandler<HTMLButtonElement>; onDragCapture?: DragEventHandler<HTMLButtonElement>; onDragEnd?: DragEventHandler<HTMLButtonElement>; onDragEndCapture?: DragEventHandler<HTMLButtonElement>; onDragEnter?: DragEventHandler<HTMLButtonElement>; onDragEnterCapture?: DragEventHandler<HTMLButtonElement>; onDragExit?: DragEventHandler<HTMLButtonElement>; onDragExitCapture?: DragEventHandler<HTMLButtonElement>; onDragLeave?: DragEventHandler<HTMLButtonElement>; onDragLeaveCapture?: DragEventHandler<HTMLButtonElement>; onDragOver?: DragEventHandler<HTMLButtonElement>; onDragOverCapture?: DragEventHandler<HTMLButtonElement>; onDragStart?: DragEventHandler<HTMLButtonElement>; onDragStartCapture?: DragEventHandler<HTMLButtonElement>; onDrop?: DragEventHandler<HTMLButtonElement>; onDropCapture?: DragEventHandler<HTMLButtonElement>; onMouseDown?: MouseEventHandler<HTMLButtonElement>; onMouseDownCapture?: MouseEventHandler<HTMLButtonElement>; onMouseEnter?: MouseEventHandler<HTMLButtonElement>; onMouseLeave?: MouseEventHandler<HTMLButtonElement>; onMouseMove?: MouseEventHandler<HTMLButtonElement>; onMouseMoveCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOut?: MouseEventHandler<HTMLButtonElement>; onMouseOutCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOver?: MouseEventHandler<HTMLButtonElement>; onMouseOverCapture?: MouseEventHandler<HTMLButtonElement>; onMouseUp?: MouseEventHandler<HTMLButtonElement>; onMouseUpCapture?: MouseEventHandler<HTMLButtonElement>; onSelect?: ReactEventHandler<HTMLButtonElement>; onSelectCapture?: ReactEventHandler<HTMLButtonElement>; onTouchCancel?: TouchEventHandler<HTMLButtonElement>; onTouchCancelCapture?: TouchEventHandler<HTMLButtonElement>; onTouchEnd?: TouchEventHandler<HTMLButtonElement>; onTouchEndCapture?: TouchEventHandler<HTMLButtonElement>; onTouchMove?: TouchEventHandler<HTMLButtonElement>; onTouchMoveCapture?: TouchEventHandler<HTMLButtonElement>; onTouchStart?: TouchEventHandler<HTMLButtonElement>; onTouchStartCapture?: TouchEventHandler<HTMLButtonElement>; onPointerDown?: PointerEventHandler<HTMLButtonElement>; onPointerDownCapture?: PointerEventHandler<HTMLButtonElement>; onPointerMove?: PointerEventHandler<HTMLButtonElement>; onPointerMoveCapture?: PointerEventHandler<HTMLButtonElement>; onPointerUp?: PointerEventHandler<HTMLButtonElement>; onPointerUpCapture?: PointerEventHandler<HTMLButtonElement>; onPointerCancel?: PointerEventHandler<HTMLButtonElement>; onPointerCancelCapture?: PointerEventHandler<HTMLButtonElement>; onPointerEnter?: PointerEventHandler<HTMLButtonElement>; onPointerLeave?: PointerEventHandler<HTMLButtonElement>; onPointerOver?: PointerEventHandler<HTMLButtonElement>; onPointerOverCapture?: PointerEventHandler<HTMLButtonElement>; onPointerOut?: PointerEventHandler<HTMLButtonElement>; onPointerOutCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onScroll?: UIEventHandler<HTMLButtonElement>; onScrollCapture?: UIEventHandler<HTMLButtonElement>; onWheel?: WheelEventHandler<HTMLButtonElement>; onWheelCapture?: WheelEventHandler<HTMLButtonElement>; onAnimationStart?: AnimationEventHandler<HTMLButtonElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationEnd?: AnimationEventHandler<HTMLButtonElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationIteration?: AnimationEventHandler<HTMLButtonElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLButtonElement>; onTransitionEnd?: TransitionEventHandler<HTMLButtonElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLButtonElement>; type?: \"button\" | \"reset\" | \"submit\"; formAction?: string; formEncType?: string; formMethod?: string; formNoValidate?: boolean; formTarget?: string; name?: string; value?: string | number | readonly string[]; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "openIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/SpeedDial",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box",
        "exclusiveChildren": [
          "@mui/material/SpeedDialIcon#SpeedDialIcon",
          "@mui/material/SpeedDialAction#SpeedDialAction"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/SpeedDialAction#SpeedDialAction": {
      "id": "@mui/material/SpeedDialAction#SpeedDialAction",
      "name": "SpeedDialAction",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "tooltipTitle": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "tooltipOpen": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ fab?: string; fabClosed?: string; staticTooltip?: string; staticTooltipClosed?: string; staticTooltipLabel?: string; tooltipPlacementLeft?: string; tooltipPlacementRight?: string; }"
        },
        "FabProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<FabClasses> & Partial<ClassNameMap<never>>; color?: OverridableStringUnion<\"success\" | \"info\" | \"warning\" | \"error\" | Color, FabPropsColorOverrides>; disabled?: boolean; disableFocusRipple?: boolean; disableRipple?: boolean; href?: string; size?: OverridableStringUnion<\"small\" | \"medium\" | \"large\", FabPropsSizeOverrides>; variant?: OverridableStringUnion<\"circular\" | \"extended\", FabPropsVariantOverrides>; sx?: SxProps<Theme>; tabIndex?: number; action?: Ref<ButtonBaseActions>; centerRipple?: boolean; disableTouchRipple?: boolean; focusRipple?: boolean; focusVisibleClassName?: string; LinkComponent?: ElementType<any, keyof IntrinsicElements>; onFocusVisible?: FocusEventHandler<any>; TouchRippleProps?: Partial<TouchRippleProps>; touchRippleRef?: Ref<TouchRippleActions>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLButtonElement>; ref?: Ref<HTMLButtonElement>; form?: string; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLButtonElement>; onCopyCapture?: ClipboardEventHandler<HTMLButtonElement>; onCut?: ClipboardEventHandler<HTMLButtonElement>; onCutCapture?: ClipboardEventHandler<HTMLButtonElement>; onPaste?: ClipboardEventHandler<HTMLButtonElement>; onPasteCapture?: ClipboardEventHandler<HTMLButtonElement>; onCompositionEnd?: CompositionEventHandler<HTMLButtonElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionStart?: CompositionEventHandler<HTMLButtonElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdate?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLButtonElement>; onFocus?: FocusEventHandler<HTMLButtonElement>; onFocusCapture?: FocusEventHandler<HTMLButtonElement>; onBlur?: FocusEventHandler<HTMLButtonElement>; onBlurCapture?: FocusEventHandler<HTMLButtonElement>; onChangeCapture?: FormEventHandler<HTMLButtonElement>; onBeforeInput?: FormEventHandler<HTMLButtonElement>; onBeforeInputCapture?: FormEventHandler<HTMLButtonElement>; onInput?: FormEventHandler<HTMLButtonElement>; onInputCapture?: FormEventHandler<HTMLButtonElement>; onReset?: FormEventHandler<HTMLButtonElement>; onResetCapture?: FormEventHandler<HTMLButtonElement>; onSubmit?: FormEventHandler<HTMLButtonElement>; onSubmitCapture?: FormEventHandler<HTMLButtonElement>; onInvalid?: FormEventHandler<HTMLButtonElement>; onInvalidCapture?: FormEventHandler<HTMLButtonElement>; onLoad?: ReactEventHandler<HTMLButtonElement>; onLoadCapture?: ReactEventHandler<HTMLButtonElement>; onError?: ReactEventHandler<HTMLButtonElement>; onErrorCapture?: ReactEventHandler<HTMLButtonElement>; onKeyDown?: KeyboardEventHandler<HTMLButtonElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyPress?: KeyboardEventHandler<HTMLButtonElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyUp?: KeyboardEventHandler<HTMLButtonElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLButtonElement>; onAbort?: ReactEventHandler<HTMLButtonElement>; onAbortCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlay?: ReactEventHandler<HTMLButtonElement>; onCanPlayCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlayThrough?: ReactEventHandler<HTMLButtonElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLButtonElement>; onDurationChange?: ReactEventHandler<HTMLButtonElement>; onDurationChangeCapture?: ReactEventHandler<HTMLButtonElement>; onEmptied?: ReactEventHandler<HTMLButtonElement>; onEmptiedCapture?: ReactEventHandler<HTMLButtonElement>; onEncrypted?: ReactEventHandler<HTMLButtonElement>; onEncryptedCapture?: ReactEventHandler<HTMLButtonElement>; onEnded?: ReactEventHandler<HTMLButtonElement>; onEndedCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedData?: ReactEventHandler<HTMLButtonElement>; onLoadedDataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadata?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadStart?: ReactEventHandler<HTMLButtonElement>; onLoadStartCapture?: ReactEventHandler<HTMLButtonElement>; onPause?: ReactEventHandler<HTMLButtonElement>; onPauseCapture?: ReactEventHandler<HTMLButtonElement>; onPlay?: ReactEventHandler<HTMLButtonElement>; onPlayCapture?: ReactEventHandler<HTMLButtonElement>; onPlaying?: ReactEventHandler<HTMLButtonElement>; onPlayingCapture?: ReactEventHandler<HTMLButtonElement>; onProgress?: ReactEventHandler<HTMLButtonElement>; onProgressCapture?: ReactEventHandler<HTMLButtonElement>; onRateChange?: ReactEventHandler<HTMLButtonElement>; onRateChangeCapture?: ReactEventHandler<HTMLButtonElement>; onResize?: ReactEventHandler<HTMLButtonElement>; onResizeCapture?: ReactEventHandler<HTMLButtonElement>; onSeeked?: ReactEventHandler<HTMLButtonElement>; onSeekedCapture?: ReactEventHandler<HTMLButtonElement>; onSeeking?: ReactEventHandler<HTMLButtonElement>; onSeekingCapture?: ReactEventHandler<HTMLButtonElement>; onStalled?: ReactEventHandler<HTMLButtonElement>; onStalledCapture?: ReactEventHandler<HTMLButtonElement>; onSuspend?: ReactEventHandler<HTMLButtonElement>; onSuspendCapture?: ReactEventHandler<HTMLButtonElement>; onTimeUpdate?: ReactEventHandler<HTMLButtonElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLButtonElement>; onVolumeChange?: ReactEventHandler<HTMLButtonElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLButtonElement>; onWaiting?: ReactEventHandler<HTMLButtonElement>; onWaitingCapture?: ReactEventHandler<HTMLButtonElement>; onAuxClick?: MouseEventHandler<HTMLButtonElement>; onAuxClickCapture?: MouseEventHandler<HTMLButtonElement>; onClick?: MouseEventHandler<HTMLButtonElement>; onClickCapture?: MouseEventHandler<HTMLButtonElement>; onContextMenu?: MouseEventHandler<HTMLButtonElement>; onContextMenuCapture?: MouseEventHandler<HTMLButtonElement>; onDoubleClick?: MouseEventHandler<HTMLButtonElement>; onDoubleClickCapture?: MouseEventHandler<HTMLButtonElement>; onDrag?: DragEventHandler<HTMLButtonElement>; onDragCapture?: DragEventHandler<HTMLButtonElement>; onDragEnd?: DragEventHandler<HTMLButtonElement>; onDragEndCapture?: DragEventHandler<HTMLButtonElement>; onDragEnter?: DragEventHandler<HTMLButtonElement>; onDragEnterCapture?: DragEventHandler<HTMLButtonElement>; onDragExit?: DragEventHandler<HTMLButtonElement>; onDragExitCapture?: DragEventHandler<HTMLButtonElement>; onDragLeave?: DragEventHandler<HTMLButtonElement>; onDragLeaveCapture?: DragEventHandler<HTMLButtonElement>; onDragOver?: DragEventHandler<HTMLButtonElement>; onDragOverCapture?: DragEventHandler<HTMLButtonElement>; onDragStart?: DragEventHandler<HTMLButtonElement>; onDragStartCapture?: DragEventHandler<HTMLButtonElement>; onDrop?: DragEventHandler<HTMLButtonElement>; onDropCapture?: DragEventHandler<HTMLButtonElement>; onMouseDown?: MouseEventHandler<HTMLButtonElement>; onMouseDownCapture?: MouseEventHandler<HTMLButtonElement>; onMouseEnter?: MouseEventHandler<HTMLButtonElement>; onMouseLeave?: MouseEventHandler<HTMLButtonElement>; onMouseMove?: MouseEventHandler<HTMLButtonElement>; onMouseMoveCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOut?: MouseEventHandler<HTMLButtonElement>; onMouseOutCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOver?: MouseEventHandler<HTMLButtonElement>; onMouseOverCapture?: MouseEventHandler<HTMLButtonElement>; onMouseUp?: MouseEventHandler<HTMLButtonElement>; onMouseUpCapture?: MouseEventHandler<HTMLButtonElement>; onSelect?: ReactEventHandler<HTMLButtonElement>; onSelectCapture?: ReactEventHandler<HTMLButtonElement>; onTouchCancel?: TouchEventHandler<HTMLButtonElement>; onTouchCancelCapture?: TouchEventHandler<HTMLButtonElement>; onTouchEnd?: TouchEventHandler<HTMLButtonElement>; onTouchEndCapture?: TouchEventHandler<HTMLButtonElement>; onTouchMove?: TouchEventHandler<HTMLButtonElement>; onTouchMoveCapture?: TouchEventHandler<HTMLButtonElement>; onTouchStart?: TouchEventHandler<HTMLButtonElement>; onTouchStartCapture?: TouchEventHandler<HTMLButtonElement>; onPointerDown?: PointerEventHandler<HTMLButtonElement>; onPointerDownCapture?: PointerEventHandler<HTMLButtonElement>; onPointerMove?: PointerEventHandler<HTMLButtonElement>; onPointerMoveCapture?: PointerEventHandler<HTMLButtonElement>; onPointerUp?: PointerEventHandler<HTMLButtonElement>; onPointerUpCapture?: PointerEventHandler<HTMLButtonElement>; onPointerCancel?: PointerEventHandler<HTMLButtonElement>; onPointerCancelCapture?: PointerEventHandler<HTMLButtonElement>; onPointerEnter?: PointerEventHandler<HTMLButtonElement>; onPointerLeave?: PointerEventHandler<HTMLButtonElement>; onPointerOver?: PointerEventHandler<HTMLButtonElement>; onPointerOverCapture?: PointerEventHandler<HTMLButtonElement>; onPointerOut?: PointerEventHandler<HTMLButtonElement>; onPointerOutCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onScroll?: UIEventHandler<HTMLButtonElement>; onScrollCapture?: UIEventHandler<HTMLButtonElement>; onWheel?: WheelEventHandler<HTMLButtonElement>; onWheelCapture?: WheelEventHandler<HTMLButtonElement>; onAnimationStart?: AnimationEventHandler<HTMLButtonElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationEnd?: AnimationEventHandler<HTMLButtonElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationIteration?: AnimationEventHandler<HTMLButtonElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLButtonElement>; onTransitionEnd?: TransitionEventHandler<HTMLButtonElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLButtonElement>; type?: \"button\" | \"reset\" | \"submit\"; formAction?: string; formEncType?: string; formMethod?: string; formNoValidate?: boolean; formTarget?: string; name?: string; value?: string | number | readonly string[]; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "delay": {
          "type": "number"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "TooltipClasses": {
          "type": "custom",
          "typeName": "{ popper?: string; popperInteractive?: string; popperArrow?: string; popperClose?: string; tooltip?: string; tooltipArrow?: string; arrow?: string; touch?: string; tooltipPlacementLeft?: string; tooltipPlacementRight?: string; tooltipPlacementTop?: string; tooltipPlacementBottom?: string; }"
        },
        "tooltipPlacement": {
          "type": "string-union",
          "values": [
            "bottom",
            "left",
            "right",
            "top",
            "top-start",
            "top-end",
            "bottom-start",
            "bottom-end",
            "right-start",
            "right-end",
            "left-start",
            "left-end"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ popper?: ElementType<PopperProps, keyof IntrinsicElements>; transition?: ElementType<any, keyof IntrinsicElements>; tooltip?: ElementType<any, keyof IntrinsicElements>; arrow?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides; transition?: TransitionProps & TooltipComponentsPropsOverrides; tooltip?: HTMLProps<HTMLDivElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; arrow?: HTMLProps<HTMLSpanElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; }"
        },
        "open": {
          "type": "boolean"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Popper?: ElementType<PopperProps, keyof IntrinsicElements>; Transition?: ElementType<any, keyof IntrinsicElements>; Tooltip?: ElementType<any, keyof IntrinsicElements>; Arrow?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides; transition?: TransitionProps & TooltipComponentsPropsOverrides; tooltip?: HTMLProps<HTMLDivElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; arrow?: HTMLProps<HTMLSpanElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; }"
        },
        "placement": {
          "type": "string-union",
          "values": [
            "bottom",
            "left",
            "right",
            "top",
            "top-start",
            "top-end",
            "bottom-start",
            "bottom-end",
            "right-start",
            "right-end",
            "left-start",
            "left-end"
          ]
        },
        "arrow": {
          "type": "boolean"
        },
        "describeChild": {
          "type": "boolean"
        },
        "disableFocusListener": {
          "type": "boolean"
        },
        "disableHoverListener": {
          "type": "boolean"
        },
        "disableInteractive": {
          "type": "boolean"
        },
        "disableTouchListener": {
          "type": "boolean"
        },
        "enterDelay": {
          "type": "number"
        },
        "enterNextDelay": {
          "type": "number"
        },
        "enterTouchDelay": {
          "type": "number"
        },
        "followCursor": {
          "type": "boolean"
        },
        "leaveDelay": {
          "type": "number"
        },
        "leaveTouchDelay": {
          "type": "number"
        },
        "PopperComponent": {
          "type": "custom",
          "typeName": "((props: PopperProps, deprecatedLegacyContext?: any) => ReactNode) | (new (props: PopperProps, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "PopperProps": {
          "type": "custom",
          "typeName": "{ component?: ElementType<any, keyof IntrinsicElements>; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: SlotComponentProps<\"div\", PopperRootSlotPropsOverrides, PopperOwnProps>; }; sx?: SxProps<Theme>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLDivElement>; children?: ReactNode | ((props: PopperChildrenProps) => ReactNode); ref?: Ref<HTMLDivElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; container?: Element | (() => Element); transition?: boolean; slots?: PopperSlots; slotProps?: { root?: SlotComponentProps<\"div\", PopperRootSlotPropsOverrides, PopperOwnProps>; }; open?: boolean; disablePortal?: boolean; keepMounted?: boolean; anchorEl?: HTMLElement | VirtualElement | (() => HTMLElement) | (() => VirtualElement); modifiers?: Partial<Modifier<any, any>>[]; placement?: Placement; popperOptions?: Partial<OptionsGeneric<any>>; popperRef?: Ref<Instance>; }"
        }
      },
      "export": {
        "path": "@mui/material/SpeedDialAction",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/SpeedDial#SpeedDial"
        ],
        "exclusiveParent": "@mui/material/SpeedDial#SpeedDial"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/SpeedDialIcon#SpeedDialIcon": {
      "id": "@mui/material/SpeedDialIcon#SpeedDialIcon",
      "name": "SpeedDialIcon",
      "props": {
        "openIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; icon?: string; iconOpen?: string; iconWithOpenIconOpen?: string; openIcon?: string; openIconOpen?: string; }"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "open": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/SpeedDialIcon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/SpeedDial#SpeedDial"
        ],
        "exclusiveParent": "@mui/material/SpeedDial#SpeedDial"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Stack#Stack": {
      "id": "@mui/material/Stack#Stack",
      "name": "Stack",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "spacing": {
          "type": "custom",
          "typeName": "string | number | (string | number)[] | { [key: string]: string | number; }"
        },
        "direction": {
          "type": "custom",
          "typeName": "\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | (\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\")[] | { [key: string]: \"row\" | \"row-reverse\" | \"column\" | \"column-reverse\"; }"
        },
        "alignItems": {
          "type": "any"
        },
        "justifyContent": {
          "type": "any"
        },
        "gap": {
          "type": "any"
        },
        "divider": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "useFlexGap": {
          "type": "boolean"
        },
        "flexWrap": {
          "type": "any"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "noValidate": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoComplete": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "width": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "textAlign": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "height": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "columnGap": {
          "type": "any"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "p": {
          "type": "any"
        },
        "color": {
          "type": "any"
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any"
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "display": {
          "type": "any"
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any"
        },
        "flexShrink": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any"
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any"
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any"
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any"
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any"
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any"
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ [P in keyof ClassNameMap<ClassKey>]?: ClassNameMap<ClassKey>[P]; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Stack",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#ThemeProvider",
          "@mui/material/Stack#Stack",
          "@mui/material/Paper#Paper",
          "@mui/material#Box",
          "@mui/material/FormGroup#FormGroup",
          "@mui/material/MenuItem#MenuItem",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider"
        ],
        "exclusiveChildren": [
          "@mui/material/Breadcrumbs#Breadcrumbs",
          "@mui/material/Icon#Icon",
          "@mui/material/Pagination#Pagination",
          "@mui/icons-material/VolumeDown#VolumeDown",
          "@mui/icons-material/VolumeDownRounded#VolumeDownRounded",
          "@mui/icons-material/VolumeUpRounded#VolumeUpRounded",
          "@mui/material/SnackbarContent#SnackbarContent",
          "@mui/docs/HighlightedCode#HighlightedCode",
          "@mui/x-charts/Gauge#Gauge",
          "@mui/x-data-grid#GridColumnMenuSortItem",
          "@mui/x-data-grid#GridColumnMenuFilterItem",
          "@mui/x-data-grid#GridColumnMenuColumnsItem",
          "react-hook-form#Controller"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Step#Step": {
      "id": "@mui/material/Step#Step",
      "name": "Step",
      "props": {
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "completed": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; horizontal?: string; vertical?: string; alternativeLabel?: string; completed?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "expanded": {
          "type": "boolean"
        },
        "index": {
          "type": "number"
        },
        "last": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Step",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stepper#Stepper"
        ],
        "exclusiveParent": "@mui/material/Stepper#Stepper",
        "exclusiveChildren": [
          "@mui/material/StepLabel#StepLabel",
          "@mui/material/StepButton#StepButton",
          "@mui/material/StepContent#StepContent"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/StepButton#StepButton": {
      "id": "@mui/material/StepButton#StepButton",
      "name": "StepButton",
      "props": {
        "color": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; horizontal?: string; vertical?: string; touchRipple?: string; }"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "optional": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "tabIndex": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ]
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        }
      },
      "export": {
        "path": "@mui/material/StepButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Step#Step"
        ],
        "exclusiveParent": "@mui/material/Step#Step"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/StepContent#StepContent": {
      "id": "@mui/material/StepContent#StepContent",
      "name": "StepContent",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; last?: string; transition?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; } | \"auto\""
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/StepContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Step#Step"
        ],
        "exclusiveParent": "@mui/material/Step#Step"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/StepLabel#StepLabel": {
      "id": "@mui/material/StepLabel#StepLabel",
      "name": "StepLabel",
      "props": {
        "StepIconComponent": {
          "type": "custom",
          "typeName": "ComponentType<StepIconProps>"
        },
        "optional": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; horizontal?: string; vertical?: string; label?: string; active?: string; completed?: string; error?: string; disabled?: string; iconContainer?: string; alternativeLabel?: string; labelContainer?: string; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ label?: HTMLProps<HTMLSpanElement>; }"
        },
        "error": {
          "type": "boolean"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ label?: HTMLProps<HTMLSpanElement>; }"
        },
        "StepIconProps": {
          "type": "custom",
          "typeName": "{ active?: boolean; classes?: Partial<StepIconClasses>; completed?: boolean; error?: boolean; icon?: ReactNode; sx?: SxProps<Theme>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLDivElement>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; ref?: Ref<unknown>; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/StepLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Step#Step"
        ],
        "exclusiveParent": "@mui/material/Step#Step"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Stepper#Stepper": {
      "id": "@mui/material/Stepper#Stepper",
      "name": "Stepper",
      "props": {
        "alternativeLabel": {
          "type": "boolean"
        },
        "activeStep": {
          "type": "number"
        },
        "connector": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "nonLinear": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "horizontal",
            "vertical"
          ]
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; horizontal?: string; vertical?: string; nonLinear?: string; alternativeLabel?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "elevation": {
          "type": "number"
        },
        "square": {
          "type": "boolean"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "elevation",
            "outlined"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Stepper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/material/Step#Step"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/SvgIcon#SvgIcon": {
      "id": "@mui/material/SvgIcon#SvgIcon",
      "name": "SvgIcon",
      "props": {
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "viewBox": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "fontSize": {
          "type": "string-union",
          "values": [
            "small",
            "inherit",
            "medium",
            "large"
          ]
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; colorPrimary?: string; colorSecondary?: string; colorAction?: string; colorError?: string; colorDisabled?: string; fontSizeInherit?: string; fontSizeSmall?: string; fontSizeMedium?: string; fontSizeLarge?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "disabled",
            "inherit",
            "action",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "htmlColor": {
          "type": "string"
        },
        "inheritViewBox": {
          "type": "boolean"
        },
        "shapeRendering": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "titleAccess": {
          "type": "string"
        },
        "string": {
          "type": "custom",
          "typeName": "string | number"
        },
        "elevation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipPath": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "mask": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "tabIndex": {
          "type": "number"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "fontWeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cursor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "direction": {
          "type": "custom",
          "typeName": "string | number"
        },
        "display": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSizeAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStretch": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStyle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontVariant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "imageRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "letterSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "opacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "order": {
          "type": "custom",
          "typeName": "string | number"
        },
        "paintOrder": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointerEvents": {
          "type": "custom",
          "typeName": "string | number"
        },
        "rotate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "scale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "transform": {
          "type": "string"
        },
        "unicodeBidi": {
          "type": "custom",
          "typeName": "string | number"
        },
        "visibility": {
          "type": "custom",
          "typeName": "string | number"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "wordSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "writingMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "offset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overflow": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textDecoration": {
          "type": "custom",
          "typeName": "string | number"
        },
        "azimuth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clip": {
          "type": "custom",
          "typeName": "string | number"
        },
        "alignmentBaseline": {
          "type": "string-union",
          "values": [
            "inherit",
            "alphabetic",
            "hanging",
            "ideographic",
            "mathematical",
            "auto",
            "baseline",
            "before-edge",
            "text-before-edge",
            "middle",
            "central",
            "after-edge",
            "text-after-edge"
          ]
        },
        "baselineShift": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipRule": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dominantBaseline": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fill": {
          "type": "string"
        },
        "fillOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fillRule": {
          "type": "string-union",
          "values": [
            "inherit",
            "nonzero",
            "evenodd"
          ]
        },
        "floodColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationVertical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lightingColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerEnd": {
          "type": "string"
        },
        "markerMid": {
          "type": "string"
        },
        "markerStart": {
          "type": "string"
        },
        "stopColor": {
          "type": "string"
        },
        "stopOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stroke": {
          "type": "string"
        },
        "strokeDasharray": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeDashoffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeLinecap": {
          "type": "string-union",
          "values": [
            "square",
            "inherit",
            "butt",
            "round"
          ]
        },
        "strokeLinejoin": {
          "type": "string-union",
          "values": [
            "inherit",
            "round",
            "miter",
            "bevel"
          ]
        },
        "strokeMiterlimit": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textAnchor": {
          "type": "string"
        },
        "vectorEffect": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in": {
          "type": "string"
        },
        "spacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "href": {
          "type": "string"
        },
        "media": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "max": {
          "type": "custom",
          "typeName": "string | number"
        },
        "method": {
          "type": "string"
        },
        "min": {
          "type": "custom",
          "typeName": "string | number"
        },
        "crossOrigin": {
          "type": "string-union",
          "values": [
            "",
            "anonymous",
            "use-credentials"
          ]
        },
        "accentHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "accumulate": {
          "type": "string-union",
          "values": [
            "none",
            "sum"
          ]
        },
        "additive": {
          "type": "string-union",
          "values": [
            "replace",
            "sum"
          ]
        },
        "allowReorder": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "alphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "amplitude": {
          "type": "custom",
          "typeName": "string | number"
        },
        "arabicForm": {
          "type": "string-union",
          "values": [
            "initial",
            "medial",
            "terminal",
            "isolated"
          ]
        },
        "ascent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "type": "string"
        },
        "autoReverse": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "baseFrequency": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bbox": {
          "type": "custom",
          "typeName": "string | number"
        },
        "begin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bias": {
          "type": "custom",
          "typeName": "string | number"
        },
        "by": {
          "type": "custom",
          "typeName": "string | number"
        },
        "calcMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "capHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipPathUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolationFilters": {
          "type": "string-union",
          "values": [
            "inherit",
            "auto",
            "sRGB",
            "linearRGB"
          ]
        },
        "colorProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentScriptType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentStyleType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "d": {
          "type": "string"
        },
        "decelerate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "descent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "diffuseConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "divisor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "edgeMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "enableBackground": {
          "type": "custom",
          "typeName": "string | number"
        },
        "end": {
          "type": "custom",
          "typeName": "string | number"
        },
        "exponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "externalResourcesRequired": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "filterRes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "filterUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "focusable": {
          "type": "custom",
          "typeName": "Booleanish | \"auto\""
        },
        "format": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fr": {
          "type": "custom",
          "typeName": "string | number"
        },
        "from": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphName": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationHorizontal": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphRef": {
          "type": "custom",
          "typeName": "string | number"
        },
        "gradientTransform": {
          "type": "string"
        },
        "gradientUnits": {
          "type": "string"
        },
        "hanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizAdvX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "ideographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "intercept": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k3": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k4": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelMatrix": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelUnitLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kerning": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyPoints": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keySplines": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyTimes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lengthAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "limitingConeAngle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "local": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskContentUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "numOctaves": {
          "type": "custom",
          "typeName": "string | number"
        },
        "operator": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orient": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orientation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "origin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "panose1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pathLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternContentUnits": {
          "type": "string"
        },
        "patternTransform": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternUnits": {
          "type": "string"
        },
        "points": {
          "type": "string"
        },
        "pointsAtX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtZ": {
          "type": "custom",
          "typeName": "string | number"
        },
        "preserveAlpha": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "preserveAspectRatio": {
          "type": "string"
        },
        "primitiveUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "r": {
          "type": "custom",
          "typeName": "string | number"
        },
        "radius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "renderingIntent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatCount": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatDur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredExtensions": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredFeatures": {
          "type": "custom",
          "typeName": "string | number"
        },
        "restart": {
          "type": "custom",
          "typeName": "string | number"
        },
        "result": {
          "type": "string"
        },
        "rx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "ry": {
          "type": "custom",
          "typeName": "string | number"
        },
        "seed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "slope": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularExponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "speed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spreadMethod": {
          "type": "string"
        },
        "startOffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stdDeviation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemh": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemv": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stitchTiles": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughPosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "surfaceScale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "systemLanguage": {
          "type": "custom",
          "typeName": "string | number"
        },
        "tableValues": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "to": {
          "type": "custom",
          "typeName": "string | number"
        },
        "u1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "u2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeRange": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unitsPerEm": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vAlphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "vertAdvY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vHanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vIdeographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "viewTarget": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vMathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "widths": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xChannelSelector": {
          "type": "string"
        },
        "xHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xlinkActuate": {
          "type": "string"
        },
        "xlinkArcrole": {
          "type": "string"
        },
        "xlinkHref": {
          "type": "string"
        },
        "xlinkRole": {
          "type": "string"
        },
        "xlinkShow": {
          "type": "string"
        },
        "xlinkTitle": {
          "type": "string"
        },
        "xlinkType": {
          "type": "string"
        },
        "xmlBase": {
          "type": "string"
        },
        "xmlLang": {
          "type": "string"
        },
        "xmlns": {
          "type": "string"
        },
        "xmlnsXlink": {
          "type": "string"
        },
        "xmlSpace": {
          "type": "string"
        },
        "y1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y": {
          "type": "custom",
          "typeName": "string | number"
        },
        "yChannelSelector": {
          "type": "string"
        },
        "z": {
          "type": "custom",
          "typeName": "string | number"
        },
        "zoomAndPan": {
          "type": "string"
        }
      },
      "export": {
        "path": "@mui/material/SvgIcon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/SwipeableDrawer#SwipeableDrawer": {
      "id": "@mui/material/SwipeableDrawer#SwipeableDrawer",
      "name": "SwipeableDrawer",
      "props": {
        "container": {
          "type": "custom",
          "typeName": "Element | (() => Element)"
        },
        "anchor": {
          "type": "string-union",
          "values": [
            "bottom",
            "left",
            "right",
            "top"
          ]
        },
        "open": {
          "type": "boolean"
        },
        "swipeAreaWidth": {
          "type": "number"
        },
        "disableSwipeToOpen": {
          "type": "boolean"
        },
        "ModalProps": {
          "type": "custom",
          "typeName": "{ BackdropComponent?: ElementType<BackdropProps, keyof IntrinsicElements>; BackdropProps?: Partial<BackdropProps>; children?: ReactElement<any, string | JSXElementConstructor<any>>; classes?: Partial<ModalClasses>; className?: string; closeAfterTransition?: boolean; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }; container?: Element | (() => Element); disableAutoFocus?: boolean; disableEnforceFocus?: boolean; disableEscapeKeyDown?: boolean; disablePortal?: boolean; disableRestoreFocus?: boolean; disableScrollLock?: boolean; hideBackdrop?: boolean; keepMounted?: boolean; onBackdropClick?: ReactEventHandler<{}>; onClose?: (event: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => void; onTransitionEnter?: () => void; onTransitionExited?: () => void; open?: boolean; slots?: ModalSlots; slotProps?: { root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }; sx?: SxProps<Theme>; style?: CSSProperties; onChange?: FormEventHandler<HTMLDivElement>; ref?: Ref<HTMLDivElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "allowSwipeInChildren": {
          "type": "custom",
          "typeName": "boolean | ((e: TouchEvent, swipeArea: HTMLDivElement, paper: HTMLDivElement) => boolean)"
        },
        "disableBackdropTransition": {
          "type": "boolean"
        },
        "disableDiscovery": {
          "type": "boolean"
        },
        "hysteresis": {
          "type": "number"
        },
        "minFlingVelocity": {
          "type": "number"
        },
        "SwipeAreaProps": {
          "type": "custom",
          "typeName": "object"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; docked?: string; paper?: string; paperAnchorLeft?: string; paperAnchorRight?: string; paperAnchorTop?: string; paperAnchorBottom?: string; paperAnchorDockedLeft?: string; paperAnchorDockedTop?: string; paperAnchorDockedRight?: string; paperAnchorDockedBottom?: string; modal?: string; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "elevation": {
          "type": "number"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "permanent",
            "persistent",
            "temporary"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "transitionDuration": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "ModalSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Root?: ElementType<any, keyof IntrinsicElements>; Backdrop?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ root?: SlotComponentProps<\"div\", ModalComponentsPropsOverrides, ModalOwnerState>; backdrop?: SlotComponentProps<OverridableComponent<BackdropTypeMap<{}, \"div\">>, ModalComponentsPropsOverrides, ModalOwnerState>; }"
        },
        "BackdropComponent": {
          "type": "custom",
          "typeName": "ComponentType<BackdropProps>"
        },
        "BackdropProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; classes?: Partial<BackdropClasses> & Partial<ClassNameMap<never>>; invisible?: boolean; open?: boolean; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; }; sx?: SxProps<Theme>; transitionDuration?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; TransitionComponent?: JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLElement>; ref?: Ref<unknown>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; in?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; easing?: string | { enter?: string; exit?: string; }; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; appear?: boolean; enter?: boolean; exit?: boolean; key?: Key; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "closeAfterTransition": {
          "type": "boolean"
        },
        "disableAutoFocus": {
          "type": "boolean"
        },
        "disableEnforceFocus": {
          "type": "boolean"
        },
        "disableEscapeKeyDown": {
          "type": "boolean"
        },
        "disablePortal": {
          "type": "boolean"
        },
        "disableRestoreFocus": {
          "type": "boolean"
        },
        "disableScrollLock": {
          "type": "boolean"
        },
        "hideBackdrop": {
          "type": "boolean"
        },
        "keepMounted": {
          "type": "boolean"
        },
        "PaperProps": {
          "type": "custom",
          "typeName": "{ [x: string]: any; [x: number]: any; [x: symbol]: any; children?: ReactNode; classes?: Partial<PaperClasses> & Partial<ClassNameMap<never>>; elevation?: number; square?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"elevation\" | \"outlined\", PaperPropsVariantOverrides>; className?: string; style?: CSSProperties; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "SlideProps": {
          "type": "custom",
          "typeName": "{ appear?: boolean; children?: ReactElement<any, any>; container?: Element | ((element: Element) => Element); direction?: \"left\" | \"right\" | \"up\" | \"down\"; easing?: string | { enter?: string; exit?: string; }; in?: boolean; ref?: Ref<unknown>; timeout?: number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }; enter?: boolean; exit?: boolean; mountOnEnter?: boolean; unmountOnExit?: boolean; addEndListener?: (node: HTMLElement, done: () => void) => void; onEnter?: (node: HTMLElement, isAppearing: boolean) => void; onEntering?: (node: HTMLElement, isAppearing: boolean) => void; onEntered?: (node: HTMLElement, isAppearing: boolean) => void; onExit?: (node: HTMLElement) => void; onExiting?: (node: HTMLElement) => void; onExited?: (node: HTMLElement) => void; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; className?: string; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; slot?: string; spellCheck?: Booleanish; style?: CSSProperties; tabIndex?: number; title?: string; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLElement>; onCopyCapture?: ClipboardEventHandler<HTMLElement>; onCut?: ClipboardEventHandler<HTMLElement>; onCutCapture?: ClipboardEventHandler<HTMLElement>; onPaste?: ClipboardEventHandler<HTMLElement>; onPasteCapture?: ClipboardEventHandler<HTMLElement>; onCompositionEnd?: CompositionEventHandler<HTMLElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLElement>; onCompositionStart?: CompositionEventHandler<HTMLElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLElement>; onCompositionUpdate?: CompositionEventHandler<HTMLElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLElement>; onFocus?: FocusEventHandler<HTMLElement>; onFocusCapture?: FocusEventHandler<HTMLElement>; onBlur?: FocusEventHandler<HTMLElement>; onBlurCapture?: FocusEventHandler<HTMLElement>; onChange?: FormEventHandler<HTMLElement>; onChangeCapture?: FormEventHandler<HTMLElement>; onBeforeInput?: FormEventHandler<HTMLElement>; onBeforeInputCapture?: FormEventHandler<HTMLElement>; onInput?: FormEventHandler<HTMLElement>; onInputCapture?: FormEventHandler<HTMLElement>; onReset?: FormEventHandler<HTMLElement>; onResetCapture?: FormEventHandler<HTMLElement>; onSubmit?: FormEventHandler<HTMLElement>; onSubmitCapture?: FormEventHandler<HTMLElement>; onInvalid?: FormEventHandler<HTMLElement>; onInvalidCapture?: FormEventHandler<HTMLElement>; onLoad?: ReactEventHandler<HTMLElement>; onLoadCapture?: ReactEventHandler<HTMLElement>; onError?: ReactEventHandler<HTMLElement>; onErrorCapture?: ReactEventHandler<HTMLElement>; onKeyDown?: KeyboardEventHandler<HTMLElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLElement>; onKeyPress?: KeyboardEventHandler<HTMLElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLElement>; onKeyUp?: KeyboardEventHandler<HTMLElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLElement>; onAbort?: ReactEventHandler<HTMLElement>; onAbortCapture?: ReactEventHandler<HTMLElement>; onCanPlay?: ReactEventHandler<HTMLElement>; onCanPlayCapture?: ReactEventHandler<HTMLElement>; onCanPlayThrough?: ReactEventHandler<HTMLElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLElement>; onDurationChange?: ReactEventHandler<HTMLElement>; onDurationChangeCapture?: ReactEventHandler<HTMLElement>; onEmptied?: ReactEventHandler<HTMLElement>; onEmptiedCapture?: ReactEventHandler<HTMLElement>; onEncrypted?: ReactEventHandler<HTMLElement>; onEncryptedCapture?: ReactEventHandler<HTMLElement>; onEnded?: ReactEventHandler<HTMLElement>; onEndedCapture?: ReactEventHandler<HTMLElement>; onLoadedData?: ReactEventHandler<HTMLElement>; onLoadedDataCapture?: ReactEventHandler<HTMLElement>; onLoadedMetadata?: ReactEventHandler<HTMLElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLElement>; onLoadStart?: ReactEventHandler<HTMLElement>; onLoadStartCapture?: ReactEventHandler<HTMLElement>; onPause?: ReactEventHandler<HTMLElement>; onPauseCapture?: ReactEventHandler<HTMLElement>; onPlay?: ReactEventHandler<HTMLElement>; onPlayCapture?: ReactEventHandler<HTMLElement>; onPlaying?: ReactEventHandler<HTMLElement>; onPlayingCapture?: ReactEventHandler<HTMLElement>; onProgress?: ReactEventHandler<HTMLElement>; onProgressCapture?: ReactEventHandler<HTMLElement>; onRateChange?: ReactEventHandler<HTMLElement>; onRateChangeCapture?: ReactEventHandler<HTMLElement>; onResize?: ReactEventHandler<HTMLElement>; onResizeCapture?: ReactEventHandler<HTMLElement>; onSeeked?: ReactEventHandler<HTMLElement>; onSeekedCapture?: ReactEventHandler<HTMLElement>; onSeeking?: ReactEventHandler<HTMLElement>; onSeekingCapture?: ReactEventHandler<HTMLElement>; onStalled?: ReactEventHandler<HTMLElement>; onStalledCapture?: ReactEventHandler<HTMLElement>; onSuspend?: ReactEventHandler<HTMLElement>; onSuspendCapture?: ReactEventHandler<HTMLElement>; onTimeUpdate?: ReactEventHandler<HTMLElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLElement>; onVolumeChange?: ReactEventHandler<HTMLElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLElement>; onWaiting?: ReactEventHandler<HTMLElement>; onWaitingCapture?: ReactEventHandler<HTMLElement>; onAuxClick?: MouseEventHandler<HTMLElement>; onAuxClickCapture?: MouseEventHandler<HTMLElement>; onClick?: MouseEventHandler<HTMLElement>; onClickCapture?: MouseEventHandler<HTMLElement>; onContextMenu?: MouseEventHandler<HTMLElement>; onContextMenuCapture?: MouseEventHandler<HTMLElement>; onDoubleClick?: MouseEventHandler<HTMLElement>; onDoubleClickCapture?: MouseEventHandler<HTMLElement>; onDrag?: DragEventHandler<HTMLElement>; onDragCapture?: DragEventHandler<HTMLElement>; onDragEnd?: DragEventHandler<HTMLElement>; onDragEndCapture?: DragEventHandler<HTMLElement>; onDragEnter?: DragEventHandler<HTMLElement>; onDragEnterCapture?: DragEventHandler<HTMLElement>; onDragExit?: DragEventHandler<HTMLElement>; onDragExitCapture?: DragEventHandler<HTMLElement>; onDragLeave?: DragEventHandler<HTMLElement>; onDragLeaveCapture?: DragEventHandler<HTMLElement>; onDragOver?: DragEventHandler<HTMLElement>; onDragOverCapture?: DragEventHandler<HTMLElement>; onDragStart?: DragEventHandler<HTMLElement>; onDragStartCapture?: DragEventHandler<HTMLElement>; onDrop?: DragEventHandler<HTMLElement>; onDropCapture?: DragEventHandler<HTMLElement>; onMouseDown?: MouseEventHandler<HTMLElement>; onMouseDownCapture?: MouseEventHandler<HTMLElement>; onMouseEnter?: MouseEventHandler<HTMLElement>; onMouseLeave?: MouseEventHandler<HTMLElement>; onMouseMove?: MouseEventHandler<HTMLElement>; onMouseMoveCapture?: MouseEventHandler<HTMLElement>; onMouseOut?: MouseEventHandler<HTMLElement>; onMouseOutCapture?: MouseEventHandler<HTMLElement>; onMouseOver?: MouseEventHandler<HTMLElement>; onMouseOverCapture?: MouseEventHandler<HTMLElement>; onMouseUp?: MouseEventHandler<HTMLElement>; onMouseUpCapture?: MouseEventHandler<HTMLElement>; onSelect?: ReactEventHandler<HTMLElement>; onSelectCapture?: ReactEventHandler<HTMLElement>; onTouchCancel?: TouchEventHandler<HTMLElement>; onTouchCancelCapture?: TouchEventHandler<HTMLElement>; onTouchEnd?: TouchEventHandler<HTMLElement>; onTouchEndCapture?: TouchEventHandler<HTMLElement>; onTouchMove?: TouchEventHandler<HTMLElement>; onTouchMoveCapture?: TouchEventHandler<HTMLElement>; onTouchStart?: TouchEventHandler<HTMLElement>; onTouchStartCapture?: TouchEventHandler<HTMLElement>; onPointerDown?: PointerEventHandler<HTMLElement>; onPointerDownCapture?: PointerEventHandler<HTMLElement>; onPointerMove?: PointerEventHandler<HTMLElement>; onPointerMoveCapture?: PointerEventHandler<HTMLElement>; onPointerUp?: PointerEventHandler<HTMLElement>; onPointerUpCapture?: PointerEventHandler<HTMLElement>; onPointerCancel?: PointerEventHandler<HTMLElement>; onPointerCancelCapture?: PointerEventHandler<HTMLElement>; onPointerEnter?: PointerEventHandler<HTMLElement>; onPointerLeave?: PointerEventHandler<HTMLElement>; onPointerOver?: PointerEventHandler<HTMLElement>; onPointerOverCapture?: PointerEventHandler<HTMLElement>; onPointerOut?: PointerEventHandler<HTMLElement>; onPointerOutCapture?: PointerEventHandler<HTMLElement>; onGotPointerCapture?: PointerEventHandler<HTMLElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onLostPointerCapture?: PointerEventHandler<HTMLElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLElement>; onScroll?: UIEventHandler<HTMLElement>; onScrollCapture?: UIEventHandler<HTMLElement>; onWheel?: WheelEventHandler<HTMLElement>; onWheelCapture?: WheelEventHandler<HTMLElement>; onAnimationStart?: AnimationEventHandler<HTMLElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLElement>; onAnimationEnd?: AnimationEventHandler<HTMLElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLElement>; onAnimationIteration?: AnimationEventHandler<HTMLElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLElement>; onTransitionEnd?: TransitionEventHandler<HTMLElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLElement>; }"
        }
      },
      "export": {
        "path": "@mui/material/SwipeableDrawer",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Switch#Switch": {
      "id": "@mui/material/Switch#Switch",
      "name": "Switch",
      "props": {
        "checked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary",
            "default"
          ]
        },
        "edge": {
          "type": "custom",
          "typeName": "false | \"end\" | \"start\""
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputHTMLAttributes<HTMLInputElement>"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "checkedIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; edgeStart?: string; edgeEnd?: string; switchBase?: string; colorPrimary?: string; colorSecondary?: string; sizeSmall?: string; sizeMedium?: string; checked?: string; disabled?: string; input?: string; thumb?: string; track?: string; }"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "type": {
          "type": "custom",
          "typeName": "\"number\" | \"button\" | \"search\" | \"time\" | \"image\" | \"text\" | \"hidden\" | \"color\" | (string & {}) | \"checkbox\" | \"radio\" | \"tel\" | \"url\" | \"email\" | \"date\" | \"reset\" | \"submit\" | \"datetime-local\" | \"file\" | \"month\" | \"password\" | \"range\" | \"week\""
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        }
      },
      "export": {
        "path": "@mui/material/Switch",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/FormControlLabel#FormControlLabel",
          "@mui/material/ListItem#ListItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Tab#Tab": {
      "id": "@mui/material/Tab#Tab",
      "name": "Tab",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "value": {
          "type": "any"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "icon": {
          "type": "custom",
          "typeName": "string | ReactElement<any, string | JSXElementConstructor<any>>"
        },
        "iconPosition": {
          "type": "string-union",
          "values": [
            "bottom",
            "top",
            "end",
            "start"
          ]
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "wrapped": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "null"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; labelIcon?: string; textColorInherit?: string; textColorPrimary?: string; textColorSecondary?: string; selected?: string; disabled?: string; fullWidth?: string; wrapped?: string; iconWrapper?: string; }"
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "tabIndex": {
          "type": "number"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Tab",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Tabs#Tabs",
          "@mui/lab/TabList#TabList"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Phone#PhoneIcon",
          "@mui/icons-material/PersonPin#PersonPinIcon",
          "@mui/icons-material/PhoneMissed#PhoneMissedIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Table#Table": {
      "id": "@mui/material/Table#Table",
      "name": "Table",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "stickyHeader": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; stickyHeader?: string; }"
        },
        "padding": {
          "type": "string-union",
          "values": [
            "checkbox",
            "none",
            "normal"
          ]
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "border": {
          "type": "number"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bgcolor": {
          "type": "string"
        },
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right"
          ]
        },
        "cellPadding": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cellSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "frame": {
          "type": "boolean"
        },
        "rules": {
          "type": "string-union",
          "values": [
            "all",
            "columns",
            "none",
            "rows",
            "groups"
          ]
        }
      },
      "export": {
        "path": "@mui/material/Table",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/TableContainer#TableContainer",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/material/TableHead#TableHead",
          "@mui/material/TableBody#TableBody",
          "@mui/material/TableFooter#TableFooter"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TableBody#TableBody": {
      "id": "@mui/material/TableBody#TableBody",
      "name": "TableBody",
      "props": {
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/TableBody",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Table#Table"
        ],
        "exclusiveParent": "@mui/material/Table#Table"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TableCell#TableCell": {
      "id": "@mui/material/TableCell#TableCell",
      "name": "TableCell",
      "props": {
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right",
            "inherit",
            "justify"
          ]
        },
        "component": {
          "type": "custom",
          "typeName": "\"div\" | \"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"figcaption\" | \"figure\" | \"footer\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"i\" | \"kbd\" | \"keygen\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"p\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"td\" | \"th\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<TableCellBaseProps>"
        },
        "scope": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "colSpan": {
          "type": "number"
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "padding": {
          "type": "string-union",
          "values": [
            "checkbox",
            "none",
            "normal"
          ]
        },
        "sortDirection": {
          "type": "custom",
          "typeName": "false | \"desc\" | \"asc\""
        },
        "id": {
          "type": "string"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "body",
            "footer",
            "head"
          ]
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "rowSpan": {
          "type": "number"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; head?: string; body?: string; footer?: string; sizeSmall?: string; sizeMedium?: string; paddingCheckbox?: string; paddingNone?: string; alignLeft?: string; alignCenter?: string; alignRight?: string; alignJustify?: string; stickyHeader?: string; }"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "className": {
          "type": "string"
        },
        "abbr": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "headers": {
          "type": "string"
        },
        "valign": {
          "type": "string-union",
          "values": [
            "bottom",
            "top",
            "baseline",
            "middle"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/TableCell",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/TableRow#TableRow"
        ],
        "exclusiveParent": "@mui/material/TableRow#TableRow",
        "exclusiveChildren": [
          "@mui/material/TableSortLabel#TableSortLabel"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TableContainer#TableContainer": {
      "id": "@mui/material/TableContainer#TableContainer",
      "name": "TableContainer",
      "props": {
        "component": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/TableContainer",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Paper#Paper"
        ],
        "exclusiveParent": "@mui/material/Paper#Paper"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TableFooter#TableFooter": {
      "id": "@mui/material/TableFooter#TableFooter",
      "name": "TableFooter",
      "props": {
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/TableFooter",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Table#Table"
        ],
        "exclusiveParent": "@mui/material/Table#Table"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TableHead#TableHead": {
      "id": "@mui/material/TableHead#TableHead",
      "name": "TableHead",
      "props": {
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/TableHead",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Table#Table"
        ],
        "exclusiveParent": "@mui/material/Table#Table"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TablePagination#TablePagination": {
      "id": "@mui/material/TablePagination#TablePagination",
      "name": "TablePagination",
      "props": {
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "count": {
          "type": "number"
        },
        "page": {
          "type": "number"
        },
        "rowsPerPage": {
          "type": "number"
        },
        "rowsPerPageOptions": {
          "type": "custom",
          "typeName": "readonly (number | { value: number; label: string; })[]"
        },
        "colSpan": {
          "type": "number"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ actions?: { firstButton?: Partial<IconButtonProps>; lastButton?: Partial<IconButtonProps>; nextButton?: Partial<IconButtonProps>; previousButton?: Partial<IconButtonProps>; firstButtonIcon?: Partial<SvgIconProps>; lastButtonIcon?: Partial<SvgIconProps>; nextButtonIcon?: Partial<SvgIconProps>; previousButtonIcon?: Partial<SvgIconProps>; }; select?: Partial<SelectProps>; }"
        },
        "ActionsComponent": {
          "type": "custom",
          "typeName": "\"object\" | \"div\" | \"abbr\" | \"address\" | \"article\" | \"aside\" | \"b\" | \"bdi\" | \"bdo\" | \"big\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"dd\" | \"dfn\" | \"dt\" | \"em\" | \"embed\" | \"figcaption\" | \"figure\" | \"footer\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"kbd\" | \"keygen\" | \"legend\" | \"main\" | \"mark\" | \"menu\" | \"menuitem\" | \"nav\" | \"noindex\" | \"noscript\" | \"p\" | \"picture\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"section\" | \"small\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"tbody\" | \"td\" | \"tfoot\" | \"th\" | \"thead\" | \"tr\" | \"u\" | \"var\" | \"wbr\" | \"webview\" | ComponentType<TablePaginationActionsProps>"
        },
        "backIconButtonProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<IconButtonClasses> & Partial<ClassNameMap<never>>; color?: OverridableStringUnion<\"inherit\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\" | \"default\", IconButtonPropsColorOverrides>; disabled?: boolean; disableFocusRipple?: boolean; edge?: false | \"end\" | \"start\"; size?: OverridableStringUnion<\"small\" | \"medium\" | \"large\", IconButtonPropsSizeOverrides>; sx?: SxProps<Theme>; tabIndex?: number; action?: Ref<ButtonBaseActions>; centerRipple?: boolean; disableRipple?: boolean; disableTouchRipple?: boolean; focusRipple?: boolean; focusVisibleClassName?: string; LinkComponent?: ElementType<any, keyof IntrinsicElements>; onFocusVisible?: FocusEventHandler<any>; TouchRippleProps?: Partial<TouchRippleProps>; touchRippleRef?: Ref<TouchRippleActions>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLButtonElement>; ref?: Ref<HTMLButtonElement>; form?: string; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLButtonElement>; onCopyCapture?: ClipboardEventHandler<HTMLButtonElement>; onCut?: ClipboardEventHandler<HTMLButtonElement>; onCutCapture?: ClipboardEventHandler<HTMLButtonElement>; onPaste?: ClipboardEventHandler<HTMLButtonElement>; onPasteCapture?: ClipboardEventHandler<HTMLButtonElement>; onCompositionEnd?: CompositionEventHandler<HTMLButtonElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionStart?: CompositionEventHandler<HTMLButtonElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdate?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLButtonElement>; onFocus?: FocusEventHandler<HTMLButtonElement>; onFocusCapture?: FocusEventHandler<HTMLButtonElement>; onBlur?: FocusEventHandler<HTMLButtonElement>; onBlurCapture?: FocusEventHandler<HTMLButtonElement>; onChangeCapture?: FormEventHandler<HTMLButtonElement>; onBeforeInput?: FormEventHandler<HTMLButtonElement>; onBeforeInputCapture?: FormEventHandler<HTMLButtonElement>; onInput?: FormEventHandler<HTMLButtonElement>; onInputCapture?: FormEventHandler<HTMLButtonElement>; onReset?: FormEventHandler<HTMLButtonElement>; onResetCapture?: FormEventHandler<HTMLButtonElement>; onSubmit?: FormEventHandler<HTMLButtonElement>; onSubmitCapture?: FormEventHandler<HTMLButtonElement>; onInvalid?: FormEventHandler<HTMLButtonElement>; onInvalidCapture?: FormEventHandler<HTMLButtonElement>; onLoad?: ReactEventHandler<HTMLButtonElement>; onLoadCapture?: ReactEventHandler<HTMLButtonElement>; onError?: ReactEventHandler<HTMLButtonElement>; onErrorCapture?: ReactEventHandler<HTMLButtonElement>; onKeyDown?: KeyboardEventHandler<HTMLButtonElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyPress?: KeyboardEventHandler<HTMLButtonElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyUp?: KeyboardEventHandler<HTMLButtonElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLButtonElement>; onAbort?: ReactEventHandler<HTMLButtonElement>; onAbortCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlay?: ReactEventHandler<HTMLButtonElement>; onCanPlayCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlayThrough?: ReactEventHandler<HTMLButtonElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLButtonElement>; onDurationChange?: ReactEventHandler<HTMLButtonElement>; onDurationChangeCapture?: ReactEventHandler<HTMLButtonElement>; onEmptied?: ReactEventHandler<HTMLButtonElement>; onEmptiedCapture?: ReactEventHandler<HTMLButtonElement>; onEncrypted?: ReactEventHandler<HTMLButtonElement>; onEncryptedCapture?: ReactEventHandler<HTMLButtonElement>; onEnded?: ReactEventHandler<HTMLButtonElement>; onEndedCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedData?: ReactEventHandler<HTMLButtonElement>; onLoadedDataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadata?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadStart?: ReactEventHandler<HTMLButtonElement>; onLoadStartCapture?: ReactEventHandler<HTMLButtonElement>; onPause?: ReactEventHandler<HTMLButtonElement>; onPauseCapture?: ReactEventHandler<HTMLButtonElement>; onPlay?: ReactEventHandler<HTMLButtonElement>; onPlayCapture?: ReactEventHandler<HTMLButtonElement>; onPlaying?: ReactEventHandler<HTMLButtonElement>; onPlayingCapture?: ReactEventHandler<HTMLButtonElement>; onProgress?: ReactEventHandler<HTMLButtonElement>; onProgressCapture?: ReactEventHandler<HTMLButtonElement>; onRateChange?: ReactEventHandler<HTMLButtonElement>; onRateChangeCapture?: ReactEventHandler<HTMLButtonElement>; onResize?: ReactEventHandler<HTMLButtonElement>; onResizeCapture?: ReactEventHandler<HTMLButtonElement>; onSeeked?: ReactEventHandler<HTMLButtonElement>; onSeekedCapture?: ReactEventHandler<HTMLButtonElement>; onSeeking?: ReactEventHandler<HTMLButtonElement>; onSeekingCapture?: ReactEventHandler<HTMLButtonElement>; onStalled?: ReactEventHandler<HTMLButtonElement>; onStalledCapture?: ReactEventHandler<HTMLButtonElement>; onSuspend?: ReactEventHandler<HTMLButtonElement>; onSuspendCapture?: ReactEventHandler<HTMLButtonElement>; onTimeUpdate?: ReactEventHandler<HTMLButtonElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLButtonElement>; onVolumeChange?: ReactEventHandler<HTMLButtonElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLButtonElement>; onWaiting?: ReactEventHandler<HTMLButtonElement>; onWaitingCapture?: ReactEventHandler<HTMLButtonElement>; onAuxClick?: MouseEventHandler<HTMLButtonElement>; onAuxClickCapture?: MouseEventHandler<HTMLButtonElement>; onClick?: MouseEventHandler<HTMLButtonElement>; onClickCapture?: MouseEventHandler<HTMLButtonElement>; onContextMenu?: MouseEventHandler<HTMLButtonElement>; onContextMenuCapture?: MouseEventHandler<HTMLButtonElement>; onDoubleClick?: MouseEventHandler<HTMLButtonElement>; onDoubleClickCapture?: MouseEventHandler<HTMLButtonElement>; onDrag?: DragEventHandler<HTMLButtonElement>; onDragCapture?: DragEventHandler<HTMLButtonElement>; onDragEnd?: DragEventHandler<HTMLButtonElement>; onDragEndCapture?: DragEventHandler<HTMLButtonElement>; onDragEnter?: DragEventHandler<HTMLButtonElement>; onDragEnterCapture?: DragEventHandler<HTMLButtonElement>; onDragExit?: DragEventHandler<HTMLButtonElement>; onDragExitCapture?: DragEventHandler<HTMLButtonElement>; onDragLeave?: DragEventHandler<HTMLButtonElement>; onDragLeaveCapture?: DragEventHandler<HTMLButtonElement>; onDragOver?: DragEventHandler<HTMLButtonElement>; onDragOverCapture?: DragEventHandler<HTMLButtonElement>; onDragStart?: DragEventHandler<HTMLButtonElement>; onDragStartCapture?: DragEventHandler<HTMLButtonElement>; onDrop?: DragEventHandler<HTMLButtonElement>; onDropCapture?: DragEventHandler<HTMLButtonElement>; onMouseDown?: MouseEventHandler<HTMLButtonElement>; onMouseDownCapture?: MouseEventHandler<HTMLButtonElement>; onMouseEnter?: MouseEventHandler<HTMLButtonElement>; onMouseLeave?: MouseEventHandler<HTMLButtonElement>; onMouseMove?: MouseEventHandler<HTMLButtonElement>; onMouseMoveCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOut?: MouseEventHandler<HTMLButtonElement>; onMouseOutCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOver?: MouseEventHandler<HTMLButtonElement>; onMouseOverCapture?: MouseEventHandler<HTMLButtonElement>; onMouseUp?: MouseEventHandler<HTMLButtonElement>; onMouseUpCapture?: MouseEventHandler<HTMLButtonElement>; onSelect?: ReactEventHandler<HTMLButtonElement>; onSelectCapture?: ReactEventHandler<HTMLButtonElement>; onTouchCancel?: TouchEventHandler<HTMLButtonElement>; onTouchCancelCapture?: TouchEventHandler<HTMLButtonElement>; onTouchEnd?: TouchEventHandler<HTMLButtonElement>; onTouchEndCapture?: TouchEventHandler<HTMLButtonElement>; onTouchMove?: TouchEventHandler<HTMLButtonElement>; onTouchMoveCapture?: TouchEventHandler<HTMLButtonElement>; onTouchStart?: TouchEventHandler<HTMLButtonElement>; onTouchStartCapture?: TouchEventHandler<HTMLButtonElement>; onPointerDown?: PointerEventHandler<HTMLButtonElement>; onPointerDownCapture?: PointerEventHandler<HTMLButtonElement>; onPointerMove?: PointerEventHandler<HTMLButtonElement>; onPointerMoveCapture?: PointerEventHandler<HTMLButtonElement>; onPointerUp?: PointerEventHandler<HTMLButtonElement>; onPointerUpCapture?: PointerEventHandler<HTMLButtonElement>; onPointerCancel?: PointerEventHandler<HTMLButtonElement>; onPointerCancelCapture?: PointerEventHandler<HTMLButtonElement>; onPointerEnter?: PointerEventHandler<HTMLButtonElement>; onPointerLeave?: PointerEventHandler<HTMLButtonElement>; onPointerOver?: PointerEventHandler<HTMLButtonElement>; onPointerOverCapture?: PointerEventHandler<HTMLButtonElement>; onPointerOut?: PointerEventHandler<HTMLButtonElement>; onPointerOutCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onScroll?: UIEventHandler<HTMLButtonElement>; onScrollCapture?: UIEventHandler<HTMLButtonElement>; onWheel?: WheelEventHandler<HTMLButtonElement>; onWheelCapture?: WheelEventHandler<HTMLButtonElement>; onAnimationStart?: AnimationEventHandler<HTMLButtonElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationEnd?: AnimationEventHandler<HTMLButtonElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationIteration?: AnimationEventHandler<HTMLButtonElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLButtonElement>; onTransitionEnd?: TransitionEventHandler<HTMLButtonElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLButtonElement>; type?: \"button\" | \"reset\" | \"submit\"; formAction?: string; formEncType?: string; formMethod?: string; formNoValidate?: boolean; formTarget?: string; name?: string; value?: string | number | readonly string[]; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; toolbar?: string; spacer?: string; selectLabel?: string; selectRoot?: string; select?: string; selectIcon?: string; input?: string; menuItem?: string; displayedRows?: string; actions?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "getItemAriaLabel": {
          "type": "custom",
          "typeName": "(type: \"first\" | \"last\" | \"next\" | \"previous\") => string"
        },
        "labelDisplayedRows": {
          "type": "custom",
          "typeName": "(paginationInfo: LabelDisplayedRowsArgs) => ReactNode"
        },
        "labelRowsPerPage": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "nextIconButtonProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<IconButtonClasses> & Partial<ClassNameMap<never>>; color?: OverridableStringUnion<\"inherit\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\" | \"default\", IconButtonPropsColorOverrides>; disabled?: boolean; disableFocusRipple?: boolean; edge?: false | \"end\" | \"start\"; size?: OverridableStringUnion<\"small\" | \"medium\" | \"large\", IconButtonPropsSizeOverrides>; sx?: SxProps<Theme>; tabIndex?: number; action?: Ref<ButtonBaseActions>; centerRipple?: boolean; disableRipple?: boolean; disableTouchRipple?: boolean; focusRipple?: boolean; focusVisibleClassName?: string; LinkComponent?: ElementType<any, keyof IntrinsicElements>; onFocusVisible?: FocusEventHandler<any>; TouchRippleProps?: Partial<TouchRippleProps>; touchRippleRef?: Ref<TouchRippleActions>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLButtonElement>; ref?: Ref<HTMLButtonElement>; form?: string; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLButtonElement>; onCopyCapture?: ClipboardEventHandler<HTMLButtonElement>; onCut?: ClipboardEventHandler<HTMLButtonElement>; onCutCapture?: ClipboardEventHandler<HTMLButtonElement>; onPaste?: ClipboardEventHandler<HTMLButtonElement>; onPasteCapture?: ClipboardEventHandler<HTMLButtonElement>; onCompositionEnd?: CompositionEventHandler<HTMLButtonElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionStart?: CompositionEventHandler<HTMLButtonElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdate?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLButtonElement>; onFocus?: FocusEventHandler<HTMLButtonElement>; onFocusCapture?: FocusEventHandler<HTMLButtonElement>; onBlur?: FocusEventHandler<HTMLButtonElement>; onBlurCapture?: FocusEventHandler<HTMLButtonElement>; onChangeCapture?: FormEventHandler<HTMLButtonElement>; onBeforeInput?: FormEventHandler<HTMLButtonElement>; onBeforeInputCapture?: FormEventHandler<HTMLButtonElement>; onInput?: FormEventHandler<HTMLButtonElement>; onInputCapture?: FormEventHandler<HTMLButtonElement>; onReset?: FormEventHandler<HTMLButtonElement>; onResetCapture?: FormEventHandler<HTMLButtonElement>; onSubmit?: FormEventHandler<HTMLButtonElement>; onSubmitCapture?: FormEventHandler<HTMLButtonElement>; onInvalid?: FormEventHandler<HTMLButtonElement>; onInvalidCapture?: FormEventHandler<HTMLButtonElement>; onLoad?: ReactEventHandler<HTMLButtonElement>; onLoadCapture?: ReactEventHandler<HTMLButtonElement>; onError?: ReactEventHandler<HTMLButtonElement>; onErrorCapture?: ReactEventHandler<HTMLButtonElement>; onKeyDown?: KeyboardEventHandler<HTMLButtonElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyPress?: KeyboardEventHandler<HTMLButtonElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyUp?: KeyboardEventHandler<HTMLButtonElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLButtonElement>; onAbort?: ReactEventHandler<HTMLButtonElement>; onAbortCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlay?: ReactEventHandler<HTMLButtonElement>; onCanPlayCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlayThrough?: ReactEventHandler<HTMLButtonElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLButtonElement>; onDurationChange?: ReactEventHandler<HTMLButtonElement>; onDurationChangeCapture?: ReactEventHandler<HTMLButtonElement>; onEmptied?: ReactEventHandler<HTMLButtonElement>; onEmptiedCapture?: ReactEventHandler<HTMLButtonElement>; onEncrypted?: ReactEventHandler<HTMLButtonElement>; onEncryptedCapture?: ReactEventHandler<HTMLButtonElement>; onEnded?: ReactEventHandler<HTMLButtonElement>; onEndedCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedData?: ReactEventHandler<HTMLButtonElement>; onLoadedDataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadata?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadStart?: ReactEventHandler<HTMLButtonElement>; onLoadStartCapture?: ReactEventHandler<HTMLButtonElement>; onPause?: ReactEventHandler<HTMLButtonElement>; onPauseCapture?: ReactEventHandler<HTMLButtonElement>; onPlay?: ReactEventHandler<HTMLButtonElement>; onPlayCapture?: ReactEventHandler<HTMLButtonElement>; onPlaying?: ReactEventHandler<HTMLButtonElement>; onPlayingCapture?: ReactEventHandler<HTMLButtonElement>; onProgress?: ReactEventHandler<HTMLButtonElement>; onProgressCapture?: ReactEventHandler<HTMLButtonElement>; onRateChange?: ReactEventHandler<HTMLButtonElement>; onRateChangeCapture?: ReactEventHandler<HTMLButtonElement>; onResize?: ReactEventHandler<HTMLButtonElement>; onResizeCapture?: ReactEventHandler<HTMLButtonElement>; onSeeked?: ReactEventHandler<HTMLButtonElement>; onSeekedCapture?: ReactEventHandler<HTMLButtonElement>; onSeeking?: ReactEventHandler<HTMLButtonElement>; onSeekingCapture?: ReactEventHandler<HTMLButtonElement>; onStalled?: ReactEventHandler<HTMLButtonElement>; onStalledCapture?: ReactEventHandler<HTMLButtonElement>; onSuspend?: ReactEventHandler<HTMLButtonElement>; onSuspendCapture?: ReactEventHandler<HTMLButtonElement>; onTimeUpdate?: ReactEventHandler<HTMLButtonElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLButtonElement>; onVolumeChange?: ReactEventHandler<HTMLButtonElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLButtonElement>; onWaiting?: ReactEventHandler<HTMLButtonElement>; onWaitingCapture?: ReactEventHandler<HTMLButtonElement>; onAuxClick?: MouseEventHandler<HTMLButtonElement>; onAuxClickCapture?: MouseEventHandler<HTMLButtonElement>; onClick?: MouseEventHandler<HTMLButtonElement>; onClickCapture?: MouseEventHandler<HTMLButtonElement>; onContextMenu?: MouseEventHandler<HTMLButtonElement>; onContextMenuCapture?: MouseEventHandler<HTMLButtonElement>; onDoubleClick?: MouseEventHandler<HTMLButtonElement>; onDoubleClickCapture?: MouseEventHandler<HTMLButtonElement>; onDrag?: DragEventHandler<HTMLButtonElement>; onDragCapture?: DragEventHandler<HTMLButtonElement>; onDragEnd?: DragEventHandler<HTMLButtonElement>; onDragEndCapture?: DragEventHandler<HTMLButtonElement>; onDragEnter?: DragEventHandler<HTMLButtonElement>; onDragEnterCapture?: DragEventHandler<HTMLButtonElement>; onDragExit?: DragEventHandler<HTMLButtonElement>; onDragExitCapture?: DragEventHandler<HTMLButtonElement>; onDragLeave?: DragEventHandler<HTMLButtonElement>; onDragLeaveCapture?: DragEventHandler<HTMLButtonElement>; onDragOver?: DragEventHandler<HTMLButtonElement>; onDragOverCapture?: DragEventHandler<HTMLButtonElement>; onDragStart?: DragEventHandler<HTMLButtonElement>; onDragStartCapture?: DragEventHandler<HTMLButtonElement>; onDrop?: DragEventHandler<HTMLButtonElement>; onDropCapture?: DragEventHandler<HTMLButtonElement>; onMouseDown?: MouseEventHandler<HTMLButtonElement>; onMouseDownCapture?: MouseEventHandler<HTMLButtonElement>; onMouseEnter?: MouseEventHandler<HTMLButtonElement>; onMouseLeave?: MouseEventHandler<HTMLButtonElement>; onMouseMove?: MouseEventHandler<HTMLButtonElement>; onMouseMoveCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOut?: MouseEventHandler<HTMLButtonElement>; onMouseOutCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOver?: MouseEventHandler<HTMLButtonElement>; onMouseOverCapture?: MouseEventHandler<HTMLButtonElement>; onMouseUp?: MouseEventHandler<HTMLButtonElement>; onMouseUpCapture?: MouseEventHandler<HTMLButtonElement>; onSelect?: ReactEventHandler<HTMLButtonElement>; onSelectCapture?: ReactEventHandler<HTMLButtonElement>; onTouchCancel?: TouchEventHandler<HTMLButtonElement>; onTouchCancelCapture?: TouchEventHandler<HTMLButtonElement>; onTouchEnd?: TouchEventHandler<HTMLButtonElement>; onTouchEndCapture?: TouchEventHandler<HTMLButtonElement>; onTouchMove?: TouchEventHandler<HTMLButtonElement>; onTouchMoveCapture?: TouchEventHandler<HTMLButtonElement>; onTouchStart?: TouchEventHandler<HTMLButtonElement>; onTouchStartCapture?: TouchEventHandler<HTMLButtonElement>; onPointerDown?: PointerEventHandler<HTMLButtonElement>; onPointerDownCapture?: PointerEventHandler<HTMLButtonElement>; onPointerMove?: PointerEventHandler<HTMLButtonElement>; onPointerMoveCapture?: PointerEventHandler<HTMLButtonElement>; onPointerUp?: PointerEventHandler<HTMLButtonElement>; onPointerUpCapture?: PointerEventHandler<HTMLButtonElement>; onPointerCancel?: PointerEventHandler<HTMLButtonElement>; onPointerCancelCapture?: PointerEventHandler<HTMLButtonElement>; onPointerEnter?: PointerEventHandler<HTMLButtonElement>; onPointerLeave?: PointerEventHandler<HTMLButtonElement>; onPointerOver?: PointerEventHandler<HTMLButtonElement>; onPointerOverCapture?: PointerEventHandler<HTMLButtonElement>; onPointerOut?: PointerEventHandler<HTMLButtonElement>; onPointerOutCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onScroll?: UIEventHandler<HTMLButtonElement>; onScrollCapture?: UIEventHandler<HTMLButtonElement>; onWheel?: WheelEventHandler<HTMLButtonElement>; onWheelCapture?: WheelEventHandler<HTMLButtonElement>; onAnimationStart?: AnimationEventHandler<HTMLButtonElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationEnd?: AnimationEventHandler<HTMLButtonElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationIteration?: AnimationEventHandler<HTMLButtonElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLButtonElement>; onTransitionEnd?: TransitionEventHandler<HTMLButtonElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLButtonElement>; type?: \"button\" | \"reset\" | \"submit\"; formAction?: string; formEncType?: string; formMethod?: string; formNoValidate?: boolean; formTarget?: string; name?: string; value?: string | number | readonly string[]; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "SelectProps": {
          "type": "custom",
          "typeName": "Partial<FilledSelectProps & BaseSelectProps<unknown>> | Partial<StandardSelectProps & BaseSelectProps<unknown>> | Partial<OutlinedSelectProps & BaseSelectProps<unknown>>"
        },
        "showFirstButton": {
          "type": "boolean"
        },
        "showLastButton": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ actions?: TablePaginationActionsSlots; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "body",
            "footer",
            "head"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        },
        "abbr": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "padding": {
          "type": "string-union",
          "values": [
            "checkbox",
            "none",
            "normal"
          ]
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right",
            "inherit",
            "justify"
          ]
        },
        "headers": {
          "type": "string"
        },
        "rowSpan": {
          "type": "number"
        },
        "scope": {
          "type": "string"
        },
        "valign": {
          "type": "string-union",
          "values": [
            "bottom",
            "top",
            "baseline",
            "middle"
          ]
        },
        "sortDirection": {
          "type": "custom",
          "typeName": "false | \"desc\" | \"asc\""
        }
      },
      "export": {
        "path": "@mui/material/TablePagination",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Paper#Paper",
          "@mui/material/TableRow#TableRow"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TableRow#TableRow": {
      "id": "@mui/material/TableRow#TableRow",
      "name": "TableRow",
      "props": {
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "hover": {
          "type": "boolean"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "tabIndex": {
          "type": "number"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "selected": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; selected?: string; hover?: string; head?: string; footer?: string; }"
        },
        "className": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/TableRow",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/TableHead#TableHead",
          "@mui/material/TableBody#TableBody",
          "@mui/material/TableFooter#TableFooter"
        ],
        "exclusiveChildren": [
          "@mui/material/TableCell#TableCell"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TableSortLabel#TableSortLabel": {
      "id": "@mui/material/TableSortLabel#TableSortLabel",
      "name": "TableSortLabel",
      "props": {
        "active": {
          "type": "boolean"
        },
        "direction": {
          "type": "string-union",
          "values": [
            "desc",
            "asc"
          ]
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; active?: string; icon?: string; iconDirectionDesc?: string; iconDirectionAsc?: string; }"
        },
        "hideSortIcon": {
          "type": "boolean"
        },
        "IconComponent": {
          "type": "custom",
          "typeName": "((props: { className: string; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: { className: string; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "tabIndex": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/TableSortLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/TableCell#TableCell"
        ],
        "exclusiveParent": "@mui/material/TableCell#TableCell"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Tabs#Tabs": {
      "id": "@mui/material/Tabs#Tabs",
      "name": "Tabs",
      "props": {
        "value": {
          "type": "any"
        },
        "indicatorColor": {
          "type": "string-union",
          "values": [
            "primary",
            "secondary"
          ]
        },
        "textColor": {
          "type": "string-union",
          "values": [
            "inherit",
            "primary",
            "secondary"
          ]
        },
        "variant": {
          "type": "string-union",
          "values": [
            "standard",
            "fullWidth",
            "scrollable"
          ]
        },
        "selectionFollowsFocus": {
          "type": "boolean"
        },
        "centered": {
          "type": "boolean"
        },
        "TabIndicatorProps": {
          "type": "custom",
          "typeName": "HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme>; }"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "scrollButtons": {
          "type": "custom",
          "typeName": "boolean | \"auto\""
        },
        "allowScrollButtonsMobile": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "horizontal",
            "vertical"
          ]
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: TabsActions) => void) | RefObject<TabsActions>"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; vertical?: string; flexContainer?: string; flexContainerVertical?: string; centered?: string; scroller?: string; fixed?: string; scrollableX?: string; scrollableY?: string; hideScrollbar?: string; scrollButtons?: string; scrollButtonsHideMobile?: string; indicator?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ StartScrollButtonIcon?: ElementType<any, keyof IntrinsicElements>; EndScrollButtonIcon?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ startScrollButtonIcon?: SlotComponentProps<OverridableComponent<SvgIconTypeMap<{}, \"svg\">> & { muiName: string; }, TabsStartScrollButtonIconSlotPropsOverrides, TabsOwnerState>; endScrollButtonIcon?: SlotComponentProps<OverridableComponent<SvgIconTypeMap<{}, \"svg\">> & { muiName: string; }, TabsEndScrollButtonIconSlotPropsOverrides, TabsOwnerState>; }"
        },
        "ScrollButtonComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "TabScrollButtonProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<TabScrollButtonClasses>; slots?: { StartScrollButtonIcon?: ElementType<any, keyof IntrinsicElements>; EndScrollButtonIcon?: ElementType<any, keyof IntrinsicElements>; }; slotProps?: { startScrollButtonIcon?: SlotComponentProps<OverridableComponent<SvgIconTypeMap<{}, \"svg\">> & { muiName: string; }, TabScrollButtonStartIconSlotPropsOverrides, TabScrollButtonOwnerState>; endScrollButtonIcon?: SlotComponentProps<OverridableComponent<SvgIconTypeMap<{}, \"svg\">> & { muiName: string; }, TabScrollButtonEndIconSlotPropsOverrides, TabScrollButtonOwnerState>; }; direction?: \"left\" | \"right\"; disabled?: boolean; orientation?: \"horizontal\" | \"vertical\"; sx?: SxProps<Theme>; action?: Ref<ButtonBaseActions>; centerRipple?: boolean; disableRipple?: boolean; disableTouchRipple?: boolean; focusRipple?: boolean; focusVisibleClassName?: string; LinkComponent?: ElementType<any, keyof IntrinsicElements>; onFocusVisible?: FocusEventHandler<any>; tabIndex?: number; TouchRippleProps?: Partial<TouchRippleProps>; touchRippleRef?: Ref<TouchRippleActions>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLButtonElement>; ref?: Ref<HTMLButtonElement>; form?: string; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLButtonElement>; onCopyCapture?: ClipboardEventHandler<HTMLButtonElement>; onCut?: ClipboardEventHandler<HTMLButtonElement>; onCutCapture?: ClipboardEventHandler<HTMLButtonElement>; onPaste?: ClipboardEventHandler<HTMLButtonElement>; onPasteCapture?: ClipboardEventHandler<HTMLButtonElement>; onCompositionEnd?: CompositionEventHandler<HTMLButtonElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionStart?: CompositionEventHandler<HTMLButtonElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdate?: CompositionEventHandler<HTMLButtonElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLButtonElement>; onFocus?: FocusEventHandler<HTMLButtonElement>; onFocusCapture?: FocusEventHandler<HTMLButtonElement>; onBlur?: FocusEventHandler<HTMLButtonElement>; onBlurCapture?: FocusEventHandler<HTMLButtonElement>; onChangeCapture?: FormEventHandler<HTMLButtonElement>; onBeforeInput?: FormEventHandler<HTMLButtonElement>; onBeforeInputCapture?: FormEventHandler<HTMLButtonElement>; onInput?: FormEventHandler<HTMLButtonElement>; onInputCapture?: FormEventHandler<HTMLButtonElement>; onReset?: FormEventHandler<HTMLButtonElement>; onResetCapture?: FormEventHandler<HTMLButtonElement>; onSubmit?: FormEventHandler<HTMLButtonElement>; onSubmitCapture?: FormEventHandler<HTMLButtonElement>; onInvalid?: FormEventHandler<HTMLButtonElement>; onInvalidCapture?: FormEventHandler<HTMLButtonElement>; onLoad?: ReactEventHandler<HTMLButtonElement>; onLoadCapture?: ReactEventHandler<HTMLButtonElement>; onError?: ReactEventHandler<HTMLButtonElement>; onErrorCapture?: ReactEventHandler<HTMLButtonElement>; onKeyDown?: KeyboardEventHandler<HTMLButtonElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyPress?: KeyboardEventHandler<HTMLButtonElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLButtonElement>; onKeyUp?: KeyboardEventHandler<HTMLButtonElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLButtonElement>; onAbort?: ReactEventHandler<HTMLButtonElement>; onAbortCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlay?: ReactEventHandler<HTMLButtonElement>; onCanPlayCapture?: ReactEventHandler<HTMLButtonElement>; onCanPlayThrough?: ReactEventHandler<HTMLButtonElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLButtonElement>; onDurationChange?: ReactEventHandler<HTMLButtonElement>; onDurationChangeCapture?: ReactEventHandler<HTMLButtonElement>; onEmptied?: ReactEventHandler<HTMLButtonElement>; onEmptiedCapture?: ReactEventHandler<HTMLButtonElement>; onEncrypted?: ReactEventHandler<HTMLButtonElement>; onEncryptedCapture?: ReactEventHandler<HTMLButtonElement>; onEnded?: ReactEventHandler<HTMLButtonElement>; onEndedCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedData?: ReactEventHandler<HTMLButtonElement>; onLoadedDataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadata?: ReactEventHandler<HTMLButtonElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLButtonElement>; onLoadStart?: ReactEventHandler<HTMLButtonElement>; onLoadStartCapture?: ReactEventHandler<HTMLButtonElement>; onPause?: ReactEventHandler<HTMLButtonElement>; onPauseCapture?: ReactEventHandler<HTMLButtonElement>; onPlay?: ReactEventHandler<HTMLButtonElement>; onPlayCapture?: ReactEventHandler<HTMLButtonElement>; onPlaying?: ReactEventHandler<HTMLButtonElement>; onPlayingCapture?: ReactEventHandler<HTMLButtonElement>; onProgress?: ReactEventHandler<HTMLButtonElement>; onProgressCapture?: ReactEventHandler<HTMLButtonElement>; onRateChange?: ReactEventHandler<HTMLButtonElement>; onRateChangeCapture?: ReactEventHandler<HTMLButtonElement>; onResize?: ReactEventHandler<HTMLButtonElement>; onResizeCapture?: ReactEventHandler<HTMLButtonElement>; onSeeked?: ReactEventHandler<HTMLButtonElement>; onSeekedCapture?: ReactEventHandler<HTMLButtonElement>; onSeeking?: ReactEventHandler<HTMLButtonElement>; onSeekingCapture?: ReactEventHandler<HTMLButtonElement>; onStalled?: ReactEventHandler<HTMLButtonElement>; onStalledCapture?: ReactEventHandler<HTMLButtonElement>; onSuspend?: ReactEventHandler<HTMLButtonElement>; onSuspendCapture?: ReactEventHandler<HTMLButtonElement>; onTimeUpdate?: ReactEventHandler<HTMLButtonElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLButtonElement>; onVolumeChange?: ReactEventHandler<HTMLButtonElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLButtonElement>; onWaiting?: ReactEventHandler<HTMLButtonElement>; onWaitingCapture?: ReactEventHandler<HTMLButtonElement>; onAuxClick?: MouseEventHandler<HTMLButtonElement>; onAuxClickCapture?: MouseEventHandler<HTMLButtonElement>; onClick?: MouseEventHandler<HTMLButtonElement>; onClickCapture?: MouseEventHandler<HTMLButtonElement>; onContextMenu?: MouseEventHandler<HTMLButtonElement>; onContextMenuCapture?: MouseEventHandler<HTMLButtonElement>; onDoubleClick?: MouseEventHandler<HTMLButtonElement>; onDoubleClickCapture?: MouseEventHandler<HTMLButtonElement>; onDrag?: DragEventHandler<HTMLButtonElement>; onDragCapture?: DragEventHandler<HTMLButtonElement>; onDragEnd?: DragEventHandler<HTMLButtonElement>; onDragEndCapture?: DragEventHandler<HTMLButtonElement>; onDragEnter?: DragEventHandler<HTMLButtonElement>; onDragEnterCapture?: DragEventHandler<HTMLButtonElement>; onDragExit?: DragEventHandler<HTMLButtonElement>; onDragExitCapture?: DragEventHandler<HTMLButtonElement>; onDragLeave?: DragEventHandler<HTMLButtonElement>; onDragLeaveCapture?: DragEventHandler<HTMLButtonElement>; onDragOver?: DragEventHandler<HTMLButtonElement>; onDragOverCapture?: DragEventHandler<HTMLButtonElement>; onDragStart?: DragEventHandler<HTMLButtonElement>; onDragStartCapture?: DragEventHandler<HTMLButtonElement>; onDrop?: DragEventHandler<HTMLButtonElement>; onDropCapture?: DragEventHandler<HTMLButtonElement>; onMouseDown?: MouseEventHandler<HTMLButtonElement>; onMouseDownCapture?: MouseEventHandler<HTMLButtonElement>; onMouseEnter?: MouseEventHandler<HTMLButtonElement>; onMouseLeave?: MouseEventHandler<HTMLButtonElement>; onMouseMove?: MouseEventHandler<HTMLButtonElement>; onMouseMoveCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOut?: MouseEventHandler<HTMLButtonElement>; onMouseOutCapture?: MouseEventHandler<HTMLButtonElement>; onMouseOver?: MouseEventHandler<HTMLButtonElement>; onMouseOverCapture?: MouseEventHandler<HTMLButtonElement>; onMouseUp?: MouseEventHandler<HTMLButtonElement>; onMouseUpCapture?: MouseEventHandler<HTMLButtonElement>; onSelect?: ReactEventHandler<HTMLButtonElement>; onSelectCapture?: ReactEventHandler<HTMLButtonElement>; onTouchCancel?: TouchEventHandler<HTMLButtonElement>; onTouchCancelCapture?: TouchEventHandler<HTMLButtonElement>; onTouchEnd?: TouchEventHandler<HTMLButtonElement>; onTouchEndCapture?: TouchEventHandler<HTMLButtonElement>; onTouchMove?: TouchEventHandler<HTMLButtonElement>; onTouchMoveCapture?: TouchEventHandler<HTMLButtonElement>; onTouchStart?: TouchEventHandler<HTMLButtonElement>; onTouchStartCapture?: TouchEventHandler<HTMLButtonElement>; onPointerDown?: PointerEventHandler<HTMLButtonElement>; onPointerDownCapture?: PointerEventHandler<HTMLButtonElement>; onPointerMove?: PointerEventHandler<HTMLButtonElement>; onPointerMoveCapture?: PointerEventHandler<HTMLButtonElement>; onPointerUp?: PointerEventHandler<HTMLButtonElement>; onPointerUpCapture?: PointerEventHandler<HTMLButtonElement>; onPointerCancel?: PointerEventHandler<HTMLButtonElement>; onPointerCancelCapture?: PointerEventHandler<HTMLButtonElement>; onPointerEnter?: PointerEventHandler<HTMLButtonElement>; onPointerLeave?: PointerEventHandler<HTMLButtonElement>; onPointerOver?: PointerEventHandler<HTMLButtonElement>; onPointerOverCapture?: PointerEventHandler<HTMLButtonElement>; onPointerOut?: PointerEventHandler<HTMLButtonElement>; onPointerOutCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCapture?: PointerEventHandler<HTMLButtonElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCapture?: PointerEventHandler<HTMLButtonElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLButtonElement>; onScroll?: UIEventHandler<HTMLButtonElement>; onScrollCapture?: UIEventHandler<HTMLButtonElement>; onWheel?: WheelEventHandler<HTMLButtonElement>; onWheelCapture?: WheelEventHandler<HTMLButtonElement>; onAnimationStart?: AnimationEventHandler<HTMLButtonElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationEnd?: AnimationEventHandler<HTMLButtonElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLButtonElement>; onAnimationIteration?: AnimationEventHandler<HTMLButtonElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLButtonElement>; onTransitionEnd?: TransitionEventHandler<HTMLButtonElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLButtonElement>; type?: \"button\" | \"reset\" | \"submit\"; formAction?: string; formEncType?: string; formMethod?: string; formNoValidate?: boolean; formTarget?: string; name?: string; value?: string | number | readonly string[]; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "visibleScrollbar": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Tabs",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/AppBar#AppBar",
          "@mui/material#Box"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/TextField#TextField": {
      "id": "@mui/material/TextField#TextField",
      "name": "TextField",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "InputProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<OutlinedInputClasses>; label?: ReactNode; notched?: boolean; sx?: SxProps<Theme>; className?: string; style?: CSSProperties; onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>; ref?: Ref<unknown>; slot?: string; title?: string; defaultChecked?: boolean; defaultValue?: unknown; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: OverridableStringUnion<\"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\", InputBasePropsColorOverrides>; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; 'aria-describedby'?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLInputElement | HTMLTextAreaElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; margin?: \"none\" | \"dense\"; disabled?: boolean; slots?: { root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }; type?: string; error?: boolean; size?: OverridableStringUnion<\"small\" | \"medium\", InputBasePropsSizeOverrides>; name?: string; value?: unknown; autoComplete?: string; placeholder?: string; readOnly?: boolean; required?: boolean; rows?: string | number; fullWidth?: boolean; endAdornment?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }; inputProps?: InputBaseComponentProps; inputRef?: Ref<any>; disableInjectingGlobalStyles?: boolean; inputComponent?: ElementType<InputBaseComponentProps, keyof IntrinsicElements>; multiline?: boolean; renderSuffix?: (state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode; maxRows?: string | number; minRows?: string | number; startAdornment?: ReactNode; }"
        },
        "placeholder": {
          "type": "string"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense",
            "normal"
          ]
        },
        "id": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "unknown"
        },
        "type": {
          "type": "custom",
          "typeName": "\"number\" | \"button\" | \"search\" | \"time\" | \"image\" | \"text\" | \"hidden\" | \"color\" | (string & {}) | \"checkbox\" | \"radio\" | \"tel\" | \"url\" | \"email\" | \"date\" | \"reset\" | \"submit\" | \"datetime-local\" | \"file\" | \"month\" | \"password\" | \"range\" | \"week\""
        },
        "variant": {
          "type": "custom",
          "typeName": "Variant"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "select": {
          "type": "boolean"
        },
        "color": {
          "type": "string-union",
          "values": [
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "unknown"
        },
        "SelectProps": {
          "type": "custom",
          "typeName": "Partial<FilledSelectProps & BaseSelectProps<unknown>> | Partial<StandardSelectProps & BaseSelectProps<unknown>> | Partial<OutlinedSelectProps & BaseSelectProps<unknown>>"
        },
        "helperText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "rows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "hiddenLabel": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "multiline": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "autoComplete": {
          "type": "string"
        },
        "focused": {
          "type": "boolean"
        },
        "maxRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "minRows": {
          "type": "custom",
          "typeName": "string | number"
        },
        "FormHelperTextProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<FormHelperTextClasses> & Partial<ClassNameMap<never>>; disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"outlined\" | \"filled\" | \"standard\", FormHelperTextPropsVariantOverrides>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLParagraphElement>; ref?: Ref<HTMLParagraphElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLParagraphElement>; onCopyCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCut?: ClipboardEventHandler<HTMLParagraphElement>; onCutCapture?: ClipboardEventHandler<HTMLParagraphElement>; onPaste?: ClipboardEventHandler<HTMLParagraphElement>; onPasteCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCompositionEnd?: CompositionEventHandler<HTMLParagraphElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStart?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdate?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLParagraphElement>; onFocus?: FocusEventHandler<HTMLParagraphElement>; onFocusCapture?: FocusEventHandler<HTMLParagraphElement>; onBlur?: FocusEventHandler<HTMLParagraphElement>; onBlurCapture?: FocusEventHandler<HTMLParagraphElement>; onChangeCapture?: FormEventHandler<HTMLParagraphElement>; onBeforeInput?: FormEventHandler<HTMLParagraphElement>; onBeforeInputCapture?: FormEventHandler<HTMLParagraphElement>; onInput?: FormEventHandler<HTMLParagraphElement>; onInputCapture?: FormEventHandler<HTMLParagraphElement>; onReset?: FormEventHandler<HTMLParagraphElement>; onResetCapture?: FormEventHandler<HTMLParagraphElement>; onSubmit?: FormEventHandler<HTMLParagraphElement>; onSubmitCapture?: FormEventHandler<HTMLParagraphElement>; onInvalid?: FormEventHandler<HTMLParagraphElement>; onInvalidCapture?: FormEventHandler<HTMLParagraphElement>; onLoad?: ReactEventHandler<HTMLParagraphElement>; onLoadCapture?: ReactEventHandler<HTMLParagraphElement>; onError?: ReactEventHandler<HTMLParagraphElement>; onErrorCapture?: ReactEventHandler<HTMLParagraphElement>; onKeyDown?: KeyboardEventHandler<HTMLParagraphElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPress?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUp?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLParagraphElement>; onAbort?: ReactEventHandler<HTMLParagraphElement>; onAbortCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlay?: ReactEventHandler<HTMLParagraphElement>; onCanPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThrough?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLParagraphElement>; onDurationChange?: ReactEventHandler<HTMLParagraphElement>; onDurationChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onEmptied?: ReactEventHandler<HTMLParagraphElement>; onEmptiedCapture?: ReactEventHandler<HTMLParagraphElement>; onEncrypted?: ReactEventHandler<HTMLParagraphElement>; onEncryptedCapture?: ReactEventHandler<HTMLParagraphElement>; onEnded?: ReactEventHandler<HTMLParagraphElement>; onEndedCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedData?: ReactEventHandler<HTMLParagraphElement>; onLoadedDataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadata?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadStart?: ReactEventHandler<HTMLParagraphElement>; onLoadStartCapture?: ReactEventHandler<HTMLParagraphElement>; onPause?: ReactEventHandler<HTMLParagraphElement>; onPauseCapture?: ReactEventHandler<HTMLParagraphElement>; onPlay?: ReactEventHandler<HTMLParagraphElement>; onPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onPlaying?: ReactEventHandler<HTMLParagraphElement>; onPlayingCapture?: ReactEventHandler<HTMLParagraphElement>; onProgress?: ReactEventHandler<HTMLParagraphElement>; onProgressCapture?: ReactEventHandler<HTMLParagraphElement>; onRateChange?: ReactEventHandler<HTMLParagraphElement>; onRateChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onResize?: ReactEventHandler<HTMLParagraphElement>; onResizeCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeked?: ReactEventHandler<HTMLParagraphElement>; onSeekedCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeking?: ReactEventHandler<HTMLParagraphElement>; onSeekingCapture?: ReactEventHandler<HTMLParagraphElement>; onStalled?: ReactEventHandler<HTMLParagraphElement>; onStalledCapture?: ReactEventHandler<HTMLParagraphElement>; onSuspend?: ReactEventHandler<HTMLParagraphElement>; onSuspendCapture?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdate?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLParagraphElement>; onVolumeChange?: ReactEventHandler<HTMLParagraphElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onWaiting?: ReactEventHandler<HTMLParagraphElement>; onWaitingCapture?: ReactEventHandler<HTMLParagraphElement>; onAuxClick?: MouseEventHandler<HTMLParagraphElement>; onAuxClickCapture?: MouseEventHandler<HTMLParagraphElement>; onClick?: MouseEventHandler<HTMLParagraphElement>; onClickCapture?: MouseEventHandler<HTMLParagraphElement>; onContextMenu?: MouseEventHandler<HTMLParagraphElement>; onContextMenuCapture?: MouseEventHandler<HTMLParagraphElement>; onDoubleClick?: MouseEventHandler<HTMLParagraphElement>; onDoubleClickCapture?: MouseEventHandler<HTMLParagraphElement>; onDrag?: DragEventHandler<HTMLParagraphElement>; onDragCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnd?: DragEventHandler<HTMLParagraphElement>; onDragEndCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnter?: DragEventHandler<HTMLParagraphElement>; onDragEnterCapture?: DragEventHandler<HTMLParagraphElement>; onDragExit?: DragEventHandler<HTMLParagraphElement>; onDragExitCapture?: DragEventHandler<HTMLParagraphElement>; onDragLeave?: DragEventHandler<HTMLParagraphElement>; onDragLeaveCapture?: DragEventHandler<HTMLParagraphElement>; onDragOver?: DragEventHandler<HTMLParagraphElement>; onDragOverCapture?: DragEventHandler<HTMLParagraphElement>; onDragStart?: DragEventHandler<HTMLParagraphElement>; onDragStartCapture?: DragEventHandler<HTMLParagraphElement>; onDrop?: DragEventHandler<HTMLParagraphElement>; onDropCapture?: DragEventHandler<HTMLParagraphElement>; onMouseDown?: MouseEventHandler<HTMLParagraphElement>; onMouseDownCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseEnter?: MouseEventHandler<HTMLParagraphElement>; onMouseLeave?: MouseEventHandler<HTMLParagraphElement>; onMouseMove?: MouseEventHandler<HTMLParagraphElement>; onMouseMoveCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOut?: MouseEventHandler<HTMLParagraphElement>; onMouseOutCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOver?: MouseEventHandler<HTMLParagraphElement>; onMouseOverCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseUp?: MouseEventHandler<HTMLParagraphElement>; onMouseUpCapture?: MouseEventHandler<HTMLParagraphElement>; onSelect?: ReactEventHandler<HTMLParagraphElement>; onSelectCapture?: ReactEventHandler<HTMLParagraphElement>; onTouchCancel?: TouchEventHandler<HTMLParagraphElement>; onTouchCancelCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchEnd?: TouchEventHandler<HTMLParagraphElement>; onTouchEndCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchMove?: TouchEventHandler<HTMLParagraphElement>; onTouchMoveCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchStart?: TouchEventHandler<HTMLParagraphElement>; onTouchStartCapture?: TouchEventHandler<HTMLParagraphElement>; onPointerDown?: PointerEventHandler<HTMLParagraphElement>; onPointerDownCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerMove?: PointerEventHandler<HTMLParagraphElement>; onPointerMoveCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerUp?: PointerEventHandler<HTMLParagraphElement>; onPointerUpCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerCancel?: PointerEventHandler<HTMLParagraphElement>; onPointerCancelCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerEnter?: PointerEventHandler<HTMLParagraphElement>; onPointerLeave?: PointerEventHandler<HTMLParagraphElement>; onPointerOver?: PointerEventHandler<HTMLParagraphElement>; onPointerOverCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerOut?: PointerEventHandler<HTMLParagraphElement>; onPointerOutCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onScroll?: UIEventHandler<HTMLParagraphElement>; onScrollCapture?: UIEventHandler<HTMLParagraphElement>; onWheel?: WheelEventHandler<HTMLParagraphElement>; onWheelCapture?: WheelEventHandler<HTMLParagraphElement>; onAnimationStart?: AnimationEventHandler<HTMLParagraphElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEnd?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIteration?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLParagraphElement>; onTransitionEnd?: TransitionEventHandler<HTMLParagraphElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLParagraphElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "InputLabelProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<InputLabelClasses> & Partial<ClassNameMap<never>>; color?: \"success\" | \"info\" | \"warning\" | \"error\" | \"primary\" | \"secondary\"; disableAnimation?: boolean; disabled?: boolean; error?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; shrink?: boolean; size?: OverridableStringUnion<\"small\" | \"normal\", InputLabelPropsSizeOverrides>; sx?: SxProps<Theme>; variant?: \"outlined\" | \"filled\" | \"standard\"; children?: ReactNode; filled?: boolean; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLLabelElement>; ref?: Ref<HTMLLabelElement>; form?: string; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLLabelElement>; onCopyCapture?: ClipboardEventHandler<HTMLLabelElement>; onCut?: ClipboardEventHandler<HTMLLabelElement>; onCutCapture?: ClipboardEventHandler<HTMLLabelElement>; onPaste?: ClipboardEventHandler<HTMLLabelElement>; onPasteCapture?: ClipboardEventHandler<HTMLLabelElement>; onCompositionEnd?: CompositionEventHandler<HTMLLabelElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionStart?: CompositionEventHandler<HTMLLabelElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdate?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLLabelElement>; onFocus?: FocusEventHandler<HTMLLabelElement>; onFocusCapture?: FocusEventHandler<HTMLLabelElement>; onBlur?: FocusEventHandler<HTMLLabelElement>; onBlurCapture?: FocusEventHandler<HTMLLabelElement>; onChangeCapture?: FormEventHandler<HTMLLabelElement>; onBeforeInput?: FormEventHandler<HTMLLabelElement>; onBeforeInputCapture?: FormEventHandler<HTMLLabelElement>; onInput?: FormEventHandler<HTMLLabelElement>; onInputCapture?: FormEventHandler<HTMLLabelElement>; onReset?: FormEventHandler<HTMLLabelElement>; onResetCapture?: FormEventHandler<HTMLLabelElement>; onSubmit?: FormEventHandler<HTMLLabelElement>; onSubmitCapture?: FormEventHandler<HTMLLabelElement>; onInvalid?: FormEventHandler<HTMLLabelElement>; onInvalidCapture?: FormEventHandler<HTMLLabelElement>; onLoad?: ReactEventHandler<HTMLLabelElement>; onLoadCapture?: ReactEventHandler<HTMLLabelElement>; onError?: ReactEventHandler<HTMLLabelElement>; onErrorCapture?: ReactEventHandler<HTMLLabelElement>; onKeyDown?: KeyboardEventHandler<HTMLLabelElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyPress?: KeyboardEventHandler<HTMLLabelElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyUp?: KeyboardEventHandler<HTMLLabelElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLLabelElement>; onAbort?: ReactEventHandler<HTMLLabelElement>; onAbortCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlay?: ReactEventHandler<HTMLLabelElement>; onCanPlayCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlayThrough?: ReactEventHandler<HTMLLabelElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLLabelElement>; onDurationChange?: ReactEventHandler<HTMLLabelElement>; onDurationChangeCapture?: ReactEventHandler<HTMLLabelElement>; onEmptied?: ReactEventHandler<HTMLLabelElement>; onEmptiedCapture?: ReactEventHandler<HTMLLabelElement>; onEncrypted?: ReactEventHandler<HTMLLabelElement>; onEncryptedCapture?: ReactEventHandler<HTMLLabelElement>; onEnded?: ReactEventHandler<HTMLLabelElement>; onEndedCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedData?: ReactEventHandler<HTMLLabelElement>; onLoadedDataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadata?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadStart?: ReactEventHandler<HTMLLabelElement>; onLoadStartCapture?: ReactEventHandler<HTMLLabelElement>; onPause?: ReactEventHandler<HTMLLabelElement>; onPauseCapture?: ReactEventHandler<HTMLLabelElement>; onPlay?: ReactEventHandler<HTMLLabelElement>; onPlayCapture?: ReactEventHandler<HTMLLabelElement>; onPlaying?: ReactEventHandler<HTMLLabelElement>; onPlayingCapture?: ReactEventHandler<HTMLLabelElement>; onProgress?: ReactEventHandler<HTMLLabelElement>; onProgressCapture?: ReactEventHandler<HTMLLabelElement>; onRateChange?: ReactEventHandler<HTMLLabelElement>; onRateChangeCapture?: ReactEventHandler<HTMLLabelElement>; onResize?: ReactEventHandler<HTMLLabelElement>; onResizeCapture?: ReactEventHandler<HTMLLabelElement>; onSeeked?: ReactEventHandler<HTMLLabelElement>; onSeekedCapture?: ReactEventHandler<HTMLLabelElement>; onSeeking?: ReactEventHandler<HTMLLabelElement>; onSeekingCapture?: ReactEventHandler<HTMLLabelElement>; onStalled?: ReactEventHandler<HTMLLabelElement>; onStalledCapture?: ReactEventHandler<HTMLLabelElement>; onSuspend?: ReactEventHandler<HTMLLabelElement>; onSuspendCapture?: ReactEventHandler<HTMLLabelElement>; onTimeUpdate?: ReactEventHandler<HTMLLabelElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLLabelElement>; onVolumeChange?: ReactEventHandler<HTMLLabelElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLLabelElement>; onWaiting?: ReactEventHandler<HTMLLabelElement>; onWaitingCapture?: ReactEventHandler<HTMLLabelElement>; onAuxClick?: MouseEventHandler<HTMLLabelElement>; onAuxClickCapture?: MouseEventHandler<HTMLLabelElement>; onClick?: MouseEventHandler<HTMLLabelElement>; onClickCapture?: MouseEventHandler<HTMLLabelElement>; onContextMenu?: MouseEventHandler<HTMLLabelElement>; onContextMenuCapture?: MouseEventHandler<HTMLLabelElement>; onDoubleClick?: MouseEventHandler<HTMLLabelElement>; onDoubleClickCapture?: MouseEventHandler<HTMLLabelElement>; onDrag?: DragEventHandler<HTMLLabelElement>; onDragCapture?: DragEventHandler<HTMLLabelElement>; onDragEnd?: DragEventHandler<HTMLLabelElement>; onDragEndCapture?: DragEventHandler<HTMLLabelElement>; onDragEnter?: DragEventHandler<HTMLLabelElement>; onDragEnterCapture?: DragEventHandler<HTMLLabelElement>; onDragExit?: DragEventHandler<HTMLLabelElement>; onDragExitCapture?: DragEventHandler<HTMLLabelElement>; onDragLeave?: DragEventHandler<HTMLLabelElement>; onDragLeaveCapture?: DragEventHandler<HTMLLabelElement>; onDragOver?: DragEventHandler<HTMLLabelElement>; onDragOverCapture?: DragEventHandler<HTMLLabelElement>; onDragStart?: DragEventHandler<HTMLLabelElement>; onDragStartCapture?: DragEventHandler<HTMLLabelElement>; onDrop?: DragEventHandler<HTMLLabelElement>; onDropCapture?: DragEventHandler<HTMLLabelElement>; onMouseDown?: MouseEventHandler<HTMLLabelElement>; onMouseDownCapture?: MouseEventHandler<HTMLLabelElement>; onMouseEnter?: MouseEventHandler<HTMLLabelElement>; onMouseLeave?: MouseEventHandler<HTMLLabelElement>; onMouseMove?: MouseEventHandler<HTMLLabelElement>; onMouseMoveCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOut?: MouseEventHandler<HTMLLabelElement>; onMouseOutCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOver?: MouseEventHandler<HTMLLabelElement>; onMouseOverCapture?: MouseEventHandler<HTMLLabelElement>; onMouseUp?: MouseEventHandler<HTMLLabelElement>; onMouseUpCapture?: MouseEventHandler<HTMLLabelElement>; onSelect?: ReactEventHandler<HTMLLabelElement>; onSelectCapture?: ReactEventHandler<HTMLLabelElement>; onTouchCancel?: TouchEventHandler<HTMLLabelElement>; onTouchCancelCapture?: TouchEventHandler<HTMLLabelElement>; onTouchEnd?: TouchEventHandler<HTMLLabelElement>; onTouchEndCapture?: TouchEventHandler<HTMLLabelElement>; onTouchMove?: TouchEventHandler<HTMLLabelElement>; onTouchMoveCapture?: TouchEventHandler<HTMLLabelElement>; onTouchStart?: TouchEventHandler<HTMLLabelElement>; onTouchStartCapture?: TouchEventHandler<HTMLLabelElement>; onPointerDown?: PointerEventHandler<HTMLLabelElement>; onPointerDownCapture?: PointerEventHandler<HTMLLabelElement>; onPointerMove?: PointerEventHandler<HTMLLabelElement>; onPointerMoveCapture?: PointerEventHandler<HTMLLabelElement>; onPointerUp?: PointerEventHandler<HTMLLabelElement>; onPointerUpCapture?: PointerEventHandler<HTMLLabelElement>; onPointerCancel?: PointerEventHandler<HTMLLabelElement>; onPointerCancelCapture?: PointerEventHandler<HTMLLabelElement>; onPointerEnter?: PointerEventHandler<HTMLLabelElement>; onPointerLeave?: PointerEventHandler<HTMLLabelElement>; onPointerOver?: PointerEventHandler<HTMLLabelElement>; onPointerOverCapture?: PointerEventHandler<HTMLLabelElement>; onPointerOut?: PointerEventHandler<HTMLLabelElement>; onPointerOutCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onScroll?: UIEventHandler<HTMLLabelElement>; onScrollCapture?: UIEventHandler<HTMLLabelElement>; onWheel?: WheelEventHandler<HTMLLabelElement>; onWheelCapture?: WheelEventHandler<HTMLLabelElement>; onAnimationStart?: AnimationEventHandler<HTMLLabelElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationEnd?: AnimationEventHandler<HTMLLabelElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationIteration?: AnimationEventHandler<HTMLLabelElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLLabelElement>; onTransitionEnd?: TransitionEventHandler<HTMLLabelElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLLabelElement>; htmlFor?: string; component?: ElementType<any, keyof IntrinsicElements>; }"
        }
      },
      "export": {
        "path": "@mui/material/TextField",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Autocomplete#Autocomplete",
          "@mui/material#Box",
          "@mui/material/DialogContent#DialogContent",
          "@mui/material/Stack#Stack",
          "react-hook-form#Controller"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Sync#SyncIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ToggleButton#ToggleButton": {
      "id": "@mui/material/ToggleButton#ToggleButton",
      "name": "ToggleButton",
      "props": {
        "value": {
          "type": "custom",
          "typeName": "{}"
        },
        "disabled": {
          "type": "boolean"
        },
        "selected": {
          "type": "boolean"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; disabled?: string; selected?: string; standard?: string; primary?: string; secondary?: string; sizeSmall?: string; sizeMedium?: string; sizeLarge?: string; fullWidth?: string; }"
        },
        "color": {
          "type": "string-union",
          "values": [
            "standard",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "disableFocusRipple": {
          "type": "boolean"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "tabIndex": {
          "type": "number"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "LinkComponent": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"div\" | \"style\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | ComponentType<any>"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "reset",
            "submit"
          ]
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "export": {
        "path": "@mui/material/ToggleButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/ToggleButtonGroup#ToggleButtonGroup"
        ],
        "exclusiveParent": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "exclusiveChildren": [
          "@mui/icons-material/FormatAlignJustify#FormatAlignJustifyIcon",
          "@mui/icons-material/FormatUnderlined#FormatUnderlinedIcon",
          "@mui/icons-material/FormatColorFill#FormatColorFillIcon",
          "@mui/icons-material/Laptop#LaptopIcon",
          "@mui/icons-material/Tv#TvIcon",
          "@mui/icons-material/PhoneAndroid#PhoneAndroidIcon",
          "@mui/icons-material/ViewList#ViewListIcon",
          "@mui/icons-material/ViewModule#ViewModuleIcon",
          "@mui/icons-material/ViewQuilt#ViewQuiltIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ToggleButtonGroup#ToggleButtonGroup": {
      "id": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
      "name": "ToggleButtonGroup",
      "props": {
        "color": {
          "type": "string-union",
          "values": [
            "standard",
            "success",
            "info",
            "warning",
            "error",
            "primary",
            "secondary"
          ]
        },
        "value": {
          "type": "any"
        },
        "exclusive": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium",
            "large"
          ]
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "horizontal",
            "vertical"
          ]
        },
        "fullWidth": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; selected?: string; horizontal?: string; vertical?: string; disabled?: string; grouped?: string; groupedHorizontal?: string; groupedVertical?: string; fullWidth?: string; firstButton?: string; lastButton?: string; middleButton?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/ToggleButtonGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/material#Box"
        ],
        "exclusiveChildren": [
          "@mui/material/ToggleButton#ToggleButton"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Toolbar#Toolbar": {
      "id": "@mui/material/Toolbar#Toolbar",
      "name": "Toolbar",
      "props": {
        "id": {
          "type": "string"
        },
        "variant": {
          "type": "string-union",
          "values": [
            "dense",
            "regular"
          ]
        },
        "disableGutters": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; gutters?: string; regular?: string; dense?: string; }"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Toolbar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/AppBar#AppBar",
          "@mui/material#Box",
          "@mui/material/Container#Container",
          "@mui/material/Drawer#Drawer"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Adb#AdbIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Tooltip#Tooltip": {
      "id": "@mui/material/Tooltip#Tooltip",
      "name": "Tooltip",
      "props": {
        "title": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "enterTouchDelay": {
          "type": "number"
        },
        "placement": {
          "type": "string-union",
          "values": [
            "bottom",
            "left",
            "right",
            "top",
            "top-start",
            "top-end",
            "bottom-start",
            "bottom-end",
            "right-start",
            "right-end",
            "left-start",
            "left-end"
          ]
        },
        "classes": {
          "type": "custom",
          "typeName": "{ popper?: string; popperInteractive?: string; popperArrow?: string; popperClose?: string; tooltip?: string; tooltipArrow?: string; arrow?: string; touch?: string; tooltipPlacementLeft?: string; tooltipPlacementRight?: string; tooltipPlacementTop?: string; tooltipPlacementBottom?: string; }"
        },
        "arrow": {
          "type": "boolean"
        },
        "enterDelay": {
          "type": "number"
        },
        "leaveDelay": {
          "type": "number"
        },
        "followCursor": {
          "type": "boolean"
        },
        "disableInteractive": {
          "type": "boolean"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides; transition?: TransitionProps & TooltipComponentsPropsOverrides; tooltip?: HTMLProps<HTMLDivElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; arrow?: HTMLProps<HTMLSpanElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; }"
        },
        "TransitionComponent": {
          "type": "custom",
          "typeName": "((props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TransitionProps & { children: ReactElement<any, any>; }, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "TransitionProps": {
          "type": "custom",
          "typeName": "TransitionProps"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "components": {
          "type": "custom",
          "typeName": "{ Popper?: ElementType<PopperProps, keyof IntrinsicElements>; Transition?: ElementType<any, keyof IntrinsicElements>; Tooltip?: ElementType<any, keyof IntrinsicElements>; Arrow?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "componentsProps": {
          "type": "custom",
          "typeName": "{ popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides; transition?: TransitionProps & TooltipComponentsPropsOverrides; tooltip?: HTMLProps<HTMLDivElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; arrow?: HTMLProps<HTMLSpanElement> & MUIStyledCommonProps<Theme> & TooltipComponentsPropsOverrides; }"
        },
        "describeChild": {
          "type": "boolean"
        },
        "disableFocusListener": {
          "type": "boolean"
        },
        "disableHoverListener": {
          "type": "boolean"
        },
        "disableTouchListener": {
          "type": "boolean"
        },
        "enterNextDelay": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "leaveTouchDelay": {
          "type": "number"
        },
        "open": {
          "type": "boolean"
        },
        "PopperComponent": {
          "type": "custom",
          "typeName": "((props: PopperProps, deprecatedLegacyContext?: any) => ReactNode) | (new (props: PopperProps, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "PopperProps": {
          "type": "custom",
          "typeName": "{ component?: ElementType<any, keyof IntrinsicElements>; components?: { Root?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: SlotComponentProps<\"div\", PopperRootSlotPropsOverrides, PopperOwnProps>; }; sx?: SxProps<Theme>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLDivElement>; children?: ReactNode | ((props: PopperChildrenProps) => ReactNode); ref?: Ref<HTMLDivElement>; slot?: string; title?: string; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; autoFocus?: boolean; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; tabIndex?: number; translate?: \"yes\" | \"no\"; radioGroup?: string; role?: AriaRole; about?: string; content?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; color?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"time\" | \"page\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; container?: Element | (() => Element); transition?: boolean; slots?: PopperSlots; slotProps?: { root?: SlotComponentProps<\"div\", PopperRootSlotPropsOverrides, PopperOwnProps>; }; open?: boolean; disablePortal?: boolean; keepMounted?: boolean; anchorEl?: HTMLElement | VirtualElement | (() => HTMLElement) | (() => VirtualElement); modifiers?: Partial<Modifier<any, any>>[]; placement?: Placement; popperOptions?: Partial<OptionsGeneric<any>>; popperRef?: Ref<Instance>; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ popper?: ElementType<PopperProps, keyof IntrinsicElements>; transition?: ElementType<any, keyof IntrinsicElements>; tooltip?: ElementType<any, keyof IntrinsicElements>; arrow?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "className": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slot": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "ComponentProps extends { ref?: infer RefType; } ? RefType : Ref<unknown>"
        }
      },
      "export": {
        "path": "@mui/material/Tooltip",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/ListItem#ListItem",
          "@mui/material/Toolbar#Toolbar",
          "@mui/x-data-grid-pro#GridActionsCellItem",
          "@mui/material/Stack#Stack"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/ArrowDownward#ArrowDownIcon",
          "@mui/icons-material/ArrowUpward#ArrowUpIcon",
          "@mui/icons-material/ErrorOutline#ErrorOutlineIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#Typography": {
      "id": "@mui/material#Typography",
      "name": "Typography",
      "comment": "Demos:\n\n- [Breadcrumbs](https://mui.com/material-ui/react-breadcrumbs/)\n- [Typography](https://mui.com/material-ui/react-typography/)\n\nAPI:\n\n- [Typography API](https://mui.com/material-ui/api/typography/)",
      "props": {
        "align": {
          "type": "string-union",
          "values": [
            "center",
            "left",
            "right",
            "inherit",
            "justify"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; body2?: string; body1?: string; caption?: string; button?: string; h1?: string; h2?: string; h3?: string; h4?: string; h5?: string; h6?: string; subtitle1?: string; subtitle2?: string; overline?: string; inherit?: string; alignLeft?: string; alignCenter?: string; alignRight?: string; alignJustify?: string; noWrap?: string; gutterBottom?: string; paragraph?: string; }"
        },
        "gutterBottom": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "noWrap": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "paragraph": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string-union",
          "values": [
            "button",
            "caption",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "inherit",
            "subtitle1",
            "subtitle2",
            "body1",
            "body2",
            "overline"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "variantMapping": {
          "type": "custom",
          "typeName": "{ button?: string; caption?: string; h1?: string; h2?: string; h3?: string; h4?: string; h5?: string; h6?: string; inherit?: string; subtitle1?: string; subtitle2?: string; body1?: string; body2?: string; overline?: string; }"
        },
        "p": {
          "type": "any"
        },
        "color": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "border": {
          "type": "any"
        },
        "boxShadow": {
          "type": "any"
        },
        "fontWeight": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "zIndex": {
          "type": "any"
        },
        "alignContent": {
          "type": "any"
        },
        "alignItems": {
          "type": "any"
        },
        "alignSelf": {
          "type": "any"
        },
        "bottom": {
          "type": "any"
        },
        "boxSizing": {
          "type": "any"
        },
        "columnGap": {
          "type": "any"
        },
        "display": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "flexBasis": {
          "type": "any"
        },
        "flexDirection": {
          "type": "any"
        },
        "flexGrow": {
          "type": "any"
        },
        "flexShrink": {
          "type": "any"
        },
        "flexWrap": {
          "type": "any"
        },
        "fontFamily": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "fontSize": {
          "type": "any"
        },
        "fontStyle": {
          "type": "any"
        },
        "gridAutoColumns": {
          "type": "any"
        },
        "gridAutoFlow": {
          "type": "any"
        },
        "gridAutoRows": {
          "type": "any"
        },
        "gridTemplateAreas": {
          "type": "any"
        },
        "gridTemplateColumns": {
          "type": "any"
        },
        "gridTemplateRows": {
          "type": "any"
        },
        "height": {
          "type": "any"
        },
        "justifyContent": {
          "type": "any"
        },
        "justifyItems": {
          "type": "any"
        },
        "justifySelf": {
          "type": "any"
        },
        "left": {
          "type": "any"
        },
        "letterSpacing": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "lineHeight": {
          "type": "any"
        },
        "marginBlockEnd": {
          "type": "any"
        },
        "marginBlockStart": {
          "type": "any"
        },
        "marginBottom": {
          "type": "any"
        },
        "marginInlineEnd": {
          "type": "any"
        },
        "marginInlineStart": {
          "type": "any"
        },
        "marginLeft": {
          "type": "any"
        },
        "marginRight": {
          "type": "any"
        },
        "marginTop": {
          "type": "any"
        },
        "maxHeight": {
          "type": "any"
        },
        "maxWidth": {
          "type": "any"
        },
        "minHeight": {
          "type": "any"
        },
        "minWidth": {
          "type": "any"
        },
        "order": {
          "type": "any"
        },
        "paddingBlockEnd": {
          "type": "any"
        },
        "paddingBlockStart": {
          "type": "any"
        },
        "paddingBottom": {
          "type": "any"
        },
        "paddingInlineEnd": {
          "type": "any"
        },
        "paddingInlineStart": {
          "type": "any"
        },
        "paddingLeft": {
          "type": "any"
        },
        "paddingRight": {
          "type": "any"
        },
        "paddingTop": {
          "type": "any"
        },
        "position": {
          "type": "any"
        },
        "right": {
          "type": "any"
        },
        "rowGap": {
          "type": "any"
        },
        "textAlign": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "textOverflow": {
          "type": "any"
        },
        "textTransform": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "top": {
          "type": "any"
        },
        "visibility": {
          "type": "any"
        },
        "whiteSpace": {
          "type": "any"
        },
        "width": {
          "type": "any"
        },
        "borderBottom": {
          "type": "any"
        },
        "borderColor": {
          "type": "any"
        },
        "borderLeft": {
          "type": "any"
        },
        "borderRadius": {
          "type": "any"
        },
        "borderRight": {
          "type": "any"
        },
        "borderTop": {
          "type": "any"
        },
        "flex": {
          "type": "any"
        },
        "gap": {
          "type": "any"
        },
        "gridArea": {
          "type": "any"
        },
        "gridColumn": {
          "type": "any"
        },
        "gridRow": {
          "type": "any"
        },
        "margin": {
          "type": "any"
        },
        "marginBlock": {
          "type": "any"
        },
        "marginInline": {
          "type": "any"
        },
        "overflow": {
          "type": "any"
        },
        "padding": {
          "type": "any"
        },
        "paddingBlock": {
          "type": "any"
        },
        "paddingInline": {
          "type": "any"
        },
        "bgcolor": {
          "type": "any"
        },
        "m": {
          "type": "any"
        },
        "mt": {
          "type": "any"
        },
        "mr": {
          "type": "any"
        },
        "mb": {
          "type": "any"
        },
        "ml": {
          "type": "any"
        },
        "mx": {
          "type": "any"
        },
        "marginX": {
          "type": "any"
        },
        "my": {
          "type": "any"
        },
        "marginY": {
          "type": "any"
        },
        "pt": {
          "type": "any"
        },
        "pr": {
          "type": "any"
        },
        "pb": {
          "type": "any"
        },
        "pl": {
          "type": "any"
        },
        "px": {
          "type": "any"
        },
        "paddingX": {
          "type": "any"
        },
        "py": {
          "type": "any"
        },
        "paddingY": {
          "type": "any"
        },
        "typography": {
          "type": "any"
        },
        "displayPrint": {
          "type": "any"
        },
        "className": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "slot": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
          "source": {
            "type": "code-usage"
          }
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "Typography"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/material/Typography/Typography.d.ts"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#AccordionSummary",
          "@mui/material#AccordionDetails",
          "@mui/material/Toolbar#Toolbar",
          "@mui/material/Paper#Paper",
          "@mui/material#Box",
          "@mui/material/MenuItem#MenuItem",
          "@mui/material/Grid#Grid",
          "@mui/material/Breadcrumbs#Breadcrumbs",
          "@mui/material/CardContent#CardContent",
          "@mui/material/Container#Container",
          "@mui/material/DialogContent#DialogContent",
          "@mui/material/Stack#Stack",
          "@mui/material/Popover#Popover",
          "@mui/material/Skeleton#Skeleton",
          "@mui/material/Stepper#Stepper",
          "@mui/material/StepLabel#StepLabel",
          "@mui/material/StepContent#StepContent",
          "@mui/lab/TimelineContent#TimelineContent",
          "@mui/material/FormControlLabel#FormControlLabel",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Grain#GrainIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Zoom#Zoom": {
      "id": "@mui/material/Zoom#Zoom",
      "name": "Zoom",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "in": {
          "type": "boolean"
        },
        "timeout": {
          "type": "custom",
          "typeName": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "unmountOnExit": {
          "type": "boolean"
        },
        "appear": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "ReactElement<any, any>"
        },
        "easing": {
          "type": "custom",
          "typeName": "string | { enter?: string; exit?: string; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "((instance: unknown) => void) | RefObject<unknown>"
        },
        "enter": {
          "type": "boolean"
        },
        "exit": {
          "type": "boolean"
        },
        "mountOnEnter": {
          "type": "boolean"
        },
        "addEndListener": {
          "type": "custom",
          "typeName": "{ implicit: (node: HTMLElement, done: () => void) => void; explicit: (done: () => void) => void; }[RefElement extends undefined ? \"implicit\" : \"explicit\"]"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "\"inherit\" | \"plaintext-only\" | Booleanish"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"region\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/material/Zoom",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/GlobalStyles#GlobalStyles": {
      "id": "@mui/material/GlobalStyles#GlobalStyles",
      "name": "GlobalStyles",
      "props": {
        "styles": {
          "type": "custom",
          "typeName": "InterpolationPrimitive | CSSObjectWithVariants<Theme> | ArrayInterpolation<Theme> | FunctionInterpolation<Theme>"
        }
      },
      "export": {
        "path": "@mui/material/GlobalStyles",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/BarChart#BarChart": {
      "id": "@mui/x-charts/BarChart#BarChart",
      "name": "BarChart",
      "props": {
        "dataset": {
          "type": "custom",
          "typeName": "DatasetElementType<string | number | Date>[]"
        },
        "xAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\">[]"
        },
        "series": {
          "type": "custom",
          "typeName": "MakeOptional<BarSeriesType, \"type\">[]"
        },
        "grid": {
          "type": "custom",
          "typeName": "{ vertical?: boolean; horizontal?: boolean; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "height": {
          "type": "number"
        },
        "width": {
          "type": "number"
        },
        "leftAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "yAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\">[]"
        },
        "rightAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "barLabel": {
          "type": "custom",
          "typeName": "\"value\" | ((item: BarItem, context: BarLabelContext) => string)"
        },
        "skipAnimation": {
          "type": "boolean"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "BarChartSlotProps"
        },
        "borderRadius": {
          "type": "number"
        },
        "layout": {
          "type": "string-union",
          "values": [
            "vertical",
            "horizontal"
          ]
        },
        "loading": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "BarChartSlots"
        },
        "colors": {
          "type": "custom",
          "typeName": "string[] | ChartsColorPaletteCallback"
        },
        "axisHighlight": {
          "type": "custom",
          "typeName": "{ x?: AxisHighlight; y?: AxisHighlight; }"
        },
        "highlightedItem": {
          "type": "custom",
          "typeName": "{ seriesId?: SeriesId; dataIndex?: number; }"
        },
        "tooltip": {
          "type": "custom",
          "typeName": "ChartsTooltipProps<\"bar\">"
        },
        "legend": {
          "type": "custom",
          "typeName": "ChartsLegendProps"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "topAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "bottomAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/BarChart",
        "locator": {
          "type": "named",
          "name": "BarChart"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/PieChart#PieChart": {
      "id": "@mui/x-charts/PieChart#PieChart",
      "name": "PieChart",
      "props": {
        "series": {
          "type": "custom",
          "typeName": "MakeOptional<PieSeriesType<MakeOptional<PieValueType, \"id\">>, \"type\">[]"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "PieChartSlotProps"
        },
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "legend": {
          "type": "custom",
          "typeName": "ChartsLegendProps"
        },
        "skipAnimation": {
          "type": "boolean"
        },
        "colors": {
          "type": "custom",
          "typeName": "string[] | ChartsColorPaletteCallback"
        },
        "highlightedItem": {
          "type": "custom",
          "typeName": "{ seriesId?: SeriesId; dataIndex?: number; }"
        },
        "bottomAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "leftAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "tooltip": {
          "type": "custom",
          "typeName": "ChartsTooltipProps<\"pie\">"
        },
        "axisHighlight": {
          "type": "custom",
          "typeName": "{ x?: AxisHighlight; y?: AxisHighlight; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "PieChartSlots"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dataset": {
          "type": "custom",
          "typeName": "DatasetElementType<string | number | Date>[]"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "xAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\">[]"
        },
        "yAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\">[]"
        },
        "topAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "rightAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "loading": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/PieChart",
        "locator": {
          "type": "named",
          "name": "PieChart"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/material#Box"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ScatterChart#ScatterPlot": {
      "id": "@mui/x-charts/ScatterChart#ScatterPlot",
      "name": "ScatterPlot",
      "props": {
        "slots": {
          "type": "custom",
          "typeName": "ScatterPlotSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "ScatterPlotSlotProps"
        }
      },
      "export": {
        "path": "@mui/x-charts/ScatterChart",
        "locator": {
          "type": "named",
          "name": "ScatterPlot"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
        ],
        "exclusiveParent": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/TimeClock#TimeClock": {
      "id": "@mui/x-date-pickers/TimeClock#TimeClock",
      "name": "TimeClock",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TDate"
        },
        "slots": {
          "type": "custom",
          "typeName": "TimeClockSlots"
        },
        "showViewSwitcher": {
          "type": "boolean"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "TimeClockSlotProps"
        },
        "ampm": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "TDate"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; arrowSwitcher?: string; }"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "focusedView": {
          "type": "custom",
          "typeName": "TView"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/TimeClock",
        "locator": {
          "type": "named",
          "name": "TimeClock"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/material/Grid#Grid"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DigitalClock#DigitalClock": {
      "id": "@mui/x-date-pickers/DigitalClock#DigitalClock",
      "name": "DigitalClock",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TDate"
        },
        "ampm": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "skipDisabled": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "timeStep": {
          "type": "number"
        },
        "value": {
          "type": "custom",
          "typeName": "TDate"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly \"hours\"[]"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; list?: string; item?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "DigitalClockSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DigitalClockSlotProps"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "focusedView": {
          "type": "custom",
          "typeName": "TView"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DigitalClock",
        "locator": {
          "type": "named",
          "name": "DigitalClock"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock": {
      "id": "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock",
      "name": "MultiSectionDigitalClock",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TDate"
        },
        "ampm": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "skipDisabled": {
          "type": "boolean"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "timeSteps": {
          "type": "custom",
          "typeName": "TimeStepOptions"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TimeViewWithMeridiem[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TDate"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "MultiSectionDigitalClockSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "MultiSectionDigitalClockSlotProps"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "focusedView": {
          "type": "custom",
          "typeName": "TView"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/MultiSectionDigitalClock",
        "locator": {
          "type": "named",
          "name": "MultiSectionDigitalClock"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/PickersDay#PickersDay": {
      "id": "@mui/x-date-pickers/PickersDay#PickersDay",
      "name": "PickersDay",
      "props": {
        "outsideCurrentMonth": {
          "type": "boolean"
        },
        "day": {
          "type": "custom",
          "typeName": "TDate"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; dayWithMargin?: string; dayOutsideMonth?: string; hiddenDaySpacingFiller?: string; today?: string; selected?: string; disabled?: string; }"
        },
        "disabled": {
          "type": "boolean"
        },
        "disableMargin": {
          "type": "boolean"
        },
        "isAnimating": {
          "type": "boolean"
        },
        "isFirstVisibleCell": {
          "type": "boolean"
        },
        "isLastVisibleCell": {
          "type": "boolean"
        },
        "selected": {
          "type": "boolean"
        },
        "today": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "color": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "form": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "title": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "action": {
          "type": "custom",
          "typeName": "((instance: ButtonBaseActions) => void) | RefObject<ButtonBaseActions>"
        },
        "centerRipple": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disableRipple": {
          "type": "boolean"
        },
        "disableTouchRipple": {
          "type": "boolean"
        },
        "focusRipple": {
          "type": "boolean"
        },
        "focusVisibleClassName": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "tabIndex": {
          "type": "number"
        },
        "touchRippleRef": {
          "type": "custom",
          "typeName": "((instance: TouchRippleActions) => void) | RefObject<TouchRippleActions>"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "formAction": {
          "type": "string"
        },
        "formEncType": {
          "type": "string"
        },
        "formMethod": {
          "type": "string"
        },
        "formNoValidate": {
          "type": "boolean"
        },
        "formTarget": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string-union",
          "values": [
            "button",
            "submit",
            "reset"
          ]
        },
        "value": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"list\" | \"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"view\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"p\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | ComponentType<any>"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/PickersDay",
        "locator": {
          "type": "named",
          "name": "PickersDay"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Badge#Badge"
        ],
        "exclusiveParent": "@mui/material/Badge#Badge"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DateField#DateField": {
      "id": "@mui/x-date-pickers/DateField#DateField",
      "name": "DateField",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "format": {
          "type": "string"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "shouldRespectLeadingZeros": {
          "type": "boolean"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "slots": {
          "type": "custom",
          "typeName": "DateFieldSlots"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "clearable": {
          "type": "boolean"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "color": {
          "type": "string-union",
          "values": [
            "error",
            "primary",
            "secondary",
            "info",
            "success",
            "warning"
          ]
        },
        "content": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense",
            "normal"
          ]
        },
        "slot": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "title": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "className": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "name": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"list\" | \"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"view\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"p\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | ComponentType<any>"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "focused": {
          "type": "boolean"
        },
        "hiddenLabel": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "variant": {
          "type": "custom",
          "typeName": "\"filled\""
        },
        "InputProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<FilledInputClasses>; hiddenLabel?: boolean; disableUnderline?: boolean; sx?: SxProps<Theme>; onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>; autoFocus?: boolean; color?: OverridableStringUnion<\"error\" | \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\", InputBasePropsColorOverrides>; content?: string; translate?: \"yes\" | \"no\"; margin?: \"none\" | \"dense\"; slot?: string; style?: CSSProperties; title?: string; className?: string; disabled?: boolean; tabIndex?: number; ref?: Ref<unknown>; name?: string; type?: string; value?: unknown; defaultChecked?: boolean; defaultValue?: unknown; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; 'aria-describedby'?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLInputElement | HTMLTextAreaElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; readOnly?: boolean; autoComplete?: string; error?: boolean; maxRows?: string | number; minRows?: string | number; multiline?: boolean; placeholder?: string; rows?: string | number; fullWidth?: boolean; required?: boolean; size?: OverridableStringUnion<\"small\" | \"medium\", InputBasePropsSizeOverrides>; inputProps?: InputBaseComponentProps; inputRef?: Ref<any>; endAdornment?: ReactNode; startAdornment?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }; disableInjectingGlobalStyles?: boolean; inputComponent?: ElementType<InputBaseComponentProps, keyof IntrinsicElements>; renderSuffix?: (state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }; }"
        },
        "FormHelperTextProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<FormHelperTextClasses> & Partial<ClassNameMap<never>>; disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"filled\" | \"outlined\" | \"standard\", FormHelperTextPropsVariantOverrides>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLParagraphElement>; autoFocus?: boolean; color?: string; content?: string; translate?: \"yes\" | \"no\"; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLParagraphElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLParagraphElement>; onCopyCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCut?: ClipboardEventHandler<HTMLParagraphElement>; onCutCapture?: ClipboardEventHandler<HTMLParagraphElement>; onPaste?: ClipboardEventHandler<HTMLParagraphElement>; onPasteCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCompositionEnd?: CompositionEventHandler<HTMLParagraphElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStart?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdate?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLParagraphElement>; onFocus?: FocusEventHandler<HTMLParagraphElement>; onFocusCapture?: FocusEventHandler<HTMLParagraphElement>; onBlur?: FocusEventHandler<HTMLParagraphElement>; onBlurCapture?: FocusEventHandler<HTMLParagraphElement>; onChangeCapture?: FormEventHandler<HTMLParagraphElement>; onBeforeInput?: FormEventHandler<HTMLParagraphElement>; onBeforeInputCapture?: FormEventHandler<HTMLParagraphElement>; onInput?: FormEventHandler<HTMLParagraphElement>; onInputCapture?: FormEventHandler<HTMLParagraphElement>; onReset?: FormEventHandler<HTMLParagraphElement>; onResetCapture?: FormEventHandler<HTMLParagraphElement>; onSubmit?: FormEventHandler<HTMLParagraphElement>; onSubmitCapture?: FormEventHandler<HTMLParagraphElement>; onInvalid?: FormEventHandler<HTMLParagraphElement>; onInvalidCapture?: FormEventHandler<HTMLParagraphElement>; onLoad?: ReactEventHandler<HTMLParagraphElement>; onLoadCapture?: ReactEventHandler<HTMLParagraphElement>; onError?: ReactEventHandler<HTMLParagraphElement>; onErrorCapture?: ReactEventHandler<HTMLParagraphElement>; onKeyDown?: KeyboardEventHandler<HTMLParagraphElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPress?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUp?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLParagraphElement>; onAbort?: ReactEventHandler<HTMLParagraphElement>; onAbortCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlay?: ReactEventHandler<HTMLParagraphElement>; onCanPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThrough?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLParagraphElement>; onDurationChange?: ReactEventHandler<HTMLParagraphElement>; onDurationChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onEmptied?: ReactEventHandler<HTMLParagraphElement>; onEmptiedCapture?: ReactEventHandler<HTMLParagraphElement>; onEncrypted?: ReactEventHandler<HTMLParagraphElement>; onEncryptedCapture?: ReactEventHandler<HTMLParagraphElement>; onEnded?: ReactEventHandler<HTMLParagraphElement>; onEndedCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedData?: ReactEventHandler<HTMLParagraphElement>; onLoadedDataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadata?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadStart?: ReactEventHandler<HTMLParagraphElement>; onLoadStartCapture?: ReactEventHandler<HTMLParagraphElement>; onPause?: ReactEventHandler<HTMLParagraphElement>; onPauseCapture?: ReactEventHandler<HTMLParagraphElement>; onPlay?: ReactEventHandler<HTMLParagraphElement>; onPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onPlaying?: ReactEventHandler<HTMLParagraphElement>; onPlayingCapture?: ReactEventHandler<HTMLParagraphElement>; onProgress?: ReactEventHandler<HTMLParagraphElement>; onProgressCapture?: ReactEventHandler<HTMLParagraphElement>; onRateChange?: ReactEventHandler<HTMLParagraphElement>; onRateChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onResize?: ReactEventHandler<HTMLParagraphElement>; onResizeCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeked?: ReactEventHandler<HTMLParagraphElement>; onSeekedCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeking?: ReactEventHandler<HTMLParagraphElement>; onSeekingCapture?: ReactEventHandler<HTMLParagraphElement>; onStalled?: ReactEventHandler<HTMLParagraphElement>; onStalledCapture?: ReactEventHandler<HTMLParagraphElement>; onSuspend?: ReactEventHandler<HTMLParagraphElement>; onSuspendCapture?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdate?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLParagraphElement>; onVolumeChange?: ReactEventHandler<HTMLParagraphElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onWaiting?: ReactEventHandler<HTMLParagraphElement>; onWaitingCapture?: ReactEventHandler<HTMLParagraphElement>; onAuxClick?: MouseEventHandler<HTMLParagraphElement>; onAuxClickCapture?: MouseEventHandler<HTMLParagraphElement>; onClick?: MouseEventHandler<HTMLParagraphElement>; onClickCapture?: MouseEventHandler<HTMLParagraphElement>; onContextMenu?: MouseEventHandler<HTMLParagraphElement>; onContextMenuCapture?: MouseEventHandler<HTMLParagraphElement>; onDoubleClick?: MouseEventHandler<HTMLParagraphElement>; onDoubleClickCapture?: MouseEventHandler<HTMLParagraphElement>; onDrag?: DragEventHandler<HTMLParagraphElement>; onDragCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnd?: DragEventHandler<HTMLParagraphElement>; onDragEndCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnter?: DragEventHandler<HTMLParagraphElement>; onDragEnterCapture?: DragEventHandler<HTMLParagraphElement>; onDragExit?: DragEventHandler<HTMLParagraphElement>; onDragExitCapture?: DragEventHandler<HTMLParagraphElement>; onDragLeave?: DragEventHandler<HTMLParagraphElement>; onDragLeaveCapture?: DragEventHandler<HTMLParagraphElement>; onDragOver?: DragEventHandler<HTMLParagraphElement>; onDragOverCapture?: DragEventHandler<HTMLParagraphElement>; onDragStart?: DragEventHandler<HTMLParagraphElement>; onDragStartCapture?: DragEventHandler<HTMLParagraphElement>; onDrop?: DragEventHandler<HTMLParagraphElement>; onDropCapture?: DragEventHandler<HTMLParagraphElement>; onMouseDown?: MouseEventHandler<HTMLParagraphElement>; onMouseDownCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseEnter?: MouseEventHandler<HTMLParagraphElement>; onMouseLeave?: MouseEventHandler<HTMLParagraphElement>; onMouseMove?: MouseEventHandler<HTMLParagraphElement>; onMouseMoveCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOut?: MouseEventHandler<HTMLParagraphElement>; onMouseOutCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOver?: MouseEventHandler<HTMLParagraphElement>; onMouseOverCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseUp?: MouseEventHandler<HTMLParagraphElement>; onMouseUpCapture?: MouseEventHandler<HTMLParagraphElement>; onSelect?: ReactEventHandler<HTMLParagraphElement>; onSelectCapture?: ReactEventHandler<HTMLParagraphElement>; onTouchCancel?: TouchEventHandler<HTMLParagraphElement>; onTouchCancelCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchEnd?: TouchEventHandler<HTMLParagraphElement>; onTouchEndCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchMove?: TouchEventHandler<HTMLParagraphElement>; onTouchMoveCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchStart?: TouchEventHandler<HTMLParagraphElement>; onTouchStartCapture?: TouchEventHandler<HTMLParagraphElement>; onPointerDown?: PointerEventHandler<HTMLParagraphElement>; onPointerDownCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerMove?: PointerEventHandler<HTMLParagraphElement>; onPointerMoveCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerUp?: PointerEventHandler<HTMLParagraphElement>; onPointerUpCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerCancel?: PointerEventHandler<HTMLParagraphElement>; onPointerCancelCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerEnter?: PointerEventHandler<HTMLParagraphElement>; onPointerLeave?: PointerEventHandler<HTMLParagraphElement>; onPointerOver?: PointerEventHandler<HTMLParagraphElement>; onPointerOverCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerOut?: PointerEventHandler<HTMLParagraphElement>; onPointerOutCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onScroll?: UIEventHandler<HTMLParagraphElement>; onScrollCapture?: UIEventHandler<HTMLParagraphElement>; onWheel?: WheelEventHandler<HTMLParagraphElement>; onWheelCapture?: WheelEventHandler<HTMLParagraphElement>; onAnimationStart?: AnimationEventHandler<HTMLParagraphElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEnd?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIteration?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLParagraphElement>; onTransitionEnd?: TransitionEventHandler<HTMLParagraphElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLParagraphElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "helperText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "InputLabelProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<InputLabelClasses> & Partial<ClassNameMap<never>>; color?: \"error\" | \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\"; disableAnimation?: boolean; disabled?: boolean; error?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; shrink?: boolean; size?: OverridableStringUnion<\"small\" | \"normal\", InputLabelPropsSizeOverrides>; sx?: SxProps<Theme>; variant?: \"filled\" | \"outlined\" | \"standard\"; children?: ReactNode; filled?: boolean; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLLabelElement>; autoFocus?: boolean; content?: string; translate?: \"yes\" | \"no\"; form?: string; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLLabelElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLLabelElement>; onCopyCapture?: ClipboardEventHandler<HTMLLabelElement>; onCut?: ClipboardEventHandler<HTMLLabelElement>; onCutCapture?: ClipboardEventHandler<HTMLLabelElement>; onPaste?: ClipboardEventHandler<HTMLLabelElement>; onPasteCapture?: ClipboardEventHandler<HTMLLabelElement>; onCompositionEnd?: CompositionEventHandler<HTMLLabelElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionStart?: CompositionEventHandler<HTMLLabelElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdate?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLLabelElement>; onFocus?: FocusEventHandler<HTMLLabelElement>; onFocusCapture?: FocusEventHandler<HTMLLabelElement>; onBlur?: FocusEventHandler<HTMLLabelElement>; onBlurCapture?: FocusEventHandler<HTMLLabelElement>; onChangeCapture?: FormEventHandler<HTMLLabelElement>; onBeforeInput?: FormEventHandler<HTMLLabelElement>; onBeforeInputCapture?: FormEventHandler<HTMLLabelElement>; onInput?: FormEventHandler<HTMLLabelElement>; onInputCapture?: FormEventHandler<HTMLLabelElement>; onReset?: FormEventHandler<HTMLLabelElement>; onResetCapture?: FormEventHandler<HTMLLabelElement>; onSubmit?: FormEventHandler<HTMLLabelElement>; onSubmitCapture?: FormEventHandler<HTMLLabelElement>; onInvalid?: FormEventHandler<HTMLLabelElement>; onInvalidCapture?: FormEventHandler<HTMLLabelElement>; onLoad?: ReactEventHandler<HTMLLabelElement>; onLoadCapture?: ReactEventHandler<HTMLLabelElement>; onError?: ReactEventHandler<HTMLLabelElement>; onErrorCapture?: ReactEventHandler<HTMLLabelElement>; onKeyDown?: KeyboardEventHandler<HTMLLabelElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyPress?: KeyboardEventHandler<HTMLLabelElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyUp?: KeyboardEventHandler<HTMLLabelElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLLabelElement>; onAbort?: ReactEventHandler<HTMLLabelElement>; onAbortCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlay?: ReactEventHandler<HTMLLabelElement>; onCanPlayCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlayThrough?: ReactEventHandler<HTMLLabelElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLLabelElement>; onDurationChange?: ReactEventHandler<HTMLLabelElement>; onDurationChangeCapture?: ReactEventHandler<HTMLLabelElement>; onEmptied?: ReactEventHandler<HTMLLabelElement>; onEmptiedCapture?: ReactEventHandler<HTMLLabelElement>; onEncrypted?: ReactEventHandler<HTMLLabelElement>; onEncryptedCapture?: ReactEventHandler<HTMLLabelElement>; onEnded?: ReactEventHandler<HTMLLabelElement>; onEndedCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedData?: ReactEventHandler<HTMLLabelElement>; onLoadedDataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadata?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadStart?: ReactEventHandler<HTMLLabelElement>; onLoadStartCapture?: ReactEventHandler<HTMLLabelElement>; onPause?: ReactEventHandler<HTMLLabelElement>; onPauseCapture?: ReactEventHandler<HTMLLabelElement>; onPlay?: ReactEventHandler<HTMLLabelElement>; onPlayCapture?: ReactEventHandler<HTMLLabelElement>; onPlaying?: ReactEventHandler<HTMLLabelElement>; onPlayingCapture?: ReactEventHandler<HTMLLabelElement>; onProgress?: ReactEventHandler<HTMLLabelElement>; onProgressCapture?: ReactEventHandler<HTMLLabelElement>; onRateChange?: ReactEventHandler<HTMLLabelElement>; onRateChangeCapture?: ReactEventHandler<HTMLLabelElement>; onResize?: ReactEventHandler<HTMLLabelElement>; onResizeCapture?: ReactEventHandler<HTMLLabelElement>; onSeeked?: ReactEventHandler<HTMLLabelElement>; onSeekedCapture?: ReactEventHandler<HTMLLabelElement>; onSeeking?: ReactEventHandler<HTMLLabelElement>; onSeekingCapture?: ReactEventHandler<HTMLLabelElement>; onStalled?: ReactEventHandler<HTMLLabelElement>; onStalledCapture?: ReactEventHandler<HTMLLabelElement>; onSuspend?: ReactEventHandler<HTMLLabelElement>; onSuspendCapture?: ReactEventHandler<HTMLLabelElement>; onTimeUpdate?: ReactEventHandler<HTMLLabelElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLLabelElement>; onVolumeChange?: ReactEventHandler<HTMLLabelElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLLabelElement>; onWaiting?: ReactEventHandler<HTMLLabelElement>; onWaitingCapture?: ReactEventHandler<HTMLLabelElement>; onAuxClick?: MouseEventHandler<HTMLLabelElement>; onAuxClickCapture?: MouseEventHandler<HTMLLabelElement>; onClick?: MouseEventHandler<HTMLLabelElement>; onClickCapture?: MouseEventHandler<HTMLLabelElement>; onContextMenu?: MouseEventHandler<HTMLLabelElement>; onContextMenuCapture?: MouseEventHandler<HTMLLabelElement>; onDoubleClick?: MouseEventHandler<HTMLLabelElement>; onDoubleClickCapture?: MouseEventHandler<HTMLLabelElement>; onDrag?: DragEventHandler<HTMLLabelElement>; onDragCapture?: DragEventHandler<HTMLLabelElement>; onDragEnd?: DragEventHandler<HTMLLabelElement>; onDragEndCapture?: DragEventHandler<HTMLLabelElement>; onDragEnter?: DragEventHandler<HTMLLabelElement>; onDragEnterCapture?: DragEventHandler<HTMLLabelElement>; onDragExit?: DragEventHandler<HTMLLabelElement>; onDragExitCapture?: DragEventHandler<HTMLLabelElement>; onDragLeave?: DragEventHandler<HTMLLabelElement>; onDragLeaveCapture?: DragEventHandler<HTMLLabelElement>; onDragOver?: DragEventHandler<HTMLLabelElement>; onDragOverCapture?: DragEventHandler<HTMLLabelElement>; onDragStart?: DragEventHandler<HTMLLabelElement>; onDragStartCapture?: DragEventHandler<HTMLLabelElement>; onDrop?: DragEventHandler<HTMLLabelElement>; onDropCapture?: DragEventHandler<HTMLLabelElement>; onMouseDown?: MouseEventHandler<HTMLLabelElement>; onMouseDownCapture?: MouseEventHandler<HTMLLabelElement>; onMouseEnter?: MouseEventHandler<HTMLLabelElement>; onMouseLeave?: MouseEventHandler<HTMLLabelElement>; onMouseMove?: MouseEventHandler<HTMLLabelElement>; onMouseMoveCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOut?: MouseEventHandler<HTMLLabelElement>; onMouseOutCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOver?: MouseEventHandler<HTMLLabelElement>; onMouseOverCapture?: MouseEventHandler<HTMLLabelElement>; onMouseUp?: MouseEventHandler<HTMLLabelElement>; onMouseUpCapture?: MouseEventHandler<HTMLLabelElement>; onSelect?: ReactEventHandler<HTMLLabelElement>; onSelectCapture?: ReactEventHandler<HTMLLabelElement>; onTouchCancel?: TouchEventHandler<HTMLLabelElement>; onTouchCancelCapture?: TouchEventHandler<HTMLLabelElement>; onTouchEnd?: TouchEventHandler<HTMLLabelElement>; onTouchEndCapture?: TouchEventHandler<HTMLLabelElement>; onTouchMove?: TouchEventHandler<HTMLLabelElement>; onTouchMoveCapture?: TouchEventHandler<HTMLLabelElement>; onTouchStart?: TouchEventHandler<HTMLLabelElement>; onTouchStartCapture?: TouchEventHandler<HTMLLabelElement>; onPointerDown?: PointerEventHandler<HTMLLabelElement>; onPointerDownCapture?: PointerEventHandler<HTMLLabelElement>; onPointerMove?: PointerEventHandler<HTMLLabelElement>; onPointerMoveCapture?: PointerEventHandler<HTMLLabelElement>; onPointerUp?: PointerEventHandler<HTMLLabelElement>; onPointerUpCapture?: PointerEventHandler<HTMLLabelElement>; onPointerCancel?: PointerEventHandler<HTMLLabelElement>; onPointerCancelCapture?: PointerEventHandler<HTMLLabelElement>; onPointerEnter?: PointerEventHandler<HTMLLabelElement>; onPointerLeave?: PointerEventHandler<HTMLLabelElement>; onPointerOver?: PointerEventHandler<HTMLLabelElement>; onPointerOverCapture?: PointerEventHandler<HTMLLabelElement>; onPointerOut?: PointerEventHandler<HTMLLabelElement>; onPointerOutCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onScroll?: UIEventHandler<HTMLLabelElement>; onScrollCapture?: UIEventHandler<HTMLLabelElement>; onWheel?: WheelEventHandler<HTMLLabelElement>; onWheelCapture?: WheelEventHandler<HTMLLabelElement>; onAnimationStart?: AnimationEventHandler<HTMLLabelElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationEnd?: AnimationEventHandler<HTMLLabelElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationIteration?: AnimationEventHandler<HTMLLabelElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLLabelElement>; onTransitionEnd?: TransitionEventHandler<HTMLLabelElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLLabelElement>; htmlFor?: string; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "unstableFieldRef": {
          "type": "custom",
          "typeName": "((instance: FieldRef<TSection>) => void) | RefObject<FieldRef<TSection>>"
        },
        "timezone": {
          "type": "string"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DateFieldSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DateField",
        "locator": {
          "type": "named",
          "name": "DateField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/material#Box"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/TimeField#TimeField": {
      "id": "@mui/x-date-pickers/TimeField#TimeField",
      "name": "TimeField",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "format": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "color": {
          "type": "string-union",
          "values": [
            "error",
            "primary",
            "secondary",
            "info",
            "success",
            "warning"
          ]
        },
        "content": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense",
            "normal"
          ]
        },
        "slot": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "title": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "className": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "name": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"list\" | \"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"view\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"p\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | ComponentType<any>"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "focused": {
          "type": "boolean"
        },
        "hiddenLabel": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "variant": {
          "type": "custom",
          "typeName": "\"filled\""
        },
        "InputProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<FilledInputClasses>; hiddenLabel?: boolean; disableUnderline?: boolean; sx?: SxProps<Theme>; onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>; autoFocus?: boolean; color?: OverridableStringUnion<\"error\" | \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\", InputBasePropsColorOverrides>; content?: string; translate?: \"yes\" | \"no\"; margin?: \"none\" | \"dense\"; slot?: string; style?: CSSProperties; title?: string; className?: string; disabled?: boolean; tabIndex?: number; ref?: Ref<unknown>; name?: string; type?: string; value?: unknown; defaultChecked?: boolean; defaultValue?: unknown; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; 'aria-describedby'?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLInputElement | HTMLTextAreaElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; readOnly?: boolean; autoComplete?: string; error?: boolean; maxRows?: string | number; minRows?: string | number; multiline?: boolean; placeholder?: string; rows?: string | number; fullWidth?: boolean; required?: boolean; size?: OverridableStringUnion<\"small\" | \"medium\", InputBasePropsSizeOverrides>; inputProps?: InputBaseComponentProps; inputRef?: Ref<any>; endAdornment?: ReactNode; startAdornment?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }; disableInjectingGlobalStyles?: boolean; inputComponent?: ElementType<InputBaseComponentProps, keyof IntrinsicElements>; renderSuffix?: (state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }; }"
        },
        "FormHelperTextProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<FormHelperTextClasses> & Partial<ClassNameMap<never>>; disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"filled\" | \"outlined\" | \"standard\", FormHelperTextPropsVariantOverrides>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLParagraphElement>; autoFocus?: boolean; color?: string; content?: string; translate?: \"yes\" | \"no\"; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLParagraphElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLParagraphElement>; onCopyCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCut?: ClipboardEventHandler<HTMLParagraphElement>; onCutCapture?: ClipboardEventHandler<HTMLParagraphElement>; onPaste?: ClipboardEventHandler<HTMLParagraphElement>; onPasteCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCompositionEnd?: CompositionEventHandler<HTMLParagraphElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStart?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdate?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLParagraphElement>; onFocus?: FocusEventHandler<HTMLParagraphElement>; onFocusCapture?: FocusEventHandler<HTMLParagraphElement>; onBlur?: FocusEventHandler<HTMLParagraphElement>; onBlurCapture?: FocusEventHandler<HTMLParagraphElement>; onChangeCapture?: FormEventHandler<HTMLParagraphElement>; onBeforeInput?: FormEventHandler<HTMLParagraphElement>; onBeforeInputCapture?: FormEventHandler<HTMLParagraphElement>; onInput?: FormEventHandler<HTMLParagraphElement>; onInputCapture?: FormEventHandler<HTMLParagraphElement>; onReset?: FormEventHandler<HTMLParagraphElement>; onResetCapture?: FormEventHandler<HTMLParagraphElement>; onSubmit?: FormEventHandler<HTMLParagraphElement>; onSubmitCapture?: FormEventHandler<HTMLParagraphElement>; onInvalid?: FormEventHandler<HTMLParagraphElement>; onInvalidCapture?: FormEventHandler<HTMLParagraphElement>; onLoad?: ReactEventHandler<HTMLParagraphElement>; onLoadCapture?: ReactEventHandler<HTMLParagraphElement>; onError?: ReactEventHandler<HTMLParagraphElement>; onErrorCapture?: ReactEventHandler<HTMLParagraphElement>; onKeyDown?: KeyboardEventHandler<HTMLParagraphElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPress?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUp?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLParagraphElement>; onAbort?: ReactEventHandler<HTMLParagraphElement>; onAbortCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlay?: ReactEventHandler<HTMLParagraphElement>; onCanPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThrough?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLParagraphElement>; onDurationChange?: ReactEventHandler<HTMLParagraphElement>; onDurationChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onEmptied?: ReactEventHandler<HTMLParagraphElement>; onEmptiedCapture?: ReactEventHandler<HTMLParagraphElement>; onEncrypted?: ReactEventHandler<HTMLParagraphElement>; onEncryptedCapture?: ReactEventHandler<HTMLParagraphElement>; onEnded?: ReactEventHandler<HTMLParagraphElement>; onEndedCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedData?: ReactEventHandler<HTMLParagraphElement>; onLoadedDataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadata?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadStart?: ReactEventHandler<HTMLParagraphElement>; onLoadStartCapture?: ReactEventHandler<HTMLParagraphElement>; onPause?: ReactEventHandler<HTMLParagraphElement>; onPauseCapture?: ReactEventHandler<HTMLParagraphElement>; onPlay?: ReactEventHandler<HTMLParagraphElement>; onPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onPlaying?: ReactEventHandler<HTMLParagraphElement>; onPlayingCapture?: ReactEventHandler<HTMLParagraphElement>; onProgress?: ReactEventHandler<HTMLParagraphElement>; onProgressCapture?: ReactEventHandler<HTMLParagraphElement>; onRateChange?: ReactEventHandler<HTMLParagraphElement>; onRateChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onResize?: ReactEventHandler<HTMLParagraphElement>; onResizeCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeked?: ReactEventHandler<HTMLParagraphElement>; onSeekedCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeking?: ReactEventHandler<HTMLParagraphElement>; onSeekingCapture?: ReactEventHandler<HTMLParagraphElement>; onStalled?: ReactEventHandler<HTMLParagraphElement>; onStalledCapture?: ReactEventHandler<HTMLParagraphElement>; onSuspend?: ReactEventHandler<HTMLParagraphElement>; onSuspendCapture?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdate?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLParagraphElement>; onVolumeChange?: ReactEventHandler<HTMLParagraphElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onWaiting?: ReactEventHandler<HTMLParagraphElement>; onWaitingCapture?: ReactEventHandler<HTMLParagraphElement>; onAuxClick?: MouseEventHandler<HTMLParagraphElement>; onAuxClickCapture?: MouseEventHandler<HTMLParagraphElement>; onClick?: MouseEventHandler<HTMLParagraphElement>; onClickCapture?: MouseEventHandler<HTMLParagraphElement>; onContextMenu?: MouseEventHandler<HTMLParagraphElement>; onContextMenuCapture?: MouseEventHandler<HTMLParagraphElement>; onDoubleClick?: MouseEventHandler<HTMLParagraphElement>; onDoubleClickCapture?: MouseEventHandler<HTMLParagraphElement>; onDrag?: DragEventHandler<HTMLParagraphElement>; onDragCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnd?: DragEventHandler<HTMLParagraphElement>; onDragEndCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnter?: DragEventHandler<HTMLParagraphElement>; onDragEnterCapture?: DragEventHandler<HTMLParagraphElement>; onDragExit?: DragEventHandler<HTMLParagraphElement>; onDragExitCapture?: DragEventHandler<HTMLParagraphElement>; onDragLeave?: DragEventHandler<HTMLParagraphElement>; onDragLeaveCapture?: DragEventHandler<HTMLParagraphElement>; onDragOver?: DragEventHandler<HTMLParagraphElement>; onDragOverCapture?: DragEventHandler<HTMLParagraphElement>; onDragStart?: DragEventHandler<HTMLParagraphElement>; onDragStartCapture?: DragEventHandler<HTMLParagraphElement>; onDrop?: DragEventHandler<HTMLParagraphElement>; onDropCapture?: DragEventHandler<HTMLParagraphElement>; onMouseDown?: MouseEventHandler<HTMLParagraphElement>; onMouseDownCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseEnter?: MouseEventHandler<HTMLParagraphElement>; onMouseLeave?: MouseEventHandler<HTMLParagraphElement>; onMouseMove?: MouseEventHandler<HTMLParagraphElement>; onMouseMoveCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOut?: MouseEventHandler<HTMLParagraphElement>; onMouseOutCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOver?: MouseEventHandler<HTMLParagraphElement>; onMouseOverCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseUp?: MouseEventHandler<HTMLParagraphElement>; onMouseUpCapture?: MouseEventHandler<HTMLParagraphElement>; onSelect?: ReactEventHandler<HTMLParagraphElement>; onSelectCapture?: ReactEventHandler<HTMLParagraphElement>; onTouchCancel?: TouchEventHandler<HTMLParagraphElement>; onTouchCancelCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchEnd?: TouchEventHandler<HTMLParagraphElement>; onTouchEndCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchMove?: TouchEventHandler<HTMLParagraphElement>; onTouchMoveCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchStart?: TouchEventHandler<HTMLParagraphElement>; onTouchStartCapture?: TouchEventHandler<HTMLParagraphElement>; onPointerDown?: PointerEventHandler<HTMLParagraphElement>; onPointerDownCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerMove?: PointerEventHandler<HTMLParagraphElement>; onPointerMoveCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerUp?: PointerEventHandler<HTMLParagraphElement>; onPointerUpCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerCancel?: PointerEventHandler<HTMLParagraphElement>; onPointerCancelCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerEnter?: PointerEventHandler<HTMLParagraphElement>; onPointerLeave?: PointerEventHandler<HTMLParagraphElement>; onPointerOver?: PointerEventHandler<HTMLParagraphElement>; onPointerOverCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerOut?: PointerEventHandler<HTMLParagraphElement>; onPointerOutCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onScroll?: UIEventHandler<HTMLParagraphElement>; onScrollCapture?: UIEventHandler<HTMLParagraphElement>; onWheel?: WheelEventHandler<HTMLParagraphElement>; onWheelCapture?: WheelEventHandler<HTMLParagraphElement>; onAnimationStart?: AnimationEventHandler<HTMLParagraphElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEnd?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIteration?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLParagraphElement>; onTransitionEnd?: TransitionEventHandler<HTMLParagraphElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLParagraphElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "helperText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "InputLabelProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<InputLabelClasses> & Partial<ClassNameMap<never>>; color?: \"error\" | \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\"; disableAnimation?: boolean; disabled?: boolean; error?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; shrink?: boolean; size?: OverridableStringUnion<\"small\" | \"normal\", InputLabelPropsSizeOverrides>; sx?: SxProps<Theme>; variant?: \"filled\" | \"outlined\" | \"standard\"; children?: ReactNode; filled?: boolean; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLLabelElement>; autoFocus?: boolean; content?: string; translate?: \"yes\" | \"no\"; form?: string; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLLabelElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLLabelElement>; onCopyCapture?: ClipboardEventHandler<HTMLLabelElement>; onCut?: ClipboardEventHandler<HTMLLabelElement>; onCutCapture?: ClipboardEventHandler<HTMLLabelElement>; onPaste?: ClipboardEventHandler<HTMLLabelElement>; onPasteCapture?: ClipboardEventHandler<HTMLLabelElement>; onCompositionEnd?: CompositionEventHandler<HTMLLabelElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionStart?: CompositionEventHandler<HTMLLabelElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdate?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLLabelElement>; onFocus?: FocusEventHandler<HTMLLabelElement>; onFocusCapture?: FocusEventHandler<HTMLLabelElement>; onBlur?: FocusEventHandler<HTMLLabelElement>; onBlurCapture?: FocusEventHandler<HTMLLabelElement>; onChangeCapture?: FormEventHandler<HTMLLabelElement>; onBeforeInput?: FormEventHandler<HTMLLabelElement>; onBeforeInputCapture?: FormEventHandler<HTMLLabelElement>; onInput?: FormEventHandler<HTMLLabelElement>; onInputCapture?: FormEventHandler<HTMLLabelElement>; onReset?: FormEventHandler<HTMLLabelElement>; onResetCapture?: FormEventHandler<HTMLLabelElement>; onSubmit?: FormEventHandler<HTMLLabelElement>; onSubmitCapture?: FormEventHandler<HTMLLabelElement>; onInvalid?: FormEventHandler<HTMLLabelElement>; onInvalidCapture?: FormEventHandler<HTMLLabelElement>; onLoad?: ReactEventHandler<HTMLLabelElement>; onLoadCapture?: ReactEventHandler<HTMLLabelElement>; onError?: ReactEventHandler<HTMLLabelElement>; onErrorCapture?: ReactEventHandler<HTMLLabelElement>; onKeyDown?: KeyboardEventHandler<HTMLLabelElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyPress?: KeyboardEventHandler<HTMLLabelElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyUp?: KeyboardEventHandler<HTMLLabelElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLLabelElement>; onAbort?: ReactEventHandler<HTMLLabelElement>; onAbortCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlay?: ReactEventHandler<HTMLLabelElement>; onCanPlayCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlayThrough?: ReactEventHandler<HTMLLabelElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLLabelElement>; onDurationChange?: ReactEventHandler<HTMLLabelElement>; onDurationChangeCapture?: ReactEventHandler<HTMLLabelElement>; onEmptied?: ReactEventHandler<HTMLLabelElement>; onEmptiedCapture?: ReactEventHandler<HTMLLabelElement>; onEncrypted?: ReactEventHandler<HTMLLabelElement>; onEncryptedCapture?: ReactEventHandler<HTMLLabelElement>; onEnded?: ReactEventHandler<HTMLLabelElement>; onEndedCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedData?: ReactEventHandler<HTMLLabelElement>; onLoadedDataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadata?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadStart?: ReactEventHandler<HTMLLabelElement>; onLoadStartCapture?: ReactEventHandler<HTMLLabelElement>; onPause?: ReactEventHandler<HTMLLabelElement>; onPauseCapture?: ReactEventHandler<HTMLLabelElement>; onPlay?: ReactEventHandler<HTMLLabelElement>; onPlayCapture?: ReactEventHandler<HTMLLabelElement>; onPlaying?: ReactEventHandler<HTMLLabelElement>; onPlayingCapture?: ReactEventHandler<HTMLLabelElement>; onProgress?: ReactEventHandler<HTMLLabelElement>; onProgressCapture?: ReactEventHandler<HTMLLabelElement>; onRateChange?: ReactEventHandler<HTMLLabelElement>; onRateChangeCapture?: ReactEventHandler<HTMLLabelElement>; onResize?: ReactEventHandler<HTMLLabelElement>; onResizeCapture?: ReactEventHandler<HTMLLabelElement>; onSeeked?: ReactEventHandler<HTMLLabelElement>; onSeekedCapture?: ReactEventHandler<HTMLLabelElement>; onSeeking?: ReactEventHandler<HTMLLabelElement>; onSeekingCapture?: ReactEventHandler<HTMLLabelElement>; onStalled?: ReactEventHandler<HTMLLabelElement>; onStalledCapture?: ReactEventHandler<HTMLLabelElement>; onSuspend?: ReactEventHandler<HTMLLabelElement>; onSuspendCapture?: ReactEventHandler<HTMLLabelElement>; onTimeUpdate?: ReactEventHandler<HTMLLabelElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLLabelElement>; onVolumeChange?: ReactEventHandler<HTMLLabelElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLLabelElement>; onWaiting?: ReactEventHandler<HTMLLabelElement>; onWaitingCapture?: ReactEventHandler<HTMLLabelElement>; onAuxClick?: MouseEventHandler<HTMLLabelElement>; onAuxClickCapture?: MouseEventHandler<HTMLLabelElement>; onClick?: MouseEventHandler<HTMLLabelElement>; onClickCapture?: MouseEventHandler<HTMLLabelElement>; onContextMenu?: MouseEventHandler<HTMLLabelElement>; onContextMenuCapture?: MouseEventHandler<HTMLLabelElement>; onDoubleClick?: MouseEventHandler<HTMLLabelElement>; onDoubleClickCapture?: MouseEventHandler<HTMLLabelElement>; onDrag?: DragEventHandler<HTMLLabelElement>; onDragCapture?: DragEventHandler<HTMLLabelElement>; onDragEnd?: DragEventHandler<HTMLLabelElement>; onDragEndCapture?: DragEventHandler<HTMLLabelElement>; onDragEnter?: DragEventHandler<HTMLLabelElement>; onDragEnterCapture?: DragEventHandler<HTMLLabelElement>; onDragExit?: DragEventHandler<HTMLLabelElement>; onDragExitCapture?: DragEventHandler<HTMLLabelElement>; onDragLeave?: DragEventHandler<HTMLLabelElement>; onDragLeaveCapture?: DragEventHandler<HTMLLabelElement>; onDragOver?: DragEventHandler<HTMLLabelElement>; onDragOverCapture?: DragEventHandler<HTMLLabelElement>; onDragStart?: DragEventHandler<HTMLLabelElement>; onDragStartCapture?: DragEventHandler<HTMLLabelElement>; onDrop?: DragEventHandler<HTMLLabelElement>; onDropCapture?: DragEventHandler<HTMLLabelElement>; onMouseDown?: MouseEventHandler<HTMLLabelElement>; onMouseDownCapture?: MouseEventHandler<HTMLLabelElement>; onMouseEnter?: MouseEventHandler<HTMLLabelElement>; onMouseLeave?: MouseEventHandler<HTMLLabelElement>; onMouseMove?: MouseEventHandler<HTMLLabelElement>; onMouseMoveCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOut?: MouseEventHandler<HTMLLabelElement>; onMouseOutCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOver?: MouseEventHandler<HTMLLabelElement>; onMouseOverCapture?: MouseEventHandler<HTMLLabelElement>; onMouseUp?: MouseEventHandler<HTMLLabelElement>; onMouseUpCapture?: MouseEventHandler<HTMLLabelElement>; onSelect?: ReactEventHandler<HTMLLabelElement>; onSelectCapture?: ReactEventHandler<HTMLLabelElement>; onTouchCancel?: TouchEventHandler<HTMLLabelElement>; onTouchCancelCapture?: TouchEventHandler<HTMLLabelElement>; onTouchEnd?: TouchEventHandler<HTMLLabelElement>; onTouchEndCapture?: TouchEventHandler<HTMLLabelElement>; onTouchMove?: TouchEventHandler<HTMLLabelElement>; onTouchMoveCapture?: TouchEventHandler<HTMLLabelElement>; onTouchStart?: TouchEventHandler<HTMLLabelElement>; onTouchStartCapture?: TouchEventHandler<HTMLLabelElement>; onPointerDown?: PointerEventHandler<HTMLLabelElement>; onPointerDownCapture?: PointerEventHandler<HTMLLabelElement>; onPointerMove?: PointerEventHandler<HTMLLabelElement>; onPointerMoveCapture?: PointerEventHandler<HTMLLabelElement>; onPointerUp?: PointerEventHandler<HTMLLabelElement>; onPointerUpCapture?: PointerEventHandler<HTMLLabelElement>; onPointerCancel?: PointerEventHandler<HTMLLabelElement>; onPointerCancelCapture?: PointerEventHandler<HTMLLabelElement>; onPointerEnter?: PointerEventHandler<HTMLLabelElement>; onPointerLeave?: PointerEventHandler<HTMLLabelElement>; onPointerOver?: PointerEventHandler<HTMLLabelElement>; onPointerOverCapture?: PointerEventHandler<HTMLLabelElement>; onPointerOut?: PointerEventHandler<HTMLLabelElement>; onPointerOutCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onScroll?: UIEventHandler<HTMLLabelElement>; onScrollCapture?: UIEventHandler<HTMLLabelElement>; onWheel?: WheelEventHandler<HTMLLabelElement>; onWheelCapture?: WheelEventHandler<HTMLLabelElement>; onAnimationStart?: AnimationEventHandler<HTMLLabelElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationEnd?: AnimationEventHandler<HTMLLabelElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationIteration?: AnimationEventHandler<HTMLLabelElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLLabelElement>; onTransitionEnd?: TransitionEventHandler<HTMLLabelElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLLabelElement>; htmlFor?: string; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "ampm": {
          "type": "boolean"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "shouldRespectLeadingZeros": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "unstableFieldRef": {
          "type": "custom",
          "typeName": "((instance: FieldRef<TSection>) => void) | RefObject<FieldRef<TSection>>"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "timezone": {
          "type": "string"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "clearable": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "TimeFieldSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "TimeFieldSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/TimeField",
        "locator": {
          "type": "named",
          "name": "TimeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/internals/demo#DemoContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DateTimeField#DateTimeField": {
      "id": "@mui/x-date-pickers/DateTimeField#DateTimeField",
      "name": "DateTimeField",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "format": {
          "type": "string"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "color": {
          "type": "string-union",
          "values": [
            "error",
            "primary",
            "secondary",
            "info",
            "success",
            "warning"
          ]
        },
        "content": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense",
            "normal"
          ]
        },
        "slot": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "title": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "className": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "ref": {
          "type": "custom",
          "typeName": "R extends string ? never : R"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "name": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"list\" | \"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"view\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"p\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | ComponentType<any>"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "focused": {
          "type": "boolean"
        },
        "hiddenLabel": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "variant": {
          "type": "custom",
          "typeName": "\"filled\""
        },
        "InputProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<FilledInputClasses>; hiddenLabel?: boolean; disableUnderline?: boolean; sx?: SxProps<Theme>; onChange?: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>; autoFocus?: boolean; color?: OverridableStringUnion<\"error\" | \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\", InputBasePropsColorOverrides>; content?: string; translate?: \"yes\" | \"no\"; margin?: \"none\" | \"dense\"; slot?: string; style?: CSSProperties; title?: string; className?: string; disabled?: boolean; tabIndex?: number; ref?: Ref<unknown>; name?: string; type?: string; value?: unknown; defaultChecked?: boolean; defaultValue?: unknown; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: \"inherit\" | \"plaintext-only\" | Booleanish; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; 'aria-describedby'?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLInputElement | HTMLTextAreaElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClick?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; readOnly?: boolean; autoComplete?: string; error?: boolean; maxRows?: string | number; minRows?: string | number; multiline?: boolean; placeholder?: string; rows?: string | number; fullWidth?: boolean; required?: boolean; size?: OverridableStringUnion<\"small\" | \"medium\", InputBasePropsSizeOverrides>; inputProps?: InputBaseComponentProps; inputRef?: Ref<any>; endAdornment?: ReactNode; startAdornment?: ReactNode; components?: { Root?: ElementType<any, keyof IntrinsicElements>; Input?: ElementType<any, keyof IntrinsicElements>; }; componentsProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides; }; disableInjectingGlobalStyles?: boolean; inputComponent?: ElementType<InputBaseComponentProps, keyof IntrinsicElements>; renderSuffix?: (state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode; slotProps?: { root?: HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; input?: InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme>; }; }; slots?: { root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }; }"
        },
        "FormHelperTextProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<FormHelperTextClasses> & Partial<ClassNameMap<never>>; disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"filled\" | \"outlined\" | \"standard\", FormHelperTextPropsVariantOverrides>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLParagraphElement>; autoFocus?: boolean; color?: string; content?: string; translate?: \"yes\" | \"no\"; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLParagraphElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLParagraphElement>; onCopyCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCut?: ClipboardEventHandler<HTMLParagraphElement>; onCutCapture?: ClipboardEventHandler<HTMLParagraphElement>; onPaste?: ClipboardEventHandler<HTMLParagraphElement>; onPasteCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCompositionEnd?: CompositionEventHandler<HTMLParagraphElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStart?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdate?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLParagraphElement>; onFocus?: FocusEventHandler<HTMLParagraphElement>; onFocusCapture?: FocusEventHandler<HTMLParagraphElement>; onBlur?: FocusEventHandler<HTMLParagraphElement>; onBlurCapture?: FocusEventHandler<HTMLParagraphElement>; onChangeCapture?: FormEventHandler<HTMLParagraphElement>; onBeforeInput?: FormEventHandler<HTMLParagraphElement>; onBeforeInputCapture?: FormEventHandler<HTMLParagraphElement>; onInput?: FormEventHandler<HTMLParagraphElement>; onInputCapture?: FormEventHandler<HTMLParagraphElement>; onReset?: FormEventHandler<HTMLParagraphElement>; onResetCapture?: FormEventHandler<HTMLParagraphElement>; onSubmit?: FormEventHandler<HTMLParagraphElement>; onSubmitCapture?: FormEventHandler<HTMLParagraphElement>; onInvalid?: FormEventHandler<HTMLParagraphElement>; onInvalidCapture?: FormEventHandler<HTMLParagraphElement>; onLoad?: ReactEventHandler<HTMLParagraphElement>; onLoadCapture?: ReactEventHandler<HTMLParagraphElement>; onError?: ReactEventHandler<HTMLParagraphElement>; onErrorCapture?: ReactEventHandler<HTMLParagraphElement>; onKeyDown?: KeyboardEventHandler<HTMLParagraphElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPress?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUp?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLParagraphElement>; onAbort?: ReactEventHandler<HTMLParagraphElement>; onAbortCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlay?: ReactEventHandler<HTMLParagraphElement>; onCanPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThrough?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLParagraphElement>; onDurationChange?: ReactEventHandler<HTMLParagraphElement>; onDurationChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onEmptied?: ReactEventHandler<HTMLParagraphElement>; onEmptiedCapture?: ReactEventHandler<HTMLParagraphElement>; onEncrypted?: ReactEventHandler<HTMLParagraphElement>; onEncryptedCapture?: ReactEventHandler<HTMLParagraphElement>; onEnded?: ReactEventHandler<HTMLParagraphElement>; onEndedCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedData?: ReactEventHandler<HTMLParagraphElement>; onLoadedDataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadata?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadStart?: ReactEventHandler<HTMLParagraphElement>; onLoadStartCapture?: ReactEventHandler<HTMLParagraphElement>; onPause?: ReactEventHandler<HTMLParagraphElement>; onPauseCapture?: ReactEventHandler<HTMLParagraphElement>; onPlay?: ReactEventHandler<HTMLParagraphElement>; onPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onPlaying?: ReactEventHandler<HTMLParagraphElement>; onPlayingCapture?: ReactEventHandler<HTMLParagraphElement>; onProgress?: ReactEventHandler<HTMLParagraphElement>; onProgressCapture?: ReactEventHandler<HTMLParagraphElement>; onRateChange?: ReactEventHandler<HTMLParagraphElement>; onRateChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onResize?: ReactEventHandler<HTMLParagraphElement>; onResizeCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeked?: ReactEventHandler<HTMLParagraphElement>; onSeekedCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeking?: ReactEventHandler<HTMLParagraphElement>; onSeekingCapture?: ReactEventHandler<HTMLParagraphElement>; onStalled?: ReactEventHandler<HTMLParagraphElement>; onStalledCapture?: ReactEventHandler<HTMLParagraphElement>; onSuspend?: ReactEventHandler<HTMLParagraphElement>; onSuspendCapture?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdate?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLParagraphElement>; onVolumeChange?: ReactEventHandler<HTMLParagraphElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onWaiting?: ReactEventHandler<HTMLParagraphElement>; onWaitingCapture?: ReactEventHandler<HTMLParagraphElement>; onAuxClick?: MouseEventHandler<HTMLParagraphElement>; onAuxClickCapture?: MouseEventHandler<HTMLParagraphElement>; onClick?: MouseEventHandler<HTMLParagraphElement>; onClickCapture?: MouseEventHandler<HTMLParagraphElement>; onContextMenu?: MouseEventHandler<HTMLParagraphElement>; onContextMenuCapture?: MouseEventHandler<HTMLParagraphElement>; onDoubleClick?: MouseEventHandler<HTMLParagraphElement>; onDoubleClickCapture?: MouseEventHandler<HTMLParagraphElement>; onDrag?: DragEventHandler<HTMLParagraphElement>; onDragCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnd?: DragEventHandler<HTMLParagraphElement>; onDragEndCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnter?: DragEventHandler<HTMLParagraphElement>; onDragEnterCapture?: DragEventHandler<HTMLParagraphElement>; onDragExit?: DragEventHandler<HTMLParagraphElement>; onDragExitCapture?: DragEventHandler<HTMLParagraphElement>; onDragLeave?: DragEventHandler<HTMLParagraphElement>; onDragLeaveCapture?: DragEventHandler<HTMLParagraphElement>; onDragOver?: DragEventHandler<HTMLParagraphElement>; onDragOverCapture?: DragEventHandler<HTMLParagraphElement>; onDragStart?: DragEventHandler<HTMLParagraphElement>; onDragStartCapture?: DragEventHandler<HTMLParagraphElement>; onDrop?: DragEventHandler<HTMLParagraphElement>; onDropCapture?: DragEventHandler<HTMLParagraphElement>; onMouseDown?: MouseEventHandler<HTMLParagraphElement>; onMouseDownCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseEnter?: MouseEventHandler<HTMLParagraphElement>; onMouseLeave?: MouseEventHandler<HTMLParagraphElement>; onMouseMove?: MouseEventHandler<HTMLParagraphElement>; onMouseMoveCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOut?: MouseEventHandler<HTMLParagraphElement>; onMouseOutCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOver?: MouseEventHandler<HTMLParagraphElement>; onMouseOverCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseUp?: MouseEventHandler<HTMLParagraphElement>; onMouseUpCapture?: MouseEventHandler<HTMLParagraphElement>; onSelect?: ReactEventHandler<HTMLParagraphElement>; onSelectCapture?: ReactEventHandler<HTMLParagraphElement>; onTouchCancel?: TouchEventHandler<HTMLParagraphElement>; onTouchCancelCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchEnd?: TouchEventHandler<HTMLParagraphElement>; onTouchEndCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchMove?: TouchEventHandler<HTMLParagraphElement>; onTouchMoveCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchStart?: TouchEventHandler<HTMLParagraphElement>; onTouchStartCapture?: TouchEventHandler<HTMLParagraphElement>; onPointerDown?: PointerEventHandler<HTMLParagraphElement>; onPointerDownCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerMove?: PointerEventHandler<HTMLParagraphElement>; onPointerMoveCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerUp?: PointerEventHandler<HTMLParagraphElement>; onPointerUpCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerCancel?: PointerEventHandler<HTMLParagraphElement>; onPointerCancelCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerEnter?: PointerEventHandler<HTMLParagraphElement>; onPointerLeave?: PointerEventHandler<HTMLParagraphElement>; onPointerOver?: PointerEventHandler<HTMLParagraphElement>; onPointerOverCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerOut?: PointerEventHandler<HTMLParagraphElement>; onPointerOutCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onScroll?: UIEventHandler<HTMLParagraphElement>; onScrollCapture?: UIEventHandler<HTMLParagraphElement>; onWheel?: WheelEventHandler<HTMLParagraphElement>; onWheelCapture?: WheelEventHandler<HTMLParagraphElement>; onAnimationStart?: AnimationEventHandler<HTMLParagraphElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEnd?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIteration?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLParagraphElement>; onTransitionEnd?: TransitionEventHandler<HTMLParagraphElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLParagraphElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "helperText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "InputLabelProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<InputLabelClasses> & Partial<ClassNameMap<never>>; color?: \"error\" | \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\"; disableAnimation?: boolean; disabled?: boolean; error?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; shrink?: boolean; size?: OverridableStringUnion<\"small\" | \"normal\", InputLabelPropsSizeOverrides>; sx?: SxProps<Theme>; variant?: \"filled\" | \"outlined\" | \"standard\"; children?: ReactNode; filled?: boolean; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLLabelElement>; autoFocus?: boolean; content?: string; translate?: \"yes\" | \"no\"; form?: string; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLLabelElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLLabelElement>; onCopyCapture?: ClipboardEventHandler<HTMLLabelElement>; onCut?: ClipboardEventHandler<HTMLLabelElement>; onCutCapture?: ClipboardEventHandler<HTMLLabelElement>; onPaste?: ClipboardEventHandler<HTMLLabelElement>; onPasteCapture?: ClipboardEventHandler<HTMLLabelElement>; onCompositionEnd?: CompositionEventHandler<HTMLLabelElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionStart?: CompositionEventHandler<HTMLLabelElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdate?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLLabelElement>; onFocus?: FocusEventHandler<HTMLLabelElement>; onFocusCapture?: FocusEventHandler<HTMLLabelElement>; onBlur?: FocusEventHandler<HTMLLabelElement>; onBlurCapture?: FocusEventHandler<HTMLLabelElement>; onChangeCapture?: FormEventHandler<HTMLLabelElement>; onBeforeInput?: FormEventHandler<HTMLLabelElement>; onBeforeInputCapture?: FormEventHandler<HTMLLabelElement>; onInput?: FormEventHandler<HTMLLabelElement>; onInputCapture?: FormEventHandler<HTMLLabelElement>; onReset?: FormEventHandler<HTMLLabelElement>; onResetCapture?: FormEventHandler<HTMLLabelElement>; onSubmit?: FormEventHandler<HTMLLabelElement>; onSubmitCapture?: FormEventHandler<HTMLLabelElement>; onInvalid?: FormEventHandler<HTMLLabelElement>; onInvalidCapture?: FormEventHandler<HTMLLabelElement>; onLoad?: ReactEventHandler<HTMLLabelElement>; onLoadCapture?: ReactEventHandler<HTMLLabelElement>; onError?: ReactEventHandler<HTMLLabelElement>; onErrorCapture?: ReactEventHandler<HTMLLabelElement>; onKeyDown?: KeyboardEventHandler<HTMLLabelElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyPress?: KeyboardEventHandler<HTMLLabelElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyUp?: KeyboardEventHandler<HTMLLabelElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLLabelElement>; onAbort?: ReactEventHandler<HTMLLabelElement>; onAbortCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlay?: ReactEventHandler<HTMLLabelElement>; onCanPlayCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlayThrough?: ReactEventHandler<HTMLLabelElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLLabelElement>; onDurationChange?: ReactEventHandler<HTMLLabelElement>; onDurationChangeCapture?: ReactEventHandler<HTMLLabelElement>; onEmptied?: ReactEventHandler<HTMLLabelElement>; onEmptiedCapture?: ReactEventHandler<HTMLLabelElement>; onEncrypted?: ReactEventHandler<HTMLLabelElement>; onEncryptedCapture?: ReactEventHandler<HTMLLabelElement>; onEnded?: ReactEventHandler<HTMLLabelElement>; onEndedCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedData?: ReactEventHandler<HTMLLabelElement>; onLoadedDataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadata?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadStart?: ReactEventHandler<HTMLLabelElement>; onLoadStartCapture?: ReactEventHandler<HTMLLabelElement>; onPause?: ReactEventHandler<HTMLLabelElement>; onPauseCapture?: ReactEventHandler<HTMLLabelElement>; onPlay?: ReactEventHandler<HTMLLabelElement>; onPlayCapture?: ReactEventHandler<HTMLLabelElement>; onPlaying?: ReactEventHandler<HTMLLabelElement>; onPlayingCapture?: ReactEventHandler<HTMLLabelElement>; onProgress?: ReactEventHandler<HTMLLabelElement>; onProgressCapture?: ReactEventHandler<HTMLLabelElement>; onRateChange?: ReactEventHandler<HTMLLabelElement>; onRateChangeCapture?: ReactEventHandler<HTMLLabelElement>; onResize?: ReactEventHandler<HTMLLabelElement>; onResizeCapture?: ReactEventHandler<HTMLLabelElement>; onSeeked?: ReactEventHandler<HTMLLabelElement>; onSeekedCapture?: ReactEventHandler<HTMLLabelElement>; onSeeking?: ReactEventHandler<HTMLLabelElement>; onSeekingCapture?: ReactEventHandler<HTMLLabelElement>; onStalled?: ReactEventHandler<HTMLLabelElement>; onStalledCapture?: ReactEventHandler<HTMLLabelElement>; onSuspend?: ReactEventHandler<HTMLLabelElement>; onSuspendCapture?: ReactEventHandler<HTMLLabelElement>; onTimeUpdate?: ReactEventHandler<HTMLLabelElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLLabelElement>; onVolumeChange?: ReactEventHandler<HTMLLabelElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLLabelElement>; onWaiting?: ReactEventHandler<HTMLLabelElement>; onWaitingCapture?: ReactEventHandler<HTMLLabelElement>; onAuxClick?: MouseEventHandler<HTMLLabelElement>; onAuxClickCapture?: MouseEventHandler<HTMLLabelElement>; onClick?: MouseEventHandler<HTMLLabelElement>; onClickCapture?: MouseEventHandler<HTMLLabelElement>; onContextMenu?: MouseEventHandler<HTMLLabelElement>; onContextMenuCapture?: MouseEventHandler<HTMLLabelElement>; onDoubleClick?: MouseEventHandler<HTMLLabelElement>; onDoubleClickCapture?: MouseEventHandler<HTMLLabelElement>; onDrag?: DragEventHandler<HTMLLabelElement>; onDragCapture?: DragEventHandler<HTMLLabelElement>; onDragEnd?: DragEventHandler<HTMLLabelElement>; onDragEndCapture?: DragEventHandler<HTMLLabelElement>; onDragEnter?: DragEventHandler<HTMLLabelElement>; onDragEnterCapture?: DragEventHandler<HTMLLabelElement>; onDragExit?: DragEventHandler<HTMLLabelElement>; onDragExitCapture?: DragEventHandler<HTMLLabelElement>; onDragLeave?: DragEventHandler<HTMLLabelElement>; onDragLeaveCapture?: DragEventHandler<HTMLLabelElement>; onDragOver?: DragEventHandler<HTMLLabelElement>; onDragOverCapture?: DragEventHandler<HTMLLabelElement>; onDragStart?: DragEventHandler<HTMLLabelElement>; onDragStartCapture?: DragEventHandler<HTMLLabelElement>; onDrop?: DragEventHandler<HTMLLabelElement>; onDropCapture?: DragEventHandler<HTMLLabelElement>; onMouseDown?: MouseEventHandler<HTMLLabelElement>; onMouseDownCapture?: MouseEventHandler<HTMLLabelElement>; onMouseEnter?: MouseEventHandler<HTMLLabelElement>; onMouseLeave?: MouseEventHandler<HTMLLabelElement>; onMouseMove?: MouseEventHandler<HTMLLabelElement>; onMouseMoveCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOut?: MouseEventHandler<HTMLLabelElement>; onMouseOutCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOver?: MouseEventHandler<HTMLLabelElement>; onMouseOverCapture?: MouseEventHandler<HTMLLabelElement>; onMouseUp?: MouseEventHandler<HTMLLabelElement>; onMouseUpCapture?: MouseEventHandler<HTMLLabelElement>; onSelect?: ReactEventHandler<HTMLLabelElement>; onSelectCapture?: ReactEventHandler<HTMLLabelElement>; onTouchCancel?: TouchEventHandler<HTMLLabelElement>; onTouchCancelCapture?: TouchEventHandler<HTMLLabelElement>; onTouchEnd?: TouchEventHandler<HTMLLabelElement>; onTouchEndCapture?: TouchEventHandler<HTMLLabelElement>; onTouchMove?: TouchEventHandler<HTMLLabelElement>; onTouchMoveCapture?: TouchEventHandler<HTMLLabelElement>; onTouchStart?: TouchEventHandler<HTMLLabelElement>; onTouchStartCapture?: TouchEventHandler<HTMLLabelElement>; onPointerDown?: PointerEventHandler<HTMLLabelElement>; onPointerDownCapture?: PointerEventHandler<HTMLLabelElement>; onPointerMove?: PointerEventHandler<HTMLLabelElement>; onPointerMoveCapture?: PointerEventHandler<HTMLLabelElement>; onPointerUp?: PointerEventHandler<HTMLLabelElement>; onPointerUpCapture?: PointerEventHandler<HTMLLabelElement>; onPointerCancel?: PointerEventHandler<HTMLLabelElement>; onPointerCancelCapture?: PointerEventHandler<HTMLLabelElement>; onPointerEnter?: PointerEventHandler<HTMLLabelElement>; onPointerLeave?: PointerEventHandler<HTMLLabelElement>; onPointerOver?: PointerEventHandler<HTMLLabelElement>; onPointerOverCapture?: PointerEventHandler<HTMLLabelElement>; onPointerOut?: PointerEventHandler<HTMLLabelElement>; onPointerOutCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onScroll?: UIEventHandler<HTMLLabelElement>; onScrollCapture?: UIEventHandler<HTMLLabelElement>; onWheel?: WheelEventHandler<HTMLLabelElement>; onWheelCapture?: WheelEventHandler<HTMLLabelElement>; onAnimationStart?: AnimationEventHandler<HTMLLabelElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationEnd?: AnimationEventHandler<HTMLLabelElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationIteration?: AnimationEventHandler<HTMLLabelElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLLabelElement>; onTransitionEnd?: TransitionEventHandler<HTMLLabelElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLLabelElement>; htmlFor?: string; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "InputBaseComponentProps"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: any) => void) | RefObject<any>"
        },
        "ampm": {
          "type": "boolean"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "shouldRespectLeadingZeros": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "unstableFieldRef": {
          "type": "custom",
          "typeName": "((instance: FieldRef<TSection>) => void) | RefObject<FieldRef<TSection>>"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "timezone": {
          "type": "string"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "minDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "clearable": {
          "type": "boolean"
        },
        "slots": {
          "type": "custom",
          "typeName": "DateTimeFieldSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DateTimeFieldSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DateTimeField",
        "locator": {
          "type": "named",
          "name": "DateTimeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/internals/demo#DemoContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DateCalendar#DateCalendar": {
      "id": "@mui/x-date-pickers/DateCalendar#DateCalendar",
      "name": "DateCalendar",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TDate"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DateCalendarSlotProps<TDate>"
        },
        "value": {
          "type": "custom",
          "typeName": "TDate"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "slots": {
          "type": "custom",
          "typeName": "DateCalendarSlots<TDate>"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "loading": {
          "type": "boolean"
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; viewTransitionContainer?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "timezone": {
          "type": "string"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "focusedView": {
          "type": "custom",
          "typeName": "TView"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DateCalendar",
        "locator": {
          "type": "named",
          "name": "DateCalendar"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/material/Grid#Grid"
        ],
        "exclusiveChildren": [
          "@mui/x-date-pickers/DayCalendarSkeleton#DayCalendarSkeleton"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/MonthCalendar#MonthCalendar": {
      "id": "@mui/x-date-pickers/MonthCalendar#MonthCalendar",
      "name": "MonthCalendar",
      "props": {
        "autoFocus": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "MonthCalendarSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "MonthCalendarSlotProps"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "TDate"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TDate"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "hasFocus": {
          "type": "boolean"
        },
        "gridLabelId": {
          "type": "string"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/MonthCalendar",
        "locator": {
          "type": "named",
          "name": "MonthCalendar"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/YearCalendar#YearCalendar": {
      "id": "@mui/x-date-pickers/YearCalendar#YearCalendar",
      "name": "YearCalendar",
      "props": {
        "autoFocus": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "YearCalendarSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "YearCalendarSlotProps"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "TDate"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TDate"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "hasFocus": {
          "type": "boolean"
        },
        "gridLabelId": {
          "type": "string"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/YearCalendar",
        "locator": {
          "type": "named",
          "name": "YearCalendar"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DayCalendarSkeleton#DayCalendarSkeleton": {
      "id": "@mui/x-date-pickers/DayCalendarSkeleton#DayCalendarSkeleton",
      "name": "DayCalendarSkeleton",
      "props": {
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; week?: string; daySkeleton?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "ref": {
          "type": "custom",
          "typeName": "((instance: HTMLDivElement) => void) | RefObject<HTMLDivElement>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"list\" | \"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DayCalendarSkeleton",
        "locator": {
          "type": "named",
          "name": "DayCalendarSkeleton"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/DateCalendar#DateCalendar"
        ],
        "exclusiveParent": "@mui/x-date-pickers/DateCalendar#DateCalendar"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DatePicker#DatePicker": {
      "id": "@mui/x-date-pickers/DatePicker#DatePicker",
      "name": "DatePicker",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "format": {
          "type": "string"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DatePickerSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "slots": {
          "type": "custom",
          "typeName": "DatePickerSlots<TDate>"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "open": {
          "type": "boolean"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "desktopModeMediaQuery": {
          "type": "string"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ year?: PickerViewRenderer<TDate, \"year\", DateViewRendererProps<TDate, DateView>, {}>; month?: PickerViewRenderer<TDate, \"month\", DateViewRendererProps<TDate, DateView>, {}>; day?: PickerViewRenderer<TDate, \"day\", DateViewRendererProps<TDate, DateView>, {}>; }"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "loading": {
          "type": "boolean"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DatePicker",
        "locator": {
          "type": "named",
          "name": "DatePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/material/Stack#Stack",
          "@mui/material#Box"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DatePicker#DatePickerToolbar": {
      "id": "@mui/x-date-pickers/DatePicker#DatePickerToolbar",
      "name": "DatePickerToolbar",
      "props": {
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "isLandscape": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "titleId": {
          "type": "string"
        },
        "toolbarFormat": {
          "type": "string"
        },
        "toolbarPlaceholder": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "className": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; title?: string; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DatePicker",
        "locator": {
          "type": "named",
          "name": "DatePickerToolbar"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DesktopDatePicker#DesktopDatePicker": {
      "id": "@mui/x-date-pickers/DesktopDatePicker#DesktopDatePicker",
      "name": "DesktopDatePicker",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DesktopDatePickerSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "slots": {
          "type": "custom",
          "typeName": "DesktopDatePickerSlots<TDate>"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ year?: PickerViewRenderer<TDate, \"year\", DateViewRendererProps<TDate, DateView>, {}>; month?: PickerViewRenderer<TDate, \"month\", DateViewRendererProps<TDate, DateView>, {}>; day?: PickerViewRenderer<TDate, \"day\", DateViewRendererProps<TDate, DateView>, {}>; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "loading": {
          "type": "boolean"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "format": {
          "type": "string"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "name": {
          "type": "string"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DesktopDatePicker",
        "locator": {
          "type": "named",
          "name": "DesktopDatePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/MobileDatePicker#MobileDatePicker": {
      "id": "@mui/x-date-pickers/MobileDatePicker#MobileDatePicker",
      "name": "MobileDatePicker",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "slots": {
          "type": "custom",
          "typeName": "MobileDatePickerSlots<TDate>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "MobileDatePickerSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ year?: PickerViewRenderer<TDate, \"year\", DateViewRendererProps<TDate, DateView>, {}>; month?: PickerViewRenderer<TDate, \"month\", DateViewRendererProps<TDate, DateView>, {}>; day?: PickerViewRenderer<TDate, \"day\", DateViewRendererProps<TDate, DateView>, {}>; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "loading": {
          "type": "boolean"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "format": {
          "type": "string"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "name": {
          "type": "string"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/MobileDatePicker",
        "locator": {
          "type": "named",
          "name": "MobileDatePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker": {
      "id": "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker",
      "name": "StaticDatePicker",
      "props": {
        "displayStaticWrapperAs": {
          "type": "string-union",
          "values": [
            "mobile",
            "desktop"
          ]
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "StaticDatePickerSlotProps<TDate>"
        },
        "slots": {
          "type": "custom",
          "typeName": "StaticDatePickerSlots<TDate>"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ year?: PickerViewRenderer<TDate, \"year\", DateViewRendererProps<TDate, DateView>, {}>; month?: PickerViewRenderer<TDate, \"month\", DateViewRendererProps<TDate, DateView>, {}>; day?: PickerViewRenderer<TDate, \"day\", DateViewRendererProps<TDate, DateView>, {}>; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "loading": {
          "type": "boolean"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/StaticDatePicker",
        "locator": {
          "type": "named",
          "name": "StaticDatePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/TimePicker#TimePicker": {
      "id": "@mui/x-date-pickers/TimePicker#TimePicker",
      "name": "TimePicker",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "ampm": {
          "type": "boolean"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TimeView[]"
        },
        "format": {
          "type": "string"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof TimePickerViewRenderers<TDate, TView, {}>]?: TimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "timezone": {
          "type": "string"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "desktopModeMediaQuery": {
          "type": "string"
        },
        "slots": {
          "type": "custom",
          "typeName": "TimePickerSlots<TDate>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "TimePickerSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "minutesStep": {
          "type": "number"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "thresholdToRenderTimeInASingleColumn": {
          "type": "number"
        },
        "timeSteps": {
          "type": "custom",
          "typeName": "TimeStepOptions"
        },
        "skipDisabled": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/TimePicker",
        "locator": {
          "type": "named",
          "name": "TimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DesktopTimePicker#DesktopTimePicker": {
      "id": "@mui/x-date-pickers/DesktopTimePicker#DesktopTimePicker",
      "name": "DesktopTimePicker",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TimeView[]"
        },
        "slots": {
          "type": "custom",
          "typeName": "DesktopTimePickerSlots<TDate>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DesktopTimePickerSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof TimePickerViewRenderers<TDate, TView, {}>]?: TimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "ampm": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "format": {
          "type": "string"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "name": {
          "type": "string"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "thresholdToRenderTimeInASingleColumn": {
          "type": "number"
        },
        "timeSteps": {
          "type": "custom",
          "typeName": "TimeStepOptions"
        },
        "skipDisabled": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DesktopTimePicker",
        "locator": {
          "type": "named",
          "name": "DesktopTimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/MobileTimePicker#MobileTimePicker": {
      "id": "@mui/x-date-pickers/MobileTimePicker#MobileTimePicker",
      "name": "MobileTimePicker",
      "props": {
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "format": {
          "type": "string"
        },
        "slots": {
          "type": "custom",
          "typeName": "MobileTimePickerSlots<TDate, TView>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "MobileTimePickerSlotProps<TDate, TView, TEnableAccessibleFieldDOMStructure>"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof TimePickerViewRenderers<TDate, TView, {}>]?: TimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "ampm": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "name": {
          "type": "string"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/MobileTimePicker",
        "locator": {
          "type": "named",
          "name": "MobileTimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/StaticTimePicker#StaticTimePicker": {
      "id": "@mui/x-date-pickers/StaticTimePicker#StaticTimePicker",
      "name": "StaticTimePicker",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "slots": {
          "type": "custom",
          "typeName": "StaticTimePickerSlots<TDate>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "StaticTimePickerSlotProps<TDate>"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof TimePickerViewRenderers<TDate, TView, {}>]?: TimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "ampm": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "displayStaticWrapperAs": {
          "type": "string-union",
          "values": [
            "mobile",
            "desktop"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/StaticTimePicker",
        "locator": {
          "type": "named",
          "name": "StaticTimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DateTimePicker#DateTimePicker": {
      "id": "@mui/x-date-pickers/DateTimePicker#DateTimePicker",
      "name": "DateTimePicker",
      "props": {
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof DateTimePickerViewRenderers<TDate, TView, {}>]?: DateTimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly DateOrTimeView[]"
        },
        "disabled": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "maxDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "desktopModeMediaQuery": {
          "type": "string"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "slots": {
          "type": "custom",
          "typeName": "DateTimePickerSlots<TDate>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DateTimePickerSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "loading": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "ampm": {
          "type": "boolean"
        },
        "minutesStep": {
          "type": "number"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "format": {
          "type": "string"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "thresholdToRenderTimeInASingleColumn": {
          "type": "number"
        },
        "timeSteps": {
          "type": "custom",
          "typeName": "TimeStepOptions"
        },
        "skipDisabled": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DateTimePicker",
        "locator": {
          "type": "named",
          "name": "DateTimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DateTimePicker#DateTimePickerTabs": {
      "id": "@mui/x-date-pickers/DateTimePicker#DateTimePickerTabs",
      "name": "DateTimePickerTabs",
      "props": {
        "hidden": {
          "type": "boolean"
        },
        "dateIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "timeIcon": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "className": {
          "type": "string"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DateTimePicker",
        "locator": {
          "type": "named",
          "name": "DateTimePickerTabs"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/DesktopDateTimePicker#DesktopDateTimePicker": {
      "id": "@mui/x-date-pickers/DesktopDateTimePicker#DesktopDateTimePicker",
      "name": "DesktopDateTimePicker",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly DateOrTimeView[]"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "slots": {
          "type": "custom",
          "typeName": "DesktopDateTimePickerSlots<TDate>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "DesktopDateTimePickerSlotProps<TDate, TEnableAccessibleFieldDOMStructure>"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof DateTimePickerViewRenderers<TDate, TView, {}>]?: DateTimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "disableFuture": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "loading": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "ampm": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "minDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "format": {
          "type": "string"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "name": {
          "type": "string"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "thresholdToRenderTimeInASingleColumn": {
          "type": "number"
        },
        "timeSteps": {
          "type": "custom",
          "typeName": "TimeStepOptions"
        },
        "skipDisabled": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/DesktopDateTimePicker",
        "locator": {
          "type": "named",
          "name": "DesktopDateTimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/MobileDateTimePicker#MobileDateTimePicker": {
      "id": "@mui/x-date-pickers/MobileDateTimePicker#MobileDateTimePicker",
      "name": "MobileDateTimePicker",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "slots": {
          "type": "custom",
          "typeName": "MobileDateTimePickerSlots<TDate, TView>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "MobileDateTimePickerSlotProps<TDate, TView, TEnableAccessibleFieldDOMStructure>"
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof DateTimePickerViewRenderers<TDate, TView, {}>]?: DateTimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "disableFuture": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "loading": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "ampm": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "minDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "format": {
          "type": "string"
        },
        "formatDensity": {
          "type": "string-union",
          "values": [
            "dense",
            "spacious"
          ]
        },
        "selectedSections": {
          "type": "custom",
          "typeName": "number | \"all\" | FieldSectionType"
        },
        "enableAccessibleFieldDOMStructure": {
          "type": "custom",
          "typeName": "TEnableAccessibleFieldDOMStructure"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "name": {
          "type": "string"
        },
        "closeOnSelect": {
          "type": "boolean"
        },
        "open": {
          "type": "boolean"
        },
        "disableOpenPicker": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/MobileDateTimePicker",
        "locator": {
          "type": "named",
          "name": "MobileDateTimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/StaticDateTimePicker#StaticDateTimePicker": {
      "id": "@mui/x-date-pickers/StaticDateTimePicker#StaticDateTimePicker",
      "name": "StaticDateTimePicker",
      "props": {
        "defaultValue": {
          "type": "custom",
          "typeName": "TValue"
        },
        "slots": {
          "type": "custom",
          "typeName": "StaticDateTimePickerSlots<TDate>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "StaticDateTimePickerSlotProps<TDate>"
        },
        "orientation": {
          "type": "string-union",
          "values": [
            "portrait",
            "landscape"
          ]
        },
        "ampmInClock": {
          "type": "boolean"
        },
        "viewRenderers": {
          "type": "custom",
          "typeName": "{ [P in keyof DateTimePickerViewRenderers<TDate, TView, {}>]?: DateTimePickerViewRenderers<TDate, TView, {}>[P]; }"
        },
        "openTo": {
          "type": "custom",
          "typeName": "TView"
        },
        "views": {
          "type": "custom",
          "typeName": "readonly TView[]"
        },
        "view": {
          "type": "custom",
          "typeName": "TView"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "PickersInputComponentLocaleText<TDate>"
        },
        "className": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "value": {
          "type": "custom",
          "typeName": "TValue"
        },
        "referenceDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "readOnly": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "reduceAnimations": {
          "type": "boolean"
        },
        "disableFuture": {
          "type": "boolean"
        },
        "disablePast": {
          "type": "boolean"
        },
        "shouldDisableDate": {
          "type": "custom",
          "typeName": "(day: TDate) => boolean"
        },
        "shouldDisableMonth": {
          "type": "custom",
          "typeName": "(month: TDate) => boolean"
        },
        "shouldDisableYear": {
          "type": "custom",
          "typeName": "(year: TDate) => boolean"
        },
        "minDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDate": {
          "type": "custom",
          "typeName": "TDate"
        },
        "loading": {
          "type": "boolean"
        },
        "disableHighlightToday": {
          "type": "boolean"
        },
        "showDaysOutsideCurrentMonth": {
          "type": "boolean"
        },
        "renderLoading": {
          "type": "custom",
          "typeName": "() => ReactNode"
        },
        "dayOfWeekFormatter": {
          "type": "custom",
          "typeName": "(date: TDate) => string"
        },
        "displayWeekNumber": {
          "type": "boolean"
        },
        "fixedWeekNumber": {
          "type": "number"
        },
        "monthsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "yearsPerRow": {
          "type": "custom",
          "typeName": "3 | 4"
        },
        "ampm": {
          "type": "boolean"
        },
        "minTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "minutesStep": {
          "type": "number"
        },
        "shouldDisableTime": {
          "type": "custom",
          "typeName": "(value: TDate, view: TimeView) => boolean"
        },
        "disableIgnoringDatePartForTimeValidation": {
          "type": "boolean"
        },
        "minDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "maxDateTime": {
          "type": "custom",
          "typeName": "TDate"
        },
        "displayStaticWrapperAs": {
          "type": "string-union",
          "values": [
            "mobile",
            "desktop"
          ]
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/StaticDateTimePicker",
        "locator": {
          "type": "named",
          "name": "StaticDateTimePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/LightMode#LightModeIcon",
          "@mui/icons-material/AcUnit#AcUnitIcon"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers/PickersTextField#PickersTextField": {
      "id": "@mui/x-date-pickers/PickersTextField#PickersTextField",
      "name": "PickersTextField",
      "props": {
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "size": {
          "type": "string-union",
          "values": [
            "small",
            "medium"
          ]
        },
        "autoFocus": {
          "type": "boolean"
        },
        "color": {
          "type": "string-union",
          "values": [
            "error",
            "primary",
            "secondary",
            "info",
            "success",
            "warning"
          ]
        },
        "content": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "margin": {
          "type": "string-union",
          "values": [
            "none",
            "dense",
            "normal"
          ]
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "slot": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "title": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; marginNormal?: string; marginDense?: string; fullWidth?: string; }"
        },
        "className": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disabled": {
          "type": "boolean"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "tabIndex": {
          "type": "number"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "contentEditable": {
          "type": "boolean"
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"list\" | \"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "search",
            "text",
            "none",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "component": {
          "type": "custom",
          "typeName": "\"symbol\" | \"object\" | \"view\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"p\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | ComponentType<any>"
        },
        "readOnly": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "fullWidth": {
          "type": "boolean"
        },
        "focused": {
          "type": "boolean"
        },
        "hiddenLabel": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "variant": {
          "type": "custom",
          "typeName": "\"standard\""
        },
        "InputProps": {
          "type": "custom",
          "typeName": "{ disableUnderline?: boolean; ownerState?: any; margin?: \"none\" | \"dense\" | \"normal\"; renderSuffix?: (state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"none\" | \"dense\" | \"normal\"; required?: boolean; adornedStart?: boolean; }) => ReactNode; ref?: Ref<HTMLDivElement>; slots?: { root?: ElementType<any, keyof IntrinsicElements>; input?: ElementType<any, keyof IntrinsicElements>; }; slotProps?: { root?: any; }; autoFocus?: boolean; border?: ResponsiveStyleValue<number | (string & {}) | \"inset\" | \"hidden\" | \"inherit\" | \"none\" | \"medium\" | \"-moz-initial\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"aliceblue\" | \"antiquewhite\" | \"aqua\" | \"aquamarine\" | \"azure\" | \"beige\" | \"bisque\" | \"black\" | \"blanchedalmond\" | \"blue\" | \"blueviolet\" | \"brown\" | \"burlywood\" | \"cadetblue\" | \"chartreuse\" | \"chocolate\" | \"coral\" | \"cornflowerblue\" | \"cornsilk\" | \"crimson\" | \"cyan\" | \"darkblue\" | \"darkcyan\" | \"darkgoldenrod\" | \"darkgray\" | \"darkgreen\" | \"darkgrey\" | \"darkkhaki\" | \"darkmagenta\" | \"darkolivegreen\" | \"darkorange\" | \"darkorchid\" | \"darkred\" | \"darksalmon\" | \"darkseagreen\" | \"darkslateblue\" | \"darkslategray\" | \"darkslategrey\" | \"darkturquoise\" | \"darkviolet\" | \"deeppink\" | \"deepskyblue\" | \"dimgray\" | \"dimgrey\" | \"dodgerblue\" | \"firebrick\" | \"floralwhite\" | \"forestgreen\" | \"fuchsia\" | \"gainsboro\" | \"ghostwhite\" | \"gold\" | \"goldenrod\" | \"gray\" | \"green\" | \"greenyellow\" | \"grey\" | \"honeydew\" | \"hotpink\" | \"indianred\" | \"indigo\" | \"ivory\" | \"khaki\" | \"lavender\" | \"lavenderblush\" | \"lawngreen\" | \"lemonchiffon\" | \"lightblue\" | \"lightcoral\" | \"lightcyan\" | \"lightgoldenrodyellow\" | \"lightgray\" | \"lightgreen\" | \"lightgrey\" | \"lightpink\" | \"lightsalmon\" | \"lightseagreen\" | \"lightskyblue\" | \"lightslategray\" | \"lightslategrey\" | \"lightsteelblue\" | \"lightyellow\" | \"lime\" | \"limegreen\" | \"linen\" | \"magenta\" | \"maroon\" | \"mediumaquamarine\" | \"mediumblue\" | \"mediumorchid\" | \"mediumpurple\" | \"mediumseagreen\" | \"mediumslateblue\" | \"mediumspringgreen\" | \"mediumturquoise\" | \"mediumvioletred\" | \"midnightblue\" | \"mintcream\" | \"mistyrose\" | \"moccasin\" | \"navajowhite\" | \"navy\" | \"oldlace\" | \"olive\" | \"olivedrab\" | \"orange\" | \"orangered\" | \"orchid\" | \"palegoldenrod\" | \"palegreen\" | \"paleturquoise\" | \"palevioletred\" | \"papayawhip\" | \"peachpuff\" | \"peru\" | \"pink\" | \"plum\" | \"powderblue\" | \"purple\" | \"rebeccapurple\" | \"red\" | \"rosybrown\" | \"royalblue\" | \"saddlebrown\" | \"salmon\" | \"sandybrown\" | \"seagreen\" | \"seashell\" | \"sienna\" | \"silver\" | \"skyblue\" | \"slateblue\" | \"slategray\" | \"slategrey\" | \"snow\" | \"springgreen\" | \"steelblue\" | \"tan\" | \"teal\" | \"thistle\" | \"tomato\" | \"transparent\" | \"turquoise\" | \"violet\" | \"wheat\" | \"white\" | \"whitesmoke\" | \"yellow\" | \"yellowgreen\" | \"ActiveBorder\" | \"ActiveCaption\" | \"AppWorkspace\" | \"Background\" | \"ButtonFace\" | \"ButtonHighlight\" | \"ButtonShadow\" | \"ButtonText\" | \"CaptionText\" | \"GrayText\" | \"Highlight\" | \"HighlightText\" | \"InactiveBorder\" | \"InactiveCaption\" | \"InactiveCaptionText\" | \"InfoBackground\" | \"InfoText\" | \"Menu\" | \"MenuText\" | \"Scrollbar\" | \"ThreeDDarkShadow\" | \"ThreeDFace\" | \"ThreeDHighlight\" | \"ThreeDLightShadow\" | \"ThreeDShadow\" | \"Window\" | \"WindowFrame\" | \"WindowText\" | \"currentcolor\" | \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"outset\" | \"ridge\" | \"solid\" | \"thick\" | \"thin\"> | ((theme: Theme) => ResponsiveStyleValue<number | (string & {}) | \"inset\" | \"hidden\" | \"inherit\" | \"none\" | \"medium\" | \"-moz-initial\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"aliceblue\" | \"antiquewhite\" | \"aqua\" | \"aquamarine\" | \"azure\" | \"beige\" | \"bisque\" | \"black\" | \"blanchedalmond\" | \"blue\" | \"blueviolet\" | \"brown\" | \"burlywood\" | \"cadetblue\" | \"chartreuse\" | \"chocolate\" | \"coral\" | \"cornflowerblue\" | \"cornsilk\" | \"crimson\" | \"cyan\" | \"darkblue\" | \"darkcyan\" | \"darkgoldenrod\" | \"darkgray\" | \"darkgreen\" | \"darkgrey\" | \"darkkhaki\" | \"darkmagenta\" | \"darkolivegreen\" | \"darkorange\" | \"darkorchid\" | \"darkred\" | \"darksalmon\" | \"darkseagreen\" | \"darkslateblue\" | \"darkslategray\" | \"darkslategrey\" | \"darkturquoise\" | \"darkviolet\" | \"deeppink\" | \"deepskyblue\" | \"dimgray\" | \"dimgrey\" | \"dodgerblue\" | \"firebrick\" | \"floralwhite\" | \"forestgreen\" | \"fuchsia\" | \"gainsboro\" | \"ghostwhite\" | \"gold\" | \"goldenrod\" | \"gray\" | \"green\" | \"greenyellow\" | \"grey\" | \"honeydew\" | \"hotpink\" | \"indianred\" | \"indigo\" | \"ivory\" | \"khaki\" | \"lavender\" | \"lavenderblush\" | \"lawngreen\" | \"lemonchiffon\" | \"lightblue\" | \"lightcoral\" | \"lightcyan\" | \"lightgoldenrodyellow\" | \"lightgray\" | \"lightgreen\" | \"lightgrey\" | \"lightpink\" | \"lightsalmon\" | \"lightseagreen\" | \"lightskyblue\" | \"lightslategray\" | \"lightslategrey\" | \"lightsteelblue\" | \"lightyellow\" | \"lime\" | \"limegreen\" | \"linen\" | \"magenta\" | \"maroon\" | \"mediumaquamarine\" | \"mediumblue\" | \"mediumorchid\" | \"mediumpurple\" | \"mediumseagreen\" | \"mediumslateblue\" | \"mediumspringgreen\" | \"mediumturquoise\" | \"mediumvioletred\" | \"midnightblue\" | \"mintcream\" | \"mistyrose\" | \"moccasin\" | \"navajowhite\" | \"navy\" | \"oldlace\" | \"olive\" | \"olivedrab\" | \"orange\" | \"orangered\" | \"orchid\" | \"palegoldenrod\" | \"palegreen\" | \"paleturquoise\" | \"palevioletred\" | \"papayawhip\" | \"peachpuff\" | \"peru\" | \"pink\" | \"plum\" | \"powderblue\" | \"purple\" | \"rebeccapurple\" | \"red\" | \"rosybrown\" | \"royalblue\" | \"saddlebrown\" | \"salmon\" | \"sandybrown\" | \"seagreen\" | \"seashell\" | \"sienna\" | \"silver\" | \"skyblue\" | \"slateblue\" | \"slategray\" | \"slategrey\" | \"snow\" | \"springgreen\" | \"steelblue\" | \"tan\" | \"teal\" | \"thistle\" | \"tomato\" | \"transparent\" | \"turquoise\" | \"violet\" | \"wheat\" | \"white\" | \"whitesmoke\" | \"yellow\" | \"yellowgreen\" | \"ActiveBorder\" | \"ActiveCaption\" | \"AppWorkspace\" | \"Background\" | \"ButtonFace\" | \"ButtonHighlight\" | \"ButtonShadow\" | \"ButtonText\" | \"CaptionText\" | \"GrayText\" | \"Highlight\" | \"HighlightText\" | \"InactiveBorder\" | \"InactiveCaption\" | \"InactiveCaptionText\" | \"InfoBackground\" | \"InfoText\" | \"Menu\" | \"MenuText\" | \"Scrollbar\" | \"ThreeDDarkShadow\" | \"ThreeDFace\" | \"ThreeDHighlight\" | \"ThreeDLightShadow\" | \"ThreeDShadow\" | \"Window\" | \"WindowFrame\" | \"WindowText\" | \"currentcolor\" | \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"outset\" | \"ridge\" | \"solid\" | \"thick\" | \"thin\">); boxShadow?: ResponsiveStyleValue<number | BoxShadow> | ((theme: Theme) => ResponsiveStyleValue<number | BoxShadow>); fontWeight?: ResponsiveStyleValue<string | (string & {}) | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (string & {}) | (number & {})>); zIndex?: ResponsiveStyleValue<string | (string & {}) | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (string & {}) | (number & {})>); alignContent?: ResponsiveStyleValue<readonly string[] | AlignContent> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | AlignContent>); alignItems?: ResponsiveStyleValue<readonly string[] | AlignItems> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | AlignItems>); alignSelf?: ResponsiveStyleValue<readonly string[] | AlignSelf> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | AlignSelf>); bottom?: ResponsiveStyleValue<Bottom<string | number> | readonly NonNullable<Bottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Bottom<string | number> | readonly NonNullable<Bottom<string | number>>[]>); boxSizing?: ResponsiveStyleValue<BoxSizing | readonly NonNullable<BoxSizing>[]> | ((theme: Theme) => ResponsiveStyleValue<BoxSizing | readonly NonNullable<BoxSizing>[]>); color?: ResponsiveStyleValue<readonly string[] | Color> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | Color>); columnGap?: ResponsiveStyleValue<ColumnGap<string | number> | readonly NonNullable<ColumnGap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<ColumnGap<string | number> | readonly NonNullable<ColumnGap<string | number>>[]>); content?: string; display?: ResponsiveStyleValue<readonly string[] | Display> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | Display>); flexBasis?: ResponsiveStyleValue<FlexBasis<string | number> | readonly NonNullable<FlexBasis<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexBasis<string | number> | readonly NonNullable<FlexBasis<string | number>>[]>); flexDirection?: ResponsiveStyleValue<FlexDirection | readonly NonNullable<FlexDirection>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexDirection | readonly NonNullable<FlexDirection>[]>); flexGrow?: ResponsiveStyleValue<FlexGrow | readonly NonNullable<FlexGrow>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexGrow | readonly NonNullable<FlexGrow>[]>); flexShrink?: ResponsiveStyleValue<FlexShrink | readonly NonNullable<FlexShrink>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexShrink | readonly NonNullable<FlexShrink>[]>); flexWrap?: ResponsiveStyleValue<FlexWrap | readonly NonNullable<FlexWrap>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexWrap | readonly NonNullable<FlexWrap>[]>); fontFamily?: ResponsiveStyleValue<readonly string[] | FontFamily> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | FontFamily>); fontSize?: ResponsiveStyleValue<FontSize<string | number> | readonly NonNullable<FontSize<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<FontSize<string | number> | readonly NonNullable<FontSize<string | number>>[]>); fontStyle?: ResponsiveStyleValue<readonly string[] | FontStyle> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | FontStyle>); gridAutoColumns?: ResponsiveStyleValue<GridAutoColumns<string | number> | readonly NonNullable<GridAutoColumns<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<GridAutoColumns<string | number> | readonly NonNullable<GridAutoColumns<string | number>>[]>); gridAutoFlow?: ResponsiveStyleValue<readonly string[] | GridAutoFlow> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | GridAutoFlow>); gridAutoRows?: ResponsiveStyleValue<GridAutoRows<string | number> | readonly NonNullable<GridAutoRows<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<GridAutoRows<string | number> | readonly NonNullable<GridAutoRows<string | number>>[]>); gridTemplateAreas?: ResponsiveStyleValue<readonly string[] | GridTemplateAreas> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | GridTemplateAreas>); gridTemplateColumns?: ResponsiveStyleValue<GridTemplateColumns<string | number> | readonly NonNullable<GridTemplateColumns<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<GridTemplateColumns<string | number> | readonly NonNullable<GridTemplateColumns<string | number>>[]>); gridTemplateRows?: ResponsiveStyleValue<GridTemplateRows<string | number> | readonly NonNullable<GridTemplateRows<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<GridTemplateRows<string | number> | readonly NonNullable<GridTemplateRows<string | number>>[]>); height?: ResponsiveStyleValue<Height<string | number> | readonly NonNullable<Height<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Height<string | number> | readonly NonNullable<Height<string | number>>[]>); justifyContent?: ResponsiveStyleValue<readonly string[] | JustifyContent> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | JustifyContent>); justifyItems?: ResponsiveStyleValue<readonly string[] | JustifyItems> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | JustifyItems>); justifySelf?: ResponsiveStyleValue<readonly string[] | JustifySelf> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | JustifySelf>); left?: ResponsiveStyleValue<Left<string | number> | readonly NonNullable<Left<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Left<string | number> | readonly NonNullable<Left<string | number>>[]>); letterSpacing?: ResponsiveStyleValue<LetterSpacing<string | number> | readonly NonNullable<LetterSpacing<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<LetterSpacing<string | number> | readonly NonNullable<LetterSpacing<string | number>>[]>); lineHeight?: ResponsiveStyleValue<LineHeight<string | number> | readonly NonNullable<LineHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<LineHeight<string | number> | readonly NonNullable<LineHeight<string | number>>[]>); marginBlockEnd?: ResponsiveStyleValue<MarginBlockEnd<string | number> | readonly NonNullable<MarginBlockEnd<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginBlockEnd<string | number> | readonly NonNullable<MarginBlockEnd<string | number>>[]>); marginBlockStart?: ResponsiveStyleValue<MarginBlockStart<string | number> | readonly NonNullable<MarginBlockStart<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginBlockStart<string | number> | readonly NonNullable<MarginBlockStart<string | number>>[]>); marginBottom?: ResponsiveStyleValue<MarginBottom<string | number> | readonly NonNullable<MarginBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginBottom<string | number> | readonly NonNullable<MarginBottom<string | number>>[]>); marginInlineEnd?: ResponsiveStyleValue<MarginInlineEnd<string | number> | readonly NonNullable<MarginInlineEnd<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginInlineEnd<string | number> | readonly NonNullable<MarginInlineEnd<string | number>>[]>); marginInlineStart?: ResponsiveStyleValue<MarginInlineStart<string | number> | readonly NonNullable<MarginInlineStart<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginInlineStart<string | number> | readonly NonNullable<MarginInlineStart<string | number>>[]>); marginLeft?: ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]>); marginRight?: ResponsiveStyleValue<MarginRight<string | number> | readonly NonNullable<MarginRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginRight<string | number> | readonly NonNullable<MarginRight<string | number>>[]>); marginTop?: ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]>); maxHeight?: ResponsiveStyleValue<MaxHeight<string | number> | readonly NonNullable<MaxHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MaxHeight<string | number> | readonly NonNullable<MaxHeight<string | number>>[]>); maxWidth?: ResponsiveStyleValue<MaxWidth<string | number> | readonly NonNullable<MaxWidth<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MaxWidth<string | number> | readonly NonNullable<MaxWidth<string | number>>[]>); minHeight?: ResponsiveStyleValue<MinHeight<string | number> | readonly NonNullable<MinHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MinHeight<string | number> | readonly NonNullable<MinHeight<string | number>>[]>); minWidth?: ResponsiveStyleValue<MinWidth<string | number> | readonly NonNullable<MinWidth<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MinWidth<string | number> | readonly NonNullable<MinWidth<string | number>>[]>); order?: ResponsiveStyleValue<Order | readonly NonNullable<Order>[]> | ((theme: Theme) => ResponsiveStyleValue<Order | readonly NonNullable<Order>[]>); paddingBlockEnd?: ResponsiveStyleValue<PaddingBlockEnd<string | number> | readonly NonNullable<PaddingBlockEnd<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingBlockEnd<string | number> | readonly NonNullable<PaddingBlockEnd<string | number>>[]>); paddingBlockStart?: ResponsiveStyleValue<PaddingBlockStart<string | number> | readonly NonNullable<PaddingBlockStart<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingBlockStart<string | number> | readonly NonNullable<PaddingBlockStart<string | number>>[]>); paddingBottom?: ResponsiveStyleValue<PaddingBottom<string | number> | readonly NonNullable<PaddingBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingBottom<string | number> | readonly NonNullable<PaddingBottom<string | number>>[]>); paddingInlineEnd?: ResponsiveStyleValue<PaddingInlineEnd<string | number> | readonly NonNullable<PaddingInlineEnd<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingInlineEnd<string | number> | readonly NonNullable<PaddingInlineEnd<string | number>>[]>); paddingInlineStart?: ResponsiveStyleValue<PaddingInlineStart<string | number> | readonly NonNullable<PaddingInlineStart<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingInlineStart<string | number> | readonly NonNullable<PaddingInlineStart<string | number>>[]>); paddingLeft?: ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]>); paddingRight?: ResponsiveStyleValue<PaddingRight<string | number> | readonly NonNullable<PaddingRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingRight<string | number> | readonly NonNullable<PaddingRight<string | number>>[]>); paddingTop?: ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]>); position?: ResponsiveStyleValue<Position | readonly NonNullable<Position>[]> | ((theme: Theme) => ResponsiveStyleValue<Position | readonly NonNullable<Position>[]>); right?: ResponsiveStyleValue<Right<string | number> | readonly NonNullable<Right<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Right<string | number> | readonly NonNullable<Right<string | number>>[]>); rowGap?: ResponsiveStyleValue<RowGap<string | number> | readonly NonNullable<RowGap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<RowGap<string | number> | readonly NonNullable<RowGap<string | number>>[]>); textAlign?: ResponsiveStyleValue<TextAlign | readonly NonNullable<TextAlign>[]> | ((theme: Theme) => ResponsiveStyleValue<TextAlign | readonly NonNullable<TextAlign>[]>); textOverflow?: ResponsiveStyleValue<readonly string[] | TextOverflow> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | TextOverflow>); textTransform?: ResponsiveStyleValue<TextTransform | readonly NonNullable<TextTransform>[]> | ((theme: Theme) => ResponsiveStyleValue<TextTransform | readonly NonNullable<TextTransform>[]>); top?: ResponsiveStyleValue<Top<string | number> | readonly NonNullable<Top<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Top<string | number> | readonly NonNullable<Top<string | number>>[]>); translate?: \"yes\" | \"no\"; visibility?: ResponsiveStyleValue<Visibility | readonly NonNullable<Visibility>[]> | ((theme: Theme) => ResponsiveStyleValue<Visibility | readonly NonNullable<Visibility>[]>); whiteSpace?: ResponsiveStyleValue<readonly string[] | WhiteSpace> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | WhiteSpace>); width?: ResponsiveStyleValue<Width<string | number> | readonly NonNullable<Width<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Width<string | number> | readonly NonNullable<Width<string | number>>[]>); borderBottom?: ResponsiveStyleValue<BorderBottom<string | number> | readonly NonNullable<BorderBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderBottom<string | number> | readonly NonNullable<BorderBottom<string | number>>[]>); borderColor?: ResponsiveStyleValue<readonly string[] | BorderColor> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | BorderColor>); borderLeft?: ResponsiveStyleValue<BorderLeft<string | number> | readonly NonNullable<BorderLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderLeft<string | number> | readonly NonNullable<BorderLeft<string | number>>[]>); borderRadius?: ResponsiveStyleValue<BorderRadius<string | number> | readonly NonNullable<BorderRadius<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderRadius<string | number> | readonly NonNullable<BorderRadius<string | number>>[]>); borderRight?: ResponsiveStyleValue<BorderRight<string | number> | readonly NonNullable<BorderRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderRight<string | number> | readonly NonNullable<BorderRight<string | number>>[]>); borderTop?: ResponsiveStyleValue<BorderTop<string | number> | readonly NonNullable<BorderTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderTop<string | number> | readonly NonNullable<BorderTop<string | number>>[]>); flex?: ResponsiveStyleValue<Flex<string | number> | readonly NonNullable<Flex<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Flex<string | number> | readonly NonNullable<Flex<string | number>>[]>); gap?: ResponsiveStyleValue<Gap<string | number> | readonly NonNullable<Gap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Gap<string | number> | readonly NonNullable<Gap<string | number>>[]>); gridArea?: ResponsiveStyleValue<GridArea | readonly NonNullable<GridArea>[]> | ((theme: Theme) => ResponsiveStyleValue<GridArea | readonly NonNullable<GridArea>[]>); gridColumn?: ResponsiveStyleValue<GridColumn | readonly NonNullable<GridColumn>[]> | ((theme: Theme) => ResponsiveStyleValue<GridColumn | readonly NonNullable<GridColumn>[]>); gridRow?: ResponsiveStyleValue<GridRow | readonly NonNullable<GridRow>[]> | ((theme: Theme) => ResponsiveStyleValue<GridRow | readonly NonNullable<GridRow>[]>); marginBlock?: ResponsiveStyleValue<MarginBlock<string | number> | readonly NonNullable<MarginBlock<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginBlock<string | number> | readonly NonNullable<MarginBlock<string | number>>[]>); marginInline?: ResponsiveStyleValue<MarginInline<string | number> | readonly NonNullable<MarginInline<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginInline<string | number> | readonly NonNullable<MarginInline<string | number>>[]>); overflow?: ResponsiveStyleValue<readonly string[] | Overflow> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | Overflow>); padding?: ResponsiveStyleValue<Padding<string | number> | readonly NonNullable<Padding<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Padding<string | number> | readonly NonNullable<Padding<string | number>>[]>); paddingBlock?: ResponsiveStyleValue<PaddingBlock<string | number> | readonly NonNullable<PaddingBlock<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingBlock<string | number> | readonly NonNullable<PaddingBlock<string | number>>[]>); paddingInline?: ResponsiveStyleValue<PaddingInline<string | number> | readonly NonNullable<PaddingInline<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingInline<string | number> | readonly NonNullable<PaddingInline<string | number>>[]>); bgcolor?: ResponsiveStyleValue<readonly string[] | BackgroundColor> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | BackgroundColor>); m?: ResponsiveStyleValue<Margin<string | number> | readonly NonNullable<Margin<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Margin<string | number> | readonly NonNullable<Margin<string | number>>[]>); mt?: ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]>); mr?: ResponsiveStyleValue<MarginRight<string | number> | readonly NonNullable<MarginRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginRight<string | number> | readonly NonNullable<MarginRight<string | number>>[]>); mb?: ResponsiveStyleValue<MarginBottom<string | number> | readonly NonNullable<MarginBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginBottom<string | number> | readonly NonNullable<MarginBottom<string | number>>[]>); ml?: ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]>); mx?: ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]>); marginX?: ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | readonly NonNullable<MarginLeft<string | number>>[]>); my?: ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]>); marginY?: ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | readonly NonNullable<MarginTop<string | number>>[]>); p?: ResponsiveStyleValue<Padding<string | number> | readonly NonNullable<Padding<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Padding<string | number> | readonly NonNullable<Padding<string | number>>[]>); pt?: ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]>); pr?: ResponsiveStyleValue<PaddingRight<string | number> | readonly NonNullable<PaddingRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingRight<string | number> | readonly NonNullable<PaddingRight<string | number>>[]>); pb?: ResponsiveStyleValue<PaddingBottom<string | number> | readonly NonNullable<PaddingBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingBottom<string | number> | readonly NonNullable<PaddingBottom<string | number>>[]>); pl?: ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]>); px?: ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]>); paddingX?: ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<string | number> | readonly NonNullable<PaddingLeft<string | number>>[]>); py?: ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]>); paddingY?: ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | readonly NonNullable<PaddingTop<string | number>>[]>); typography?: ResponsiveStyleValue<string> | ((theme: Theme) => ResponsiveStyleValue<string>); displayPrint?: ResponsiveStyleValue<readonly string[] | Display> | ((theme: Theme) => ResponsiveStyleValue<readonly string[] | Display>); slot?: string; style?: CSSProperties; title?: string; classes?: Partial<ClassNameMap<never>>; className?: string; children?: ReactNode; sx?: SxProps<Theme>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLDivElement>; onCopyCapture?: ClipboardEventHandler<HTMLDivElement>; onCut?: ClipboardEventHandler<HTMLDivElement>; onCutCapture?: ClipboardEventHandler<HTMLDivElement>; onPasteCapture?: ClipboardEventHandler<HTMLDivElement>; onCompositionEnd?: CompositionEventHandler<HTMLDivElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionStart?: CompositionEventHandler<HTMLDivElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdate?: CompositionEventHandler<HTMLDivElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLDivElement>; onFocus?: FocusEventHandler<HTMLDivElement>; onFocusCapture?: FocusEventHandler<HTMLDivElement>; onBlur?: FocusEventHandler<HTMLDivElement>; onBlurCapture?: FocusEventHandler<HTMLDivElement>; onChangeCapture?: FormEventHandler<HTMLDivElement>; onBeforeInput?: FormEventHandler<HTMLDivElement>; onBeforeInputCapture?: FormEventHandler<HTMLDivElement>; onInputCapture?: FormEventHandler<HTMLDivElement>; onReset?: FormEventHandler<HTMLDivElement>; onResetCapture?: FormEventHandler<HTMLDivElement>; onSubmit?: FormEventHandler<HTMLDivElement>; onSubmitCapture?: FormEventHandler<HTMLDivElement>; onInvalid?: FormEventHandler<HTMLDivElement>; onInvalidCapture?: FormEventHandler<HTMLDivElement>; onLoad?: ReactEventHandler<HTMLDivElement>; onLoadCapture?: ReactEventHandler<HTMLDivElement>; onError?: ReactEventHandler<HTMLDivElement>; onErrorCapture?: ReactEventHandler<HTMLDivElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyPress?: KeyboardEventHandler<HTMLDivElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement>; onKeyUp?: KeyboardEventHandler<HTMLDivElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement>; onAbort?: ReactEventHandler<HTMLDivElement>; onAbortCapture?: ReactEventHandler<HTMLDivElement>; onCanPlay?: ReactEventHandler<HTMLDivElement>; onCanPlayCapture?: ReactEventHandler<HTMLDivElement>; onCanPlayThrough?: ReactEventHandler<HTMLDivElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLDivElement>; onDurationChange?: ReactEventHandler<HTMLDivElement>; onDurationChangeCapture?: ReactEventHandler<HTMLDivElement>; onEmptied?: ReactEventHandler<HTMLDivElement>; onEmptiedCapture?: ReactEventHandler<HTMLDivElement>; onEncrypted?: ReactEventHandler<HTMLDivElement>; onEncryptedCapture?: ReactEventHandler<HTMLDivElement>; onEnded?: ReactEventHandler<HTMLDivElement>; onEndedCapture?: ReactEventHandler<HTMLDivElement>; onLoadedData?: ReactEventHandler<HTMLDivElement>; onLoadedDataCapture?: ReactEventHandler<HTMLDivElement>; onLoadedMetadata?: ReactEventHandler<HTMLDivElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLDivElement>; onLoadStart?: ReactEventHandler<HTMLDivElement>; onLoadStartCapture?: ReactEventHandler<HTMLDivElement>; onPause?: ReactEventHandler<HTMLDivElement>; onPauseCapture?: ReactEventHandler<HTMLDivElement>; onPlay?: ReactEventHandler<HTMLDivElement>; onPlayCapture?: ReactEventHandler<HTMLDivElement>; onPlaying?: ReactEventHandler<HTMLDivElement>; onPlayingCapture?: ReactEventHandler<HTMLDivElement>; onProgress?: ReactEventHandler<HTMLDivElement>; onProgressCapture?: ReactEventHandler<HTMLDivElement>; onRateChange?: ReactEventHandler<HTMLDivElement>; onRateChangeCapture?: ReactEventHandler<HTMLDivElement>; onResize?: ReactEventHandler<HTMLDivElement>; onResizeCapture?: ReactEventHandler<HTMLDivElement>; onSeeked?: ReactEventHandler<HTMLDivElement>; onSeekedCapture?: ReactEventHandler<HTMLDivElement>; onSeeking?: ReactEventHandler<HTMLDivElement>; onSeekingCapture?: ReactEventHandler<HTMLDivElement>; onStalled?: ReactEventHandler<HTMLDivElement>; onStalledCapture?: ReactEventHandler<HTMLDivElement>; onSuspend?: ReactEventHandler<HTMLDivElement>; onSuspendCapture?: ReactEventHandler<HTMLDivElement>; onTimeUpdate?: ReactEventHandler<HTMLDivElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLDivElement>; onVolumeChange?: ReactEventHandler<HTMLDivElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLDivElement>; onWaiting?: ReactEventHandler<HTMLDivElement>; onWaitingCapture?: ReactEventHandler<HTMLDivElement>; onAuxClick?: MouseEventHandler<HTMLDivElement>; onAuxClickCapture?: MouseEventHandler<HTMLDivElement>; onClickCapture?: MouseEventHandler<HTMLDivElement>; onContextMenu?: MouseEventHandler<HTMLDivElement>; onContextMenuCapture?: MouseEventHandler<HTMLDivElement>; onDoubleClick?: MouseEventHandler<HTMLDivElement>; onDoubleClickCapture?: MouseEventHandler<HTMLDivElement>; onDrag?: DragEventHandler<HTMLDivElement>; onDragCapture?: DragEventHandler<HTMLDivElement>; onDragEnd?: DragEventHandler<HTMLDivElement>; onDragEndCapture?: DragEventHandler<HTMLDivElement>; onDragEnter?: DragEventHandler<HTMLDivElement>; onDragEnterCapture?: DragEventHandler<HTMLDivElement>; onDragExit?: DragEventHandler<HTMLDivElement>; onDragExitCapture?: DragEventHandler<HTMLDivElement>; onDragLeave?: DragEventHandler<HTMLDivElement>; onDragLeaveCapture?: DragEventHandler<HTMLDivElement>; onDragOver?: DragEventHandler<HTMLDivElement>; onDragOverCapture?: DragEventHandler<HTMLDivElement>; onDragStart?: DragEventHandler<HTMLDivElement>; onDragStartCapture?: DragEventHandler<HTMLDivElement>; onDrop?: DragEventHandler<HTMLDivElement>; onDropCapture?: DragEventHandler<HTMLDivElement>; onMouseDown?: MouseEventHandler<HTMLDivElement>; onMouseDownCapture?: MouseEventHandler<HTMLDivElement>; onMouseEnter?: MouseEventHandler<HTMLDivElement>; onMouseLeave?: MouseEventHandler<HTMLDivElement>; onMouseMove?: MouseEventHandler<HTMLDivElement>; onMouseMoveCapture?: MouseEventHandler<HTMLDivElement>; onMouseOut?: MouseEventHandler<HTMLDivElement>; onMouseOutCapture?: MouseEventHandler<HTMLDivElement>; onMouseOver?: MouseEventHandler<HTMLDivElement>; onMouseOverCapture?: MouseEventHandler<HTMLDivElement>; onMouseUp?: MouseEventHandler<HTMLDivElement>; onMouseUpCapture?: MouseEventHandler<HTMLDivElement>; onSelect?: ReactEventHandler<HTMLDivElement>; onSelectCapture?: ReactEventHandler<HTMLDivElement>; onTouchCancel?: TouchEventHandler<HTMLDivElement>; onTouchCancelCapture?: TouchEventHandler<HTMLDivElement>; onTouchEnd?: TouchEventHandler<HTMLDivElement>; onTouchEndCapture?: TouchEventHandler<HTMLDivElement>; onTouchMove?: TouchEventHandler<HTMLDivElement>; onTouchMoveCapture?: TouchEventHandler<HTMLDivElement>; onTouchStart?: TouchEventHandler<HTMLDivElement>; onTouchStartCapture?: TouchEventHandler<HTMLDivElement>; onPointerDown?: PointerEventHandler<HTMLDivElement>; onPointerDownCapture?: PointerEventHandler<HTMLDivElement>; onPointerMove?: PointerEventHandler<HTMLDivElement>; onPointerMoveCapture?: PointerEventHandler<HTMLDivElement>; onPointerUp?: PointerEventHandler<HTMLDivElement>; onPointerUpCapture?: PointerEventHandler<HTMLDivElement>; onPointerCancel?: PointerEventHandler<HTMLDivElement>; onPointerCancelCapture?: PointerEventHandler<HTMLDivElement>; onPointerEnter?: PointerEventHandler<HTMLDivElement>; onPointerLeave?: PointerEventHandler<HTMLDivElement>; onPointerOver?: PointerEventHandler<HTMLDivElement>; onPointerOverCapture?: PointerEventHandler<HTMLDivElement>; onPointerOut?: PointerEventHandler<HTMLDivElement>; onPointerOutCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCapture?: PointerEventHandler<HTMLDivElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCapture?: PointerEventHandler<HTMLDivElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLDivElement>; onScroll?: UIEventHandler<HTMLDivElement>; onScrollCapture?: UIEventHandler<HTMLDivElement>; onWheel?: WheelEventHandler<HTMLDivElement>; onWheelCapture?: WheelEventHandler<HTMLDivElement>; onAnimationStart?: AnimationEventHandler<HTMLDivElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationEnd?: AnimationEventHandler<HTMLDivElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLDivElement>; onAnimationIteration?: AnimationEventHandler<HTMLDivElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLDivElement>; onTransitionEnd?: TransitionEventHandler<HTMLDivElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLDivElement>; component?: ElementType<any, keyof IntrinsicElements>; areAllSectionsEmpty?: boolean; onClick?: MouseEventHandler<HTMLDivElement>; onKeyDown?: KeyboardEventHandler<HTMLDivElement>; onInput?: FormEventHandler<HTMLDivElement>; onPaste?: ClipboardEventHandler<HTMLDivElement>; endAdornment?: ReactNode; startAdornment?: ReactNode; value?: string; onChange?: ChangeEventHandler<HTMLInputElement>; label?: ReactNode; id?: string; fullWidth?: boolean; readOnly?: boolean; name?: string; inputProps?: HTMLAttributes<HTMLInputElement> & { ref?: Ref<HTMLInputElement>; }; inputRef?: Ref<HTMLInputElement>; tabIndex?: number; contentEditable?: boolean; elements?: PickersSectionElement[]; sectionListRef?: Ref<PickersSectionListRef>; }"
        },
        "FormHelperTextProps": {
          "type": "custom",
          "typeName": "{ children?: ReactNode; classes?: Partial<FormHelperTextClasses> & Partial<ClassNameMap<never>>; disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; sx?: SxProps<Theme>; variant?: OverridableStringUnion<\"filled\" | \"outlined\" | \"standard\", FormHelperTextPropsVariantOverrides>; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLParagraphElement>; autoFocus?: boolean; color?: string; content?: string; translate?: \"yes\" | \"no\"; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLParagraphElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLParagraphElement>; onCopyCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCut?: ClipboardEventHandler<HTMLParagraphElement>; onCutCapture?: ClipboardEventHandler<HTMLParagraphElement>; onPaste?: ClipboardEventHandler<HTMLParagraphElement>; onPasteCapture?: ClipboardEventHandler<HTMLParagraphElement>; onCompositionEnd?: CompositionEventHandler<HTMLParagraphElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStart?: CompositionEventHandler<HTMLParagraphElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdate?: CompositionEventHandler<HTMLParagraphElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLParagraphElement>; onFocus?: FocusEventHandler<HTMLParagraphElement>; onFocusCapture?: FocusEventHandler<HTMLParagraphElement>; onBlur?: FocusEventHandler<HTMLParagraphElement>; onBlurCapture?: FocusEventHandler<HTMLParagraphElement>; onChangeCapture?: FormEventHandler<HTMLParagraphElement>; onBeforeInput?: FormEventHandler<HTMLParagraphElement>; onBeforeInputCapture?: FormEventHandler<HTMLParagraphElement>; onInput?: FormEventHandler<HTMLParagraphElement>; onInputCapture?: FormEventHandler<HTMLParagraphElement>; onReset?: FormEventHandler<HTMLParagraphElement>; onResetCapture?: FormEventHandler<HTMLParagraphElement>; onSubmit?: FormEventHandler<HTMLParagraphElement>; onSubmitCapture?: FormEventHandler<HTMLParagraphElement>; onInvalid?: FormEventHandler<HTMLParagraphElement>; onInvalidCapture?: FormEventHandler<HTMLParagraphElement>; onLoad?: ReactEventHandler<HTMLParagraphElement>; onLoadCapture?: ReactEventHandler<HTMLParagraphElement>; onError?: ReactEventHandler<HTMLParagraphElement>; onErrorCapture?: ReactEventHandler<HTMLParagraphElement>; onKeyDown?: KeyboardEventHandler<HTMLParagraphElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPress?: KeyboardEventHandler<HTMLParagraphElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUp?: KeyboardEventHandler<HTMLParagraphElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLParagraphElement>; onAbort?: ReactEventHandler<HTMLParagraphElement>; onAbortCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlay?: ReactEventHandler<HTMLParagraphElement>; onCanPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThrough?: ReactEventHandler<HTMLParagraphElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLParagraphElement>; onDurationChange?: ReactEventHandler<HTMLParagraphElement>; onDurationChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onEmptied?: ReactEventHandler<HTMLParagraphElement>; onEmptiedCapture?: ReactEventHandler<HTMLParagraphElement>; onEncrypted?: ReactEventHandler<HTMLParagraphElement>; onEncryptedCapture?: ReactEventHandler<HTMLParagraphElement>; onEnded?: ReactEventHandler<HTMLParagraphElement>; onEndedCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedData?: ReactEventHandler<HTMLParagraphElement>; onLoadedDataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadata?: ReactEventHandler<HTMLParagraphElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLParagraphElement>; onLoadStart?: ReactEventHandler<HTMLParagraphElement>; onLoadStartCapture?: ReactEventHandler<HTMLParagraphElement>; onPause?: ReactEventHandler<HTMLParagraphElement>; onPauseCapture?: ReactEventHandler<HTMLParagraphElement>; onPlay?: ReactEventHandler<HTMLParagraphElement>; onPlayCapture?: ReactEventHandler<HTMLParagraphElement>; onPlaying?: ReactEventHandler<HTMLParagraphElement>; onPlayingCapture?: ReactEventHandler<HTMLParagraphElement>; onProgress?: ReactEventHandler<HTMLParagraphElement>; onProgressCapture?: ReactEventHandler<HTMLParagraphElement>; onRateChange?: ReactEventHandler<HTMLParagraphElement>; onRateChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onResize?: ReactEventHandler<HTMLParagraphElement>; onResizeCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeked?: ReactEventHandler<HTMLParagraphElement>; onSeekedCapture?: ReactEventHandler<HTMLParagraphElement>; onSeeking?: ReactEventHandler<HTMLParagraphElement>; onSeekingCapture?: ReactEventHandler<HTMLParagraphElement>; onStalled?: ReactEventHandler<HTMLParagraphElement>; onStalledCapture?: ReactEventHandler<HTMLParagraphElement>; onSuspend?: ReactEventHandler<HTMLParagraphElement>; onSuspendCapture?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdate?: ReactEventHandler<HTMLParagraphElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLParagraphElement>; onVolumeChange?: ReactEventHandler<HTMLParagraphElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLParagraphElement>; onWaiting?: ReactEventHandler<HTMLParagraphElement>; onWaitingCapture?: ReactEventHandler<HTMLParagraphElement>; onAuxClick?: MouseEventHandler<HTMLParagraphElement>; onAuxClickCapture?: MouseEventHandler<HTMLParagraphElement>; onClick?: MouseEventHandler<HTMLParagraphElement>; onClickCapture?: MouseEventHandler<HTMLParagraphElement>; onContextMenu?: MouseEventHandler<HTMLParagraphElement>; onContextMenuCapture?: MouseEventHandler<HTMLParagraphElement>; onDoubleClick?: MouseEventHandler<HTMLParagraphElement>; onDoubleClickCapture?: MouseEventHandler<HTMLParagraphElement>; onDrag?: DragEventHandler<HTMLParagraphElement>; onDragCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnd?: DragEventHandler<HTMLParagraphElement>; onDragEndCapture?: DragEventHandler<HTMLParagraphElement>; onDragEnter?: DragEventHandler<HTMLParagraphElement>; onDragEnterCapture?: DragEventHandler<HTMLParagraphElement>; onDragExit?: DragEventHandler<HTMLParagraphElement>; onDragExitCapture?: DragEventHandler<HTMLParagraphElement>; onDragLeave?: DragEventHandler<HTMLParagraphElement>; onDragLeaveCapture?: DragEventHandler<HTMLParagraphElement>; onDragOver?: DragEventHandler<HTMLParagraphElement>; onDragOverCapture?: DragEventHandler<HTMLParagraphElement>; onDragStart?: DragEventHandler<HTMLParagraphElement>; onDragStartCapture?: DragEventHandler<HTMLParagraphElement>; onDrop?: DragEventHandler<HTMLParagraphElement>; onDropCapture?: DragEventHandler<HTMLParagraphElement>; onMouseDown?: MouseEventHandler<HTMLParagraphElement>; onMouseDownCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseEnter?: MouseEventHandler<HTMLParagraphElement>; onMouseLeave?: MouseEventHandler<HTMLParagraphElement>; onMouseMove?: MouseEventHandler<HTMLParagraphElement>; onMouseMoveCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOut?: MouseEventHandler<HTMLParagraphElement>; onMouseOutCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseOver?: MouseEventHandler<HTMLParagraphElement>; onMouseOverCapture?: MouseEventHandler<HTMLParagraphElement>; onMouseUp?: MouseEventHandler<HTMLParagraphElement>; onMouseUpCapture?: MouseEventHandler<HTMLParagraphElement>; onSelect?: ReactEventHandler<HTMLParagraphElement>; onSelectCapture?: ReactEventHandler<HTMLParagraphElement>; onTouchCancel?: TouchEventHandler<HTMLParagraphElement>; onTouchCancelCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchEnd?: TouchEventHandler<HTMLParagraphElement>; onTouchEndCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchMove?: TouchEventHandler<HTMLParagraphElement>; onTouchMoveCapture?: TouchEventHandler<HTMLParagraphElement>; onTouchStart?: TouchEventHandler<HTMLParagraphElement>; onTouchStartCapture?: TouchEventHandler<HTMLParagraphElement>; onPointerDown?: PointerEventHandler<HTMLParagraphElement>; onPointerDownCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerMove?: PointerEventHandler<HTMLParagraphElement>; onPointerMoveCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerUp?: PointerEventHandler<HTMLParagraphElement>; onPointerUpCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerCancel?: PointerEventHandler<HTMLParagraphElement>; onPointerCancelCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerEnter?: PointerEventHandler<HTMLParagraphElement>; onPointerLeave?: PointerEventHandler<HTMLParagraphElement>; onPointerOver?: PointerEventHandler<HTMLParagraphElement>; onPointerOverCapture?: PointerEventHandler<HTMLParagraphElement>; onPointerOut?: PointerEventHandler<HTMLParagraphElement>; onPointerOutCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCapture?: PointerEventHandler<HTMLParagraphElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLParagraphElement>; onScroll?: UIEventHandler<HTMLParagraphElement>; onScrollCapture?: UIEventHandler<HTMLParagraphElement>; onWheel?: WheelEventHandler<HTMLParagraphElement>; onWheelCapture?: WheelEventHandler<HTMLParagraphElement>; onAnimationStart?: AnimationEventHandler<HTMLParagraphElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEnd?: AnimationEventHandler<HTMLParagraphElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIteration?: AnimationEventHandler<HTMLParagraphElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLParagraphElement>; onTransitionEnd?: TransitionEventHandler<HTMLParagraphElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLParagraphElement>; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "helperText": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "InputLabelProps": {
          "type": "custom",
          "typeName": "{ classes?: Partial<InputLabelClasses> & Partial<ClassNameMap<never>>; color?: \"error\" | \"primary\" | \"secondary\" | \"info\" | \"success\" | \"warning\"; disableAnimation?: boolean; disabled?: boolean; error?: boolean; focused?: boolean; margin?: \"dense\"; required?: boolean; shrink?: boolean; size?: OverridableStringUnion<\"small\" | \"normal\", InputLabelPropsSizeOverrides>; sx?: SxProps<Theme>; variant?: \"filled\" | \"outlined\" | \"standard\"; children?: ReactNode; filled?: boolean; className?: string; style?: CSSProperties; onChange?: FormEventHandler<HTMLLabelElement>; autoFocus?: boolean; content?: string; translate?: \"yes\" | \"no\"; form?: string; slot?: string; title?: string; tabIndex?: number; ref?: Ref<HTMLLabelElement>; key?: Key; defaultChecked?: boolean; defaultValue?: string | number | readonly string[]; suppressContentEditableWarning?: boolean; suppressHydrationWarning?: boolean; accessKey?: string; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\"; contextMenu?: string; dir?: string; draggable?: Booleanish; hidden?: boolean; id?: string; lang?: string; nonce?: string; spellCheck?: Booleanish; radioGroup?: string; role?: AriaRole; about?: string; datatype?: string; inlist?: any; prefix?: string; property?: string; rel?: string; resource?: string; rev?: string; typeof?: string; vocab?: string; autoCapitalize?: string; autoCorrect?: string; autoSave?: string; itemProp?: string; itemScope?: boolean; itemType?: string; itemID?: string; itemRef?: string; results?: number; security?: string; unselectable?: \"on\" | \"off\"; inputMode?: \"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"; is?: string; \"aria-activedescendant\"?: string; \"aria-atomic\"?: Booleanish; \"aria-autocomplete\"?: \"list\" | \"none\" | \"inline\" | \"both\"; \"aria-braillelabel\"?: string; \"aria-brailleroledescription\"?: string; \"aria-busy\"?: Booleanish; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-colcount\"?: number; \"aria-colindex\"?: number; \"aria-colindextext\"?: string; \"aria-colspan\"?: number; \"aria-controls\"?: string; \"aria-current\"?: boolean | \"page\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | \"date\"; \"aria-describedby\"?: string; \"aria-description\"?: string; \"aria-details\"?: string; \"aria-disabled\"?: Booleanish; \"aria-dropeffect\"?: \"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"; \"aria-errormessage\"?: string; \"aria-expanded\"?: Booleanish; \"aria-flowto\"?: string; \"aria-grabbed\"?: Booleanish; \"aria-haspopup\"?: boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\"; \"aria-hidden\"?: Booleanish; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\"; \"aria-keyshortcuts\"?: string; \"aria-label\"?: string; \"aria-labelledby\"?: string; \"aria-level\"?: number; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\"; \"aria-modal\"?: Booleanish; \"aria-multiline\"?: Booleanish; \"aria-multiselectable\"?: Booleanish; \"aria-orientation\"?: \"horizontal\" | \"vertical\"; \"aria-owns\"?: string; \"aria-placeholder\"?: string; \"aria-posinset\"?: number; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\"; \"aria-readonly\"?: Booleanish; \"aria-relevant\"?: \"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"; \"aria-required\"?: Booleanish; \"aria-roledescription\"?: string; \"aria-rowcount\"?: number; \"aria-rowindex\"?: number; \"aria-rowindextext\"?: string; \"aria-rowspan\"?: number; \"aria-selected\"?: Booleanish; \"aria-setsize\"?: number; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\"; \"aria-valuemax\"?: number; \"aria-valuemin\"?: number; \"aria-valuenow\"?: number; \"aria-valuetext\"?: string; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; }; onCopy?: ClipboardEventHandler<HTMLLabelElement>; onCopyCapture?: ClipboardEventHandler<HTMLLabelElement>; onCut?: ClipboardEventHandler<HTMLLabelElement>; onCutCapture?: ClipboardEventHandler<HTMLLabelElement>; onPaste?: ClipboardEventHandler<HTMLLabelElement>; onPasteCapture?: ClipboardEventHandler<HTMLLabelElement>; onCompositionEnd?: CompositionEventHandler<HTMLLabelElement>; onCompositionEndCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionStart?: CompositionEventHandler<HTMLLabelElement>; onCompositionStartCapture?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdate?: CompositionEventHandler<HTMLLabelElement>; onCompositionUpdateCapture?: CompositionEventHandler<HTMLLabelElement>; onFocus?: FocusEventHandler<HTMLLabelElement>; onFocusCapture?: FocusEventHandler<HTMLLabelElement>; onBlur?: FocusEventHandler<HTMLLabelElement>; onBlurCapture?: FocusEventHandler<HTMLLabelElement>; onChangeCapture?: FormEventHandler<HTMLLabelElement>; onBeforeInput?: FormEventHandler<HTMLLabelElement>; onBeforeInputCapture?: FormEventHandler<HTMLLabelElement>; onInput?: FormEventHandler<HTMLLabelElement>; onInputCapture?: FormEventHandler<HTMLLabelElement>; onReset?: FormEventHandler<HTMLLabelElement>; onResetCapture?: FormEventHandler<HTMLLabelElement>; onSubmit?: FormEventHandler<HTMLLabelElement>; onSubmitCapture?: FormEventHandler<HTMLLabelElement>; onInvalid?: FormEventHandler<HTMLLabelElement>; onInvalidCapture?: FormEventHandler<HTMLLabelElement>; onLoad?: ReactEventHandler<HTMLLabelElement>; onLoadCapture?: ReactEventHandler<HTMLLabelElement>; onError?: ReactEventHandler<HTMLLabelElement>; onErrorCapture?: ReactEventHandler<HTMLLabelElement>; onKeyDown?: KeyboardEventHandler<HTMLLabelElement>; onKeyDownCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyPress?: KeyboardEventHandler<HTMLLabelElement>; onKeyPressCapture?: KeyboardEventHandler<HTMLLabelElement>; onKeyUp?: KeyboardEventHandler<HTMLLabelElement>; onKeyUpCapture?: KeyboardEventHandler<HTMLLabelElement>; onAbort?: ReactEventHandler<HTMLLabelElement>; onAbortCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlay?: ReactEventHandler<HTMLLabelElement>; onCanPlayCapture?: ReactEventHandler<HTMLLabelElement>; onCanPlayThrough?: ReactEventHandler<HTMLLabelElement>; onCanPlayThroughCapture?: ReactEventHandler<HTMLLabelElement>; onDurationChange?: ReactEventHandler<HTMLLabelElement>; onDurationChangeCapture?: ReactEventHandler<HTMLLabelElement>; onEmptied?: ReactEventHandler<HTMLLabelElement>; onEmptiedCapture?: ReactEventHandler<HTMLLabelElement>; onEncrypted?: ReactEventHandler<HTMLLabelElement>; onEncryptedCapture?: ReactEventHandler<HTMLLabelElement>; onEnded?: ReactEventHandler<HTMLLabelElement>; onEndedCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedData?: ReactEventHandler<HTMLLabelElement>; onLoadedDataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadata?: ReactEventHandler<HTMLLabelElement>; onLoadedMetadataCapture?: ReactEventHandler<HTMLLabelElement>; onLoadStart?: ReactEventHandler<HTMLLabelElement>; onLoadStartCapture?: ReactEventHandler<HTMLLabelElement>; onPause?: ReactEventHandler<HTMLLabelElement>; onPauseCapture?: ReactEventHandler<HTMLLabelElement>; onPlay?: ReactEventHandler<HTMLLabelElement>; onPlayCapture?: ReactEventHandler<HTMLLabelElement>; onPlaying?: ReactEventHandler<HTMLLabelElement>; onPlayingCapture?: ReactEventHandler<HTMLLabelElement>; onProgress?: ReactEventHandler<HTMLLabelElement>; onProgressCapture?: ReactEventHandler<HTMLLabelElement>; onRateChange?: ReactEventHandler<HTMLLabelElement>; onRateChangeCapture?: ReactEventHandler<HTMLLabelElement>; onResize?: ReactEventHandler<HTMLLabelElement>; onResizeCapture?: ReactEventHandler<HTMLLabelElement>; onSeeked?: ReactEventHandler<HTMLLabelElement>; onSeekedCapture?: ReactEventHandler<HTMLLabelElement>; onSeeking?: ReactEventHandler<HTMLLabelElement>; onSeekingCapture?: ReactEventHandler<HTMLLabelElement>; onStalled?: ReactEventHandler<HTMLLabelElement>; onStalledCapture?: ReactEventHandler<HTMLLabelElement>; onSuspend?: ReactEventHandler<HTMLLabelElement>; onSuspendCapture?: ReactEventHandler<HTMLLabelElement>; onTimeUpdate?: ReactEventHandler<HTMLLabelElement>; onTimeUpdateCapture?: ReactEventHandler<HTMLLabelElement>; onVolumeChange?: ReactEventHandler<HTMLLabelElement>; onVolumeChangeCapture?: ReactEventHandler<HTMLLabelElement>; onWaiting?: ReactEventHandler<HTMLLabelElement>; onWaitingCapture?: ReactEventHandler<HTMLLabelElement>; onAuxClick?: MouseEventHandler<HTMLLabelElement>; onAuxClickCapture?: MouseEventHandler<HTMLLabelElement>; onClick?: MouseEventHandler<HTMLLabelElement>; onClickCapture?: MouseEventHandler<HTMLLabelElement>; onContextMenu?: MouseEventHandler<HTMLLabelElement>; onContextMenuCapture?: MouseEventHandler<HTMLLabelElement>; onDoubleClick?: MouseEventHandler<HTMLLabelElement>; onDoubleClickCapture?: MouseEventHandler<HTMLLabelElement>; onDrag?: DragEventHandler<HTMLLabelElement>; onDragCapture?: DragEventHandler<HTMLLabelElement>; onDragEnd?: DragEventHandler<HTMLLabelElement>; onDragEndCapture?: DragEventHandler<HTMLLabelElement>; onDragEnter?: DragEventHandler<HTMLLabelElement>; onDragEnterCapture?: DragEventHandler<HTMLLabelElement>; onDragExit?: DragEventHandler<HTMLLabelElement>; onDragExitCapture?: DragEventHandler<HTMLLabelElement>; onDragLeave?: DragEventHandler<HTMLLabelElement>; onDragLeaveCapture?: DragEventHandler<HTMLLabelElement>; onDragOver?: DragEventHandler<HTMLLabelElement>; onDragOverCapture?: DragEventHandler<HTMLLabelElement>; onDragStart?: DragEventHandler<HTMLLabelElement>; onDragStartCapture?: DragEventHandler<HTMLLabelElement>; onDrop?: DragEventHandler<HTMLLabelElement>; onDropCapture?: DragEventHandler<HTMLLabelElement>; onMouseDown?: MouseEventHandler<HTMLLabelElement>; onMouseDownCapture?: MouseEventHandler<HTMLLabelElement>; onMouseEnter?: MouseEventHandler<HTMLLabelElement>; onMouseLeave?: MouseEventHandler<HTMLLabelElement>; onMouseMove?: MouseEventHandler<HTMLLabelElement>; onMouseMoveCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOut?: MouseEventHandler<HTMLLabelElement>; onMouseOutCapture?: MouseEventHandler<HTMLLabelElement>; onMouseOver?: MouseEventHandler<HTMLLabelElement>; onMouseOverCapture?: MouseEventHandler<HTMLLabelElement>; onMouseUp?: MouseEventHandler<HTMLLabelElement>; onMouseUpCapture?: MouseEventHandler<HTMLLabelElement>; onSelect?: ReactEventHandler<HTMLLabelElement>; onSelectCapture?: ReactEventHandler<HTMLLabelElement>; onTouchCancel?: TouchEventHandler<HTMLLabelElement>; onTouchCancelCapture?: TouchEventHandler<HTMLLabelElement>; onTouchEnd?: TouchEventHandler<HTMLLabelElement>; onTouchEndCapture?: TouchEventHandler<HTMLLabelElement>; onTouchMove?: TouchEventHandler<HTMLLabelElement>; onTouchMoveCapture?: TouchEventHandler<HTMLLabelElement>; onTouchStart?: TouchEventHandler<HTMLLabelElement>; onTouchStartCapture?: TouchEventHandler<HTMLLabelElement>; onPointerDown?: PointerEventHandler<HTMLLabelElement>; onPointerDownCapture?: PointerEventHandler<HTMLLabelElement>; onPointerMove?: PointerEventHandler<HTMLLabelElement>; onPointerMoveCapture?: PointerEventHandler<HTMLLabelElement>; onPointerUp?: PointerEventHandler<HTMLLabelElement>; onPointerUpCapture?: PointerEventHandler<HTMLLabelElement>; onPointerCancel?: PointerEventHandler<HTMLLabelElement>; onPointerCancelCapture?: PointerEventHandler<HTMLLabelElement>; onPointerEnter?: PointerEventHandler<HTMLLabelElement>; onPointerLeave?: PointerEventHandler<HTMLLabelElement>; onPointerOver?: PointerEventHandler<HTMLLabelElement>; onPointerOverCapture?: PointerEventHandler<HTMLLabelElement>; onPointerOut?: PointerEventHandler<HTMLLabelElement>; onPointerOutCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCapture?: PointerEventHandler<HTMLLabelElement>; onGotPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCapture?: PointerEventHandler<HTMLLabelElement>; onLostPointerCaptureCapture?: PointerEventHandler<HTMLLabelElement>; onScroll?: UIEventHandler<HTMLLabelElement>; onScrollCapture?: UIEventHandler<HTMLLabelElement>; onWheel?: WheelEventHandler<HTMLLabelElement>; onWheelCapture?: WheelEventHandler<HTMLLabelElement>; onAnimationStart?: AnimationEventHandler<HTMLLabelElement>; onAnimationStartCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationEnd?: AnimationEventHandler<HTMLLabelElement>; onAnimationEndCapture?: AnimationEventHandler<HTMLLabelElement>; onAnimationIteration?: AnimationEventHandler<HTMLLabelElement>; onAnimationIterationCapture?: AnimationEventHandler<HTMLLabelElement>; onTransitionEnd?: TransitionEventHandler<HTMLLabelElement>; onTransitionEndCapture?: TransitionEventHandler<HTMLLabelElement>; htmlFor?: string; component?: ElementType<any, keyof IntrinsicElements>; }"
        },
        "inputProps": {
          "type": "custom",
          "typeName": "HTMLAttributes<HTMLInputElement> & { ref?: Ref<HTMLInputElement>; }"
        },
        "inputRef": {
          "type": "custom",
          "typeName": "((instance: HTMLInputElement) => void) | RefObject<HTMLInputElement>"
        },
        "elements": {
          "type": "custom",
          "typeName": "PickersSectionElement[]"
        },
        "sectionListRef": {
          "type": "custom",
          "typeName": "((instance: PickersSectionListRef) => void) | RefObject<PickersSectionListRef>"
        },
        "areAllSectionsEmpty": {
          "type": "boolean"
        },
        "endAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "startAdornment": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        }
      },
      "export": {
        "path": "@mui/x-date-pickers/PickersTextField",
        "locator": {
          "type": "named",
          "name": "PickersTextField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-data-grid#DataGrid": {
      "id": "@mui/x-data-grid#DataGrid",
      "name": "DataGrid",
      "comment": "",
      "props": {
        "className": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ baseChip?: JSXElementConstructor<ChipOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"tabIndex\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"icon\" | \"disabled\" | \"label\" | \"size\" | \"variant\" | \"avatar\" | \"clickable\" | \"deleteIcon\" | \"onDelete\" | \"skipFocusWhenDisabled\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseChipPropsOverrides>; cell?: JSXElementConstructor<GridCellProps & CellPropsOverrides>; skeletonCell?: JSXElementConstructor<GridSkeletonCellProps & SkeletonCellPropsOverrides>; columnHeaderFilterIconButton?: JSXElementConstructor<ColumnHeaderFilterIconButtonProps & ColumnHeaderFilterIconButtonPropsOverrides>; columnHeaderSortIcon?: JSXElementConstructor<GridColumnHeaderSortIconProps & ColumnHeaderSortIconPropsOverrides>; columnMenu?: JSXElementConstructor<GridColumnMenuProps & ColumnMenuPropsOverrides>; columnHeaders?: JSXElementConstructor<GridColumnHeadersProps>; detailPanels?: JSXElementConstructor<GridDetailPanelsProps & DetailPanelsPropsOverrides>; footer?: JSXElementConstructor<HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme>; } & FooterPropsOverrides>; footerRowCount?: JSXElementConstructor<HTMLAttributes<HTMLDivElement> & RowCountProps & { sx?: SxProps<Theme>; } & FooterRowCountOverrides>; toolbar?: JSXElementConstructor<GridToolbarProps & ToolbarPropsOverrides>; pinnedRows?: JSXElementConstructor<GridPinnedRowsProps & PinnedRowsPropsOverrides>; loadingOverlay?: JSXElementConstructor<GridLoadingOverlayProps & LoadingOverlayPropsOverrides>; noResultsOverlay?: JSXElementConstructor<HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme>; } & NoResultsOverlayPropsOverrides>; noRowsOverlay?: JSXElementConstructor<HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme>; } & NoRowsOverlayPropsOverrides>; pagination?: JSXElementConstructor<Partial<TablePaginationProps> & PaginationPropsOverrides>; filterPanel?: JSXElementConstructor<GridFilterPanelProps & FilterPanelPropsOverrides>; columnsPanel?: JSXElementConstructor<GridColumnsPanelProps & ColumnsPanelPropsOverrides>; columnsManagement?: JSXElementConstructor<any>; panel?: JSXElementConstructor<GridPanelProps & PanelPropsOverrides>; row?: JSXElementConstructor<GridRowProps & RowPropsOverrides>; baseCheckbox?: JSXElementConstructor<CheckboxProps & BaseCheckboxPropsOverrides>; baseInputAdornment?: JSXElementConstructor<InputAdornmentOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"children\" | \"classes\" | \"sx\" | \"variant\" | \"position\" | \"disablePointerEvents\" | \"disableTypography\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseInputAdornmentPropsOverrides>; baseTextField?: JSXElementConstructor<TextFieldProps & BaseTextFieldPropsOverrides>; baseFormControl?: JSXElementConstructor<FormControlOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"disabled\" | \"required\" | \"error\" | \"fullWidth\" | \"focused\" | \"hiddenLabel\" | \"margin\" | \"size\" | \"variant\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseFormControlPropsOverrides>; baseSelect?: JSXElementConstructor<SelectProps & BaseSelectPropsOverrides>; baseButton?: JSXElementConstructor<ButtonOwnProps & Omit<ButtonBaseOwnProps, \"classes\"> & CommonProps & Omit<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> & { ref?: Ref<HTMLButtonElement>; }, \"className\" | \"style\" | \"tabIndex\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"action\" | \"centerRipple\" | \"disabled\" | \"disableRipple\" | \"disableTouchRipple\" | \"focusRipple\" | \"focusVisibleClassName\" | \"LinkComponent\" | \"onFocusVisible\" | \"TouchRippleProps\" | \"touchRippleRef\" | \"disableFocusRipple\" | \"fullWidth\" | \"size\" | \"variant\" | \"href\" | \"disableElevation\" | \"endIcon\" | \"startIcon\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseButtonPropsOverrides>; baseIconButton?: JSXElementConstructor<IconButtonOwnProps & Omit<ButtonBaseOwnProps, \"classes\"> & CommonProps & Omit<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> & { ref?: Ref<HTMLButtonElement>; }, \"className\" | \"style\" | \"tabIndex\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"action\" | \"centerRipple\" | \"disabled\" | \"disableRipple\" | \"disableTouchRipple\" | \"focusRipple\" | \"focusVisibleClassName\" | \"LinkComponent\" | \"onFocusVisible\" | \"TouchRippleProps\" | \"touchRippleRef\" | \"disableFocusRipple\" | \"edge\" | \"size\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseIconButtonPropsOverrides>; baseTooltip?: JSXElementConstructor<TooltipProps & BaseTooltipPropsOverrides>; basePopper?: JSXElementConstructor<PopperProps & BasePopperPropsOverrides>; baseInputLabel?: JSXElementConstructor<InputLabelOwnProps & Pick<FormLabelOwnProps, \"color\" | \"filled\"> & CommonProps & Omit<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"ref\"> & { ref?: Ref<HTMLLabelElement>; }, \"className\" | \"style\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"disabled\" | \"required\" | \"filled\" | \"error\" | \"focused\" | \"margin\" | \"size\" | \"variant\" | \"disableAnimation\" | \"shrink\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseInputLabelPropsOverrides>; baseSelectOption?: JSXElementConstructor<{ native: boolean; value: any; children?: ReactNode; } & BaseSelectOptionPropsOverrides>; booleanCellTrueIcon?: JSXElementConstructor<any>; booleanCellFalseIcon?: JSXElementConstructor<any>; columnMenuIcon?: JSXElementConstructor<any>; openFilterButtonIcon?: JSXElementConstructor<any>; columnFilteredIcon?: JSXElementConstructor<any>; columnSelectorIcon?: JSXElementConstructor<any>; columnUnsortedIcon?: JSXElementConstructor<any>; columnSortedAscendingIcon?: JSXElementConstructor<any>; columnSortedDescendingIcon?: JSXElementConstructor<any>; columnResizeIcon?: JSXElementConstructor<any>; densityCompactIcon?: JSXElementConstructor<any>; densityStandardIcon?: JSXElementConstructor<any>; densityComfortableIcon?: JSXElementConstructor<any>; exportIcon?: JSXElementConstructor<any>; moreActionsIcon?: JSXElementConstructor<any>; treeDataExpandIcon?: JSXElementConstructor<any>; treeDataCollapseIcon?: JSXElementConstructor<any>; groupingCriteriaExpandIcon?: JSXElementConstructor<any>; groupingCriteriaCollapseIcon?: JSXElementConstructor<any>; detailPanelExpandIcon?: JSXElementConstructor<any>; detailPanelCollapseIcon?: JSXElementConstructor<any>; filterPanelAddIcon?: JSXElementConstructor<any>; filterPanelDeleteIcon?: JSXElementConstructor<any>; filterPanelRemoveAllIcon?: JSXElementConstructor<any>; rowReorderIcon?: JSXElementConstructor<any>; quickFilterIcon?: JSXElementConstructor<any>; quickFilterClearIcon?: JSXElementConstructor<any>; columnMenuHideIcon?: JSXElementConstructor<any>; columnMenuSortAscendingIcon?: JSXElementConstructor<any>; columnMenuSortDescendingIcon?: JSXElementConstructor<any>; columnMenuFilterIcon?: JSXElementConstructor<any>; columnMenuManageColumnsIcon?: JSXElementConstructor<any>; columnMenuClearIcon?: JSXElementConstructor<any>; loadIcon?: JSXElementConstructor<any>; columnReorderIcon?: JSXElementConstructor<any>; }",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ baseCheckbox?: Partial<CheckboxProps & BaseCheckboxPropsOverrides>; baseTextField?: Partial<TextFieldProps & BaseTextFieldPropsOverrides>; baseFormControl?: Partial<FormControlOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"disabled\" | \"required\" | \"error\" | \"fullWidth\" | \"focused\" | \"hiddenLabel\" | \"margin\" | \"size\" | \"variant\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseFormControlPropsOverrides>; baseSelect?: Partial<SelectProps & BaseSelectPropsOverrides>; baseSwitch?: Partial<SwitchProps & BaseSwitchPropsOverrides>; baseButton?: Partial<ButtonOwnProps & Omit<ButtonBaseOwnProps, \"classes\"> & CommonProps & Omit<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> & { ref?: Ref<HTMLButtonElement>; }, \"className\" | \"style\" | \"tabIndex\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"action\" | \"centerRipple\" | \"disabled\" | \"disableRipple\" | \"disableTouchRipple\" | \"focusRipple\" | \"focusVisibleClassName\" | \"LinkComponent\" | \"onFocusVisible\" | \"TouchRippleProps\" | \"touchRippleRef\" | \"disableFocusRipple\" | \"fullWidth\" | \"size\" | \"variant\" | \"href\" | \"disableElevation\" | \"endIcon\" | \"startIcon\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseButtonPropsOverrides>; baseIconButton?: Partial<IconButtonOwnProps & Omit<ButtonBaseOwnProps, \"classes\"> & CommonProps & Omit<Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> & { ref?: Ref<HTMLButtonElement>; }, \"className\" | \"style\" | \"tabIndex\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"action\" | \"centerRipple\" | \"disabled\" | \"disableRipple\" | \"disableTouchRipple\" | \"focusRipple\" | \"focusVisibleClassName\" | \"LinkComponent\" | \"onFocusVisible\" | \"TouchRippleProps\" | \"touchRippleRef\" | \"disableFocusRipple\" | \"edge\" | \"size\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseIconButtonPropsOverrides>; basePopper?: Partial<PopperProps & BasePopperPropsOverrides>; baseTooltip?: Partial<TooltipProps & BaseTooltipPropsOverrides>; baseInputLabel?: Partial<InputLabelOwnProps & Pick<FormLabelOwnProps, \"color\" | \"filled\"> & CommonProps & Omit<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, \"ref\"> & { ref?: Ref<HTMLLabelElement>; }, \"className\" | \"style\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"disabled\" | \"required\" | \"filled\" | \"error\" | \"focused\" | \"margin\" | \"size\" | \"variant\" | \"disableAnimation\" | \"shrink\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseInputLabelPropsOverrides>; baseInputAdornment?: Partial<InputAdornmentOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"children\" | \"classes\" | \"sx\" | \"variant\" | \"position\" | \"disablePointerEvents\" | \"disableTypography\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseInputAdornmentPropsOverrides>; baseSelectOption?: Partial<{ native: boolean; value: any; children?: ReactNode; } & BaseSelectOptionPropsOverrides>; baseChip?: Partial<ChipOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: Ref<HTMLDivElement>; }, \"className\" | \"style\" | \"tabIndex\" | \"color\" | \"children\" | \"classes\" | \"sx\" | \"icon\" | \"disabled\" | \"label\" | \"size\" | \"variant\" | \"avatar\" | \"clickable\" | \"deleteIcon\" | \"onDelete\" | \"skipFocusWhenDisabled\"> & { component?: ElementType<any, keyof IntrinsicElements>; } & BaseChipPropsOverrides>; cell?: Partial<GridCellProps & CellPropsOverrides>; columnHeaders?: Partial<GridColumnHeadersProps>; columnHeaderFilterIconButton?: Partial<ColumnHeaderFilterIconButtonProps & ColumnHeaderFilterIconButtonPropsOverrides>; columnHeaderSortIcon?: Partial<GridColumnHeaderSortIconProps & ColumnHeaderSortIconPropsOverrides>; columnMenu?: Partial<GridColumnMenuProps & ColumnMenuPropsOverrides>; columnsPanel?: Partial<GridColumnsPanelProps & ColumnsPanelPropsOverrides>; columnsManagement?: Partial<GridColumnsManagementProps & ColumnsManagementPropsOverrides>; detailPanels?: Partial<GridDetailPanelsProps & DetailPanelsPropsOverrides>; filterPanel?: Partial<GridFilterPanelProps & FilterPanelPropsOverrides>; footer?: Partial<HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme>; } & FooterPropsOverrides>; footerRowCount?: Partial<HTMLAttributes<HTMLDivElement> & RowCountProps & { sx?: SxProps<Theme>; } & FooterRowCountOverrides>; loadingOverlay?: Partial<GridLoadingOverlayProps & LoadingOverlayPropsOverrides>; noResultsOverlay?: Partial<HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme>; } & NoResultsOverlayPropsOverrides>; noRowsOverlay?: Partial<HTMLAttributes<HTMLDivElement> & { sx?: SxProps<Theme>; } & NoRowsOverlayPropsOverrides>; pagination?: Partial<Partial<TablePaginationProps> & PaginationPropsOverrides>; panel?: Partial<GridPanelProps & PanelPropsOverrides>; pinnedRows?: Partial<GridPinnedRowsProps & PinnedRowsPropsOverrides>; row?: Partial<GridRowProps & RowPropsOverrides>; skeletonCell?: Partial<GridSkeletonCellProps & SkeletonCellPropsOverrides>; toolbar?: Partial<GridToolbarProps & ToolbarPropsOverrides>; }",
          "source": {
            "type": "code-usage"
          }
        },
        "autoHeight": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoPageSize": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "checkboxSelection": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "columnBufferPx": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "rowBufferPx": {
          "type": "number"
        },
        "rowSelection": {
          "type": "boolean"
        },
        "resizeThrottleMs": {
          "type": "number"
        },
        "disableColumnFilter": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnMenu": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnSelector": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableDensitySelector": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableEval": {
          "type": "boolean"
        },
        "disableMultipleRowSelection": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnSorting": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRowSelectionOnClick": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableVirtualization": {
          "type": "boolean"
        },
        "editMode": {
          "type": "string-union",
          "values": [
            "cell",
            "row"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "filterMode": {
          "type": "string-union",
          "values": [
            "client",
            "server"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "filterDebounceMs": {
          "type": "number"
        },
        "columnHeaderHeight": {
          "type": "number"
        },
        "hideFooter": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "hideFooterPagination": {
          "type": "boolean"
        },
        "hideFooterSelectedRowCount": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "ignoreDiacritics": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "keepNonExistentRowsSelected": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "logger": {
          "type": "custom",
          "typeName": "Logger"
        },
        "logLevel": {
          "type": "custom",
          "typeName": "false | keyof Logger"
        },
        "loading": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "paginationMode": {
          "type": "string-union",
          "values": [
            "client",
            "server"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "rows": {
          "type": "custom",
          "typeName": "readonly R[]",
          "source": {
            "type": "code-usage"
          }
        },
        "rowHeight": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "pageSizeOptions": {
          "type": "custom",
          "typeName": "readonly (number | { value: number; label: string; })[]",
          "source": {
            "type": "code-usage"
          }
        },
        "rowSpacingType": {
          "type": "string-union",
          "values": [
            "margin",
            "border"
          ]
        },
        "showCellVerticalBorder": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "showColumnVerticalBorder": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sortingOrder": {
          "type": "custom",
          "typeName": "readonly GridSortDirection[]",
          "source": {
            "type": "code-usage"
          }
        },
        "sortingMode": {
          "type": "string-union",
          "values": [
            "client",
            "server"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnResize": {
          "type": "boolean"
        },
        "ignoreValueFormatterDuringExport": {
          "type": "custom",
          "typeName": "boolean | { csvExport?: boolean; clipboardExport?: boolean; }",
          "source": {
            "type": "code-usage"
          }
        },
        "clipboardCopyCellDelimiter": {
          "type": "string"
        },
        "rowPositionsDebounceMs": {
          "type": "number"
        },
        "autosizeOnMount": {
          "type": "boolean"
        },
        "disableAutosize": {
          "type": "boolean"
        },
        "localeText": {
          "type": "custom",
          "typeName": "{ noRowsLabel?: string; noResultsOverlayLabel?: string; toolbarDensity?: ReactNode; toolbarDensityLabel?: string; toolbarDensityCompact?: string; toolbarDensityStandard?: string; toolbarDensityComfortable?: string; toolbarColumns?: ReactNode; toolbarColumnsLabel?: string; toolbarFilters?: ReactNode; toolbarFiltersLabel?: string; toolbarFiltersTooltipHide?: ReactNode; toolbarFiltersTooltipShow?: ReactNode; toolbarFiltersTooltipActive?: (count: number) => ReactNode; toolbarQuickFilterPlaceholder?: string; toolbarQuickFilterLabel?: string; toolbarQuickFilterDeleteIconLabel?: string; toolbarExport?: ReactNode; toolbarExportLabel?: string; toolbarExportCSV?: ReactNode; toolbarExportPrint?: ReactNode; toolbarExportExcel?: string; columnsManagementSearchTitle?: string; columnsManagementNoColumns?: string; columnsManagementShowHideAllText?: string; columnsManagementReset?: string; filterPanelAddFilter?: ReactNode; filterPanelRemoveAll?: ReactNode; filterPanelDeleteIconLabel?: string; filterPanelLogicOperator?: string; filterPanelOperator?: ReactNode; filterPanelOperatorAnd?: ReactNode; filterPanelOperatorOr?: ReactNode; filterPanelColumns?: ReactNode; filterPanelInputLabel?: string; filterPanelInputPlaceholder?: string; filterOperatorContains?: string; filterOperatorEquals?: string; filterOperatorStartsWith?: string; filterOperatorEndsWith?: string; filterOperatorIs?: string; filterOperatorNot?: string; filterOperatorAfter?: string; filterOperatorOnOrAfter?: string; filterOperatorBefore?: string; filterOperatorOnOrBefore?: string; filterOperatorIsEmpty?: string; filterOperatorIsNotEmpty?: string; filterOperatorIsAnyOf?: string; 'filterOperator='?: string; 'filterOperator!='?: string; 'filterOperator>'?: string; 'filterOperator>='?: string; 'filterOperator<'?: string; 'filterOperator<='?: string; headerFilterOperatorContains?: string; headerFilterOperatorEquals?: string; headerFilterOperatorStartsWith?: string; headerFilterOperatorEndsWith?: string; headerFilterOperatorIs?: string; headerFilterOperatorNot?: string; headerFilterOperatorAfter?: string; headerFilterOperatorOnOrAfter?: string; headerFilterOperatorBefore?: string; headerFilterOperatorOnOrBefore?: string; headerFilterOperatorIsEmpty?: string; headerFilterOperatorIsNotEmpty?: string; headerFilterOperatorIsAnyOf?: string; 'headerFilterOperator='?: string; 'headerFilterOperator!='?: string; 'headerFilterOperator>'?: string; 'headerFilterOperator>='?: string; 'headerFilterOperator<'?: string; 'headerFilterOperator<='?: string; filterValueAny?: string; filterValueTrue?: string; filterValueFalse?: string; columnMenuLabel?: string; columnMenuShowColumns?: ReactNode; columnMenuManageColumns?: ReactNode; columnMenuFilter?: ReactNode; columnMenuHideColumn?: ReactNode; columnMenuUnsort?: ReactNode; columnMenuSortAsc?: ReactNode | ((colDef: GridColDef) => ReactNode); columnMenuSortDesc?: ReactNode | ((colDef: GridColDef) => ReactNode); columnHeaderFiltersTooltipActive?: (count: number) => ReactNode; columnHeaderFiltersLabel?: string; columnHeaderSortIconLabel?: string; footerRowSelected?: (count: number) => ReactNode; footerTotalRows?: ReactNode; footerTotalVisibleRows?: (visibleCount: number, totalCount: number) => ReactNode; checkboxSelectionHeaderName?: string; checkboxSelectionSelectAllRows?: string; checkboxSelectionUnselectAllRows?: string; checkboxSelectionSelectRow?: string; checkboxSelectionUnselectRow?: string; booleanCellTrueLabel?: string; booleanCellFalseLabel?: string; actionsCellMore?: string; pinToLeft?: string; pinToRight?: string; unpin?: string; treeDataGroupingHeaderName?: string; treeDataExpand?: string; treeDataCollapse?: string; groupingColumnHeaderName?: string; groupColumn?: (name: string) => string; unGroupColumn?: (name: string) => string; detailPanelToggle?: string; expandDetailPanel?: string; collapseDetailPanel?: string; rowReorderingHeaderName?: string; aggregationMenuItemHeader?: string; aggregationFunctionLabelSum?: string; aggregationFunctionLabelAvg?: string; aggregationFunctionLabelMin?: string; aggregationFunctionLabelMax?: string; aggregationFunctionLabelSize?: string; MuiTablePagination?: MuiTablePaginationLocalizedProps; }",
          "source": {
            "type": "code-usage"
          }
        },
        "apiRef": {
          "type": "custom",
          "typeName": "MutableRefObject<GridApiCommunity>",
          "source": {
            "type": "code-usage"
          }
        },
        "forwardedProps": {
          "type": "custom",
          "typeName": "{ [x: string]: unknown; }"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ actionsCell?: string; aggregationColumnHeader?: string; 'aggregationColumnHeader--alignLeft'?: string; 'aggregationColumnHeader--alignCenter'?: string; 'aggregationColumnHeader--alignRight'?: string; aggregationColumnHeaderLabel?: string; autoHeight?: string; autosizing?: string; booleanCell?: string; 'cell--editable'?: string; 'cell--editing'?: string; 'cell--flex'?: string; 'cell--textCenter'?: string; 'cell--textLeft'?: string; 'cell--textRight'?: string; 'cell--rangeTop'?: string; 'cell--rangeBottom'?: string; 'cell--rangeLeft'?: string; 'cell--rangeRight'?: string; 'cell--pinnedLeft'?: string; 'cell--pinnedRight'?: string; 'cell--selectionMode'?: string; cell?: string; cellCheckbox?: string; cellEmpty?: string; cellSkeleton?: string; cellOffsetLeft?: string; checkboxInput?: string; columnHeader?: string; 'columnHeader--alignCenter'?: string; 'columnHeader--alignLeft'?: string; 'columnHeader--alignRight'?: string; 'columnHeader--dragging'?: string; 'columnHeader--moving'?: string; 'columnHeader--numeric'?: string; 'columnHeader--sortable'?: string; 'columnHeader--sorted'?: string; 'columnHeader--filtered'?: string; 'columnHeader--pinnedLeft'?: string; 'columnHeader--pinnedRight'?: string; 'columnHeader--last'?: string; columnHeaderCheckbox?: string; columnHeaderDraggableContainer?: string; rowReorderCellPlaceholder?: string; columnHeaderTitle?: string; columnHeaderTitleContainer?: string; columnHeaderTitleContainerContent?: string; 'columnHeader--filledGroup'?: string; 'columnHeader--emptyGroup'?: string; columnHeaders?: string; 'columnSeparator--resizable'?: string; 'columnSeparator--resizing'?: string; 'columnSeparator--sideLeft'?: string; 'columnSeparator--sideRight'?: string; columnSeparator?: string; columnsManagement?: string; columnsManagementRow?: string; columnsManagementHeader?: string; columnsManagementFooter?: string; 'container--top'?: string; 'container--bottom'?: string; detailPanel?: string; detailPanels?: string; detailPanelToggleCell?: string; 'detailPanelToggleCell--expanded'?: string; footerCell?: string; panel?: string; panelHeader?: string; panelWrapper?: string; panelContent?: string; panelFooter?: string; paper?: string; editBooleanCell?: string; filler?: string; 'filler--borderTop'?: string; 'filler--pinnedLeft'?: string; 'filler--pinnedRight'?: string; filterForm?: string; filterFormDeleteIcon?: string; filterFormLogicOperatorInput?: string; filterFormColumnInput?: string; filterFormOperatorInput?: string; filterFormValueInput?: string; editInputCell?: string; filterIcon?: string; footerContainer?: string; iconButtonContainer?: string; iconSeparator?: string; headerFilterRow?: string; main?: string; 'main--hasPinnedRight'?: string; 'main--hasSkeletonLoadingOverlay'?: string; menu?: string; menuIcon?: string; menuIconButton?: string; menuOpen?: string; menuList?: string; overlayWrapper?: string; overlayWrapperInner?: string; overlay?: string; virtualScroller?: string; virtualScrollerContent?: string; 'virtualScrollerContent--overflowed'?: string; virtualScrollerRenderZone?: string; pinnedColumns?: string; root?: string; 'root--densityStandard'?: string; 'root--densityComfortable'?: string; 'root--densityCompact'?: string; 'root--disableUserSelection'?: string; 'root--noToolbar'?: string; 'row--editable'?: string; 'row--editing'?: string; 'row--dragging'?: string; 'row--firstVisible'?: string; 'row--lastVisible'?: string; 'row--dynamicHeight'?: string; 'row--detailPanelExpanded'?: string; 'row--borderBottom'?: string; row?: string; rowCount?: string; rowReorderCellContainer?: string; rowReorderCell?: string; 'rowReorderCell--draggable'?: string; rowSkeleton?: string; scrollArea?: string; 'scrollArea--left'?: string; 'scrollArea--right'?: string; scrollbar?: string; 'scrollbar--horizontal'?: string; 'scrollbar--vertical'?: string; scrollbarFiller?: string; 'scrollbarFiller--header'?: string; 'scrollbarFiller--borderTop'?: string; 'scrollbarFiller--pinnedRight'?: string; selectedRowCount?: string; sortIcon?: string; toolbarContainer?: string; toolbarFilterList?: string; withVerticalBorder?: string; withBorderColor?: string; 'cell--withRightBorder'?: string; 'cell--withLeftBorder'?: string; 'columnHeader--withRightBorder'?: string; 'columnHeader--withLeftBorder'?: string; treeDataGroupingCell?: string; treeDataGroupingCellToggle?: string; treeDataGroupingCellLoadingContainer?: string; groupingCriteriaCell?: string; groupingCriteriaCellToggle?: string; pinnedRows?: string; 'pinnedRows--top'?: string; 'pinnedRows--bottom'?: string; pinnedRowsRenderZone?: string; }"
        },
        "density": {
          "type": "string-union",
          "values": [
            "standard",
            "compact",
            "comfortable"
          ],
          "source": {
            "type": "code-usage"
          }
        },
        "rowCount": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "estimatedRowCount": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "scrollbarSize": {
          "type": "number"
        },
        "getCellClassName": {
          "type": "custom",
          "typeName": "(params: GridCellParams<any, R, R, GridTreeNode>) => string",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowClassName": {
          "type": "custom",
          "typeName": "(params: GridRowClassNameParams<R>) => string",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowHeight": {
          "type": "custom",
          "typeName": "(params: GridRowHeightParams) => GridRowHeightReturnValue",
          "source": {
            "type": "code-usage"
          }
        },
        "getEstimatedRowHeight": {
          "type": "custom",
          "typeName": "(params: GridRowHeightParams) => number",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowSpacing": {
          "type": "custom",
          "typeName": "(params: GridRowSpacingParams) => GridRowSpacing",
          "source": {
            "type": "code-usage"
          }
        },
        "getDetailPanelContent": {
          "type": "custom",
          "typeName": "(params: GridRowParams<R>) => ReactNode"
        },
        "isCellEditable": {
          "type": "custom",
          "typeName": "(params: GridCellParams<any, R, R, GridTreeNode>) => boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "isRowSelectable": {
          "type": "custom",
          "typeName": "(params: GridRowParams<R>) => boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "paginationModel": {
          "type": "custom",
          "typeName": "GridPaginationModel",
          "source": {
            "type": "code-usage"
          }
        },
        "paginationMeta": {
          "type": "custom",
          "typeName": "GridPaginationMeta",
          "source": {
            "type": "code-usage"
          }
        },
        "cellModesModel": {
          "type": "custom",
          "typeName": "{ [x: string]: Record<string, GridCellModesModelProps>; [x: number]: Record<string, GridCellModesModelProps>; }",
          "source": {
            "type": "code-usage"
          }
        },
        "rowModesModel": {
          "type": "custom",
          "typeName": "{ [x: string]: GridRowModesModelProps; [x: number]: GridRowModesModelProps; }"
        },
        "filterModel": {
          "type": "custom",
          "typeName": "GridFilterModel",
          "source": {
            "type": "code-usage"
          }
        },
        "rowSelectionModel": {
          "type": "custom",
          "typeName": "GridRowId | readonly GridRowId[]",
          "source": {
            "type": "code-usage"
          }
        },
        "columnVisibilityModel": {
          "type": "custom",
          "typeName": "{ [x: string]: boolean; }",
          "source": {
            "type": "code-usage"
          }
        },
        "sortModel": {
          "type": "custom",
          "typeName": "GridSortItem[]",
          "source": {
            "type": "code-usage"
          }
        },
        "columns": {
          "type": "custom",
          "typeName": "readonly GridColDef<R>[]",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowId": {
          "type": "custom",
          "typeName": "(row: R) => GridRowId",
          "source": {
            "type": "code-usage"
          }
        },
        "initialState": {
          "type": "custom",
          "typeName": "GridInitialStateCommunity",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]",
          "source": {
            "type": "code-usage"
          }
        },
        "experimentalFeatures": {
          "type": "custom",
          "typeName": "{ warnIfFocusStateIsNotSynced?: boolean; }"
        },
        "processRowUpdate": {
          "type": "custom",
          "typeName": "(newRow: R, oldRow: R) => R | Promise<R>",
          "source": {
            "type": "code-usage"
          }
        },
        "columnGroupingModel": {
          "type": "custom",
          "typeName": "GridColumnGroup[]",
          "source": {
            "type": "code-usage"
          }
        },
        "autosizeOptions": {
          "type": "custom",
          "typeName": "{ columns?: string[]; includeHeaders?: boolean; includeOutliers?: boolean; outliersFactor?: number; expand?: boolean; }",
          "source": {
            "type": "code-usage"
          }
        },
        "pagination": {
          "type": "custom",
          "typeName": "true",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-data-grid",
        "locator": {
          "type": "named",
          "name": "DataGrid"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "location": {
        "path": "/home/vj/work_projects/anima/frontier-library-exports/mui-library-project/node_modules/@mui/x-data-grid/DataGrid/DataGrid.d.ts"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/material#ThemeProvider"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsClipPath#ChartsClipPath": {
      "id": "@mui/x-charts/ChartsClipPath#ChartsClipPath",
      "name": "ChartsClipPath",
      "props": {
        "id": {
          "type": "string"
        },
        "offset": {
          "type": "custom",
          "typeName": "{ top?: number; right?: number; bottom?: number; left?: number; }"
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsClipPath",
        "locator": {
          "type": "named",
          "name": "ChartsClipPath"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
        ],
        "exclusiveParent": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine": {
      "id": "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine",
      "name": "ChartsReferenceLine",
      "props": {
        "x": {
          "type": "custom",
          "typeName": "TValue"
        },
        "lineStyle": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "labelStyle": {
          "type": "custom",
          "typeName": "ChartsTextStyle"
        },
        "label": {
          "type": "string"
        },
        "labelAlign": {
          "type": "string-union",
          "values": [
            "start",
            "middle",
            "end"
          ]
        },
        "y": {
          "type": "custom",
          "typeName": "TValue"
        },
        "spacing": {
          "type": "custom",
          "typeName": "number | { x?: number; y?: number; }"
        },
        "axisId": {
          "type": "custom",
          "typeName": "string | number"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; vertical?: string; horizontal?: string; line?: string; label?: string; }"
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsReferenceLine",
        "locator": {
          "type": "named",
          "name": "ChartsReferenceLine"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
          "@mui/x-charts/LineChart#LineChart",
          "@mui/x-charts/ChartContainer#ChartContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsXAxis#ChartsXAxis": {
      "id": "@mui/x-charts/ChartsXAxis#ChartsXAxis",
      "name": "ChartsXAxis",
      "props": {
        "axisId": {
          "type": "custom",
          "typeName": "string | number"
        },
        "label": {
          "type": "string"
        },
        "labelFontSize": {
          "type": "number"
        },
        "position": {
          "type": "string-union",
          "values": [
            "top",
            "bottom"
          ]
        },
        "tickInterval": {
          "type": "custom",
          "typeName": "any[] | \"auto\" | ((value: any, index: number) => boolean)"
        },
        "tickLabelStyle": {
          "type": "custom",
          "typeName": "ChartsTextStyle"
        },
        "disableLine": {
          "type": "boolean"
        },
        "disableTicks": {
          "type": "boolean"
        },
        "fill": {
          "type": "string"
        },
        "tickFontSize": {
          "type": "number"
        },
        "labelStyle": {
          "type": "custom",
          "typeName": "ChartsTextStyle"
        },
        "tickLabelInterval": {
          "type": "custom",
          "typeName": "\"auto\" | ((value: any, index: number) => boolean)"
        },
        "stroke": {
          "type": "string"
        },
        "tickSize": {
          "type": "number"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; line?: string; tickContainer?: string; tick?: string; tickLabel?: string; label?: string; directionX?: string; directionY?: string; top?: string; bottom?: string; left?: string; right?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ axisLine?: JSXElementConstructor<SVGAttributes<SVGPathElement>>; axisTick?: JSXElementConstructor<SVGAttributes<SVGPathElement>>; axisTickLabel?: JSXElementConstructor<ChartsTextProps>; axisLabel?: JSXElementConstructor<ChartsTextProps>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ axisLine?: Partial<SVGAttributes<SVGPathElement>>; axisTick?: Partial<SVGAttributes<SVGPathElement>>; axisTickLabel?: Partial<ChartsTextProps>; axisLabel?: Partial<ChartsTextProps>; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<{}> | ((theme: {}) => SystemStyleObject<{}>) | readonly (boolean | SystemStyleObject<{}> | ((theme: {}) => SystemStyleObject<{}>))[]"
        },
        "tickMaxStep": {
          "type": "number"
        },
        "tickMinStep": {
          "type": "number"
        },
        "tickNumber": {
          "type": "number"
        },
        "tickPlacement": {
          "type": "string-union",
          "values": [
            "start",
            "middle",
            "end",
            "extremities"
          ]
        },
        "tickLabelPlacement": {
          "type": "string-union",
          "values": [
            "middle",
            "tick"
          ]
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsXAxis",
        "locator": {
          "type": "named",
          "name": "ChartsXAxis"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
          "@mui/x-charts/ChartContainer#ChartContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsYAxis#ChartsYAxis": {
      "id": "@mui/x-charts/ChartsYAxis#ChartsYAxis",
      "name": "ChartsYAxis",
      "props": {
        "axisId": {
          "type": "custom",
          "typeName": "string | number"
        },
        "label": {
          "type": "string"
        },
        "position": {
          "type": "string-union",
          "values": [
            "left",
            "right"
          ]
        },
        "tickLabelStyle": {
          "type": "custom",
          "typeName": "ChartsTextStyle"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<{}> | ((theme: {}) => SystemStyleObject<{}>) | readonly (boolean | SystemStyleObject<{}> | ((theme: {}) => SystemStyleObject<{}>))[]"
        },
        "disableLine": {
          "type": "boolean"
        },
        "disableTicks": {
          "type": "boolean"
        },
        "fill": {
          "type": "string"
        },
        "tickFontSize": {
          "type": "number"
        },
        "labelStyle": {
          "type": "custom",
          "typeName": "ChartsTextStyle"
        },
        "tickLabelInterval": {
          "type": "custom",
          "typeName": "\"auto\" | ((value: any, index: number) => boolean)"
        },
        "labelFontSize": {
          "type": "number"
        },
        "stroke": {
          "type": "string"
        },
        "tickSize": {
          "type": "number"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; line?: string; tickContainer?: string; tick?: string; tickLabel?: string; label?: string; directionX?: string; directionY?: string; top?: string; bottom?: string; left?: string; right?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "{ axisLine?: JSXElementConstructor<SVGAttributes<SVGPathElement>>; axisTick?: JSXElementConstructor<SVGAttributes<SVGPathElement>>; axisTickLabel?: JSXElementConstructor<ChartsTextProps>; axisLabel?: JSXElementConstructor<ChartsTextProps>; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "{ axisLine?: Partial<SVGAttributes<SVGPathElement>>; axisTick?: Partial<SVGAttributes<SVGPathElement>>; axisTickLabel?: Partial<ChartsTextProps>; axisLabel?: Partial<ChartsTextProps>; }"
        },
        "tickMaxStep": {
          "type": "number"
        },
        "tickMinStep": {
          "type": "number"
        },
        "tickNumber": {
          "type": "number"
        },
        "tickInterval": {
          "type": "custom",
          "typeName": "any[] | \"auto\" | ((value: any, index: number) => boolean)"
        },
        "tickPlacement": {
          "type": "string-union",
          "values": [
            "start",
            "middle",
            "end",
            "extremities"
          ]
        },
        "tickLabelPlacement": {
          "type": "string-union",
          "values": [
            "middle",
            "tick"
          ]
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsYAxis",
        "locator": {
          "type": "named",
          "name": "ChartsYAxis"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
          "@mui/x-charts/ChartContainer#ChartContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsGrid#ChartsGrid": {
      "id": "@mui/x-charts/ChartsGrid#ChartsGrid",
      "name": "ChartsGrid",
      "props": {
        "vertical": {
          "type": "boolean"
        },
        "horizontal": {
          "type": "boolean"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; line?: string; horizontalLine?: string; verticalLine?: string; }"
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsGrid",
        "locator": {
          "type": "named",
          "name": "ChartsGrid"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
        ],
        "exclusiveParent": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsTooltip#ChartsTooltip": {
      "id": "@mui/x-charts/ChartsTooltip#ChartsTooltip",
      "name": "ChartsTooltip",
      "props": {
        "trigger": {
          "type": "string-union",
          "values": [
            "none",
            "item",
            "axis"
          ]
        },
        "itemContent": {
          "type": "custom",
          "typeName": "ComponentType<ChartsItemContentProps<any>>"
        },
        "axisContent": {
          "type": "custom",
          "typeName": "ComponentType<ChartsAxisContentProps>"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; table?: string; row?: string; cell?: string; mark?: string; markCell?: string; labelCell?: string; valueCell?: string; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "ChartsTooltipSlots<T>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "ChartsTooltipSlotProps<T>"
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsTooltip",
        "locator": {
          "type": "named",
          "name": "ChartsTooltip"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
        ],
        "exclusiveParent": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsLegend#ContinuousColorLegend": {
      "id": "@mui/x-charts/ChartsLegend#ContinuousColorLegend",
      "name": "ContinuousColorLegend",
      "props": {
        "axisDirection": {
          "type": "string-union",
          "values": [
            "x",
            "y",
            "z"
          ]
        },
        "position": {
          "type": "custom",
          "typeName": "{ horizontal: AnchorX; vertical: AnchorY; }"
        },
        "direction": {
          "type": "string-union",
          "values": [
            "row",
            "column"
          ]
        },
        "length": {
          "type": "custom",
          "typeName": "string | number"
        },
        "thickness": {
          "type": "number"
        },
        "align": {
          "type": "string-union",
          "values": [
            "start",
            "middle",
            "end"
          ]
        },
        "labelStyle": {
          "type": "custom",
          "typeName": "ChartsTextStyle"
        },
        "minLabel": {
          "type": "custom",
          "typeName": "string | LabelFormatter"
        },
        "maxLabel": {
          "type": "custom",
          "typeName": "string | LabelFormatter"
        },
        "id": {
          "type": "string"
        },
        "scaleType": {
          "type": "string-union",
          "values": [
            "time",
            "log",
            "pow",
            "sqrt",
            "utc",
            "linear"
          ]
        },
        "spacing": {
          "type": "number"
        },
        "axisId": {
          "type": "custom",
          "typeName": "string | number"
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsLegend",
        "locator": {
          "type": "named",
          "name": "ContinuousColorLegend"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/LineChart#LineChart"
        ],
        "exclusiveParent": "@mui/x-charts/LineChart#LineChart"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartsAxisHighlight#ChartsAxisHighlight": {
      "id": "@mui/x-charts/ChartsAxisHighlight#ChartsAxisHighlight",
      "name": "ChartsAxisHighlight",
      "props": {
        "x": {
          "type": "string-union",
          "values": [
            "line",
            "none",
            "band"
          ]
        },
        "y": {
          "type": "string-union",
          "values": [
            "line",
            "none",
            "band"
          ]
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartsAxisHighlight",
        "locator": {
          "type": "named",
          "name": "ChartsAxisHighlight"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
        ],
        "exclusiveParent": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/BarChart#BarPlot": {
      "id": "@mui/x-charts/BarChart#BarPlot",
      "name": "BarPlot",
      "props": {
        "skipAnimation": {
          "type": "boolean"
        },
        "borderRadius": {
          "type": "number"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "BarPlotSlotProps"
        },
        "slots": {
          "type": "custom",
          "typeName": "BarPlotSlots"
        },
        "barLabel": {
          "type": "custom",
          "typeName": "\"value\" | ((item: BarItem, context: BarLabelContext) => string)"
        }
      },
      "export": {
        "path": "@mui/x-charts/BarChart",
        "locator": {
          "type": "named",
          "name": "BarPlot"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
          "@mui/x-charts/ChartContainer#ChartContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/LineChart#LineChart": {
      "id": "@mui/x-charts/LineChart#LineChart",
      "name": "LineChart",
      "props": {
        "xAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\">[]"
        },
        "series": {
          "type": "custom",
          "typeName": "MakeOptional<LineSeriesType, \"type\">[]"
        },
        "height": {
          "type": "number"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "yAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\">[]"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "width": {
          "type": "number"
        },
        "leftAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "rightAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "dataset": {
          "type": "custom",
          "typeName": "DatasetElementType<string | number | Date>[]"
        },
        "grid": {
          "type": "custom",
          "typeName": "{ vertical?: boolean; horizontal?: boolean; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "LineChartSlotProps"
        },
        "slots": {
          "type": "custom",
          "typeName": "LineChartSlots"
        },
        "skipAnimation": {
          "type": "boolean"
        },
        "loading": {
          "type": "boolean"
        },
        "tooltip": {
          "type": "custom",
          "typeName": "ChartsTooltipProps<\"line\">"
        },
        "axisHighlight": {
          "type": "custom",
          "typeName": "{ x?: AxisHighlight; y?: AxisHighlight; }"
        },
        "legend": {
          "type": "custom",
          "typeName": "ChartsLegendProps"
        },
        "disableLineItemHighlight": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "colors": {
          "type": "custom",
          "typeName": "string[] | ChartsColorPaletteCallback"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "highlightedItem": {
          "type": "custom",
          "typeName": "{ seriesId?: SeriesId; dataIndex?: number; }"
        },
        "topAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "bottomAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/LineChart",
        "locator": {
          "type": "named",
          "name": "LineChart"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack",
          "@mui/material#Box",
          "docsx/src/modules/components/ChartsUsageDemo#ChartsUsageDemo"
        ],
        "exclusiveChildren": [
          "@mui/x-charts/ChartsLegend#PiecewiseColorLegend",
          "@mui/x-charts/ChartsLegend#ContinuousColorLegend"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/LineChart#LinePlot": {
      "id": "@mui/x-charts/LineChart#LinePlot",
      "name": "LinePlot",
      "props": {
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "max": {
          "type": "custom",
          "typeName": "string | number"
        },
        "media": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "min": {
          "type": "custom",
          "typeName": "string | number"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "tabIndex": {
          "type": "number"
        },
        "crossOrigin": {
          "type": "string-union",
          "values": [
            "",
            "anonymous",
            "use-credentials"
          ]
        },
        "accentHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "accumulate": {
          "type": "string-union",
          "values": [
            "none",
            "sum"
          ]
        },
        "additive": {
          "type": "string-union",
          "values": [
            "sum",
            "replace"
          ]
        },
        "alignmentBaseline": {
          "type": "string-union",
          "values": [
            "middle",
            "alphabetic",
            "hanging",
            "ideographic",
            "mathematical",
            "auto",
            "baseline",
            "before-edge",
            "text-before-edge",
            "central",
            "after-edge",
            "text-after-edge",
            "inherit"
          ]
        },
        "allowReorder": {
          "type": "string-union",
          "values": [
            "no",
            "yes"
          ]
        },
        "alphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "amplitude": {
          "type": "custom",
          "typeName": "string | number"
        },
        "arabicForm": {
          "type": "string-union",
          "values": [
            "initial",
            "medial",
            "terminal",
            "isolated"
          ]
        },
        "ascent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "type": "string"
        },
        "autoReverse": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "azimuth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseFrequency": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baselineShift": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bbox": {
          "type": "custom",
          "typeName": "string | number"
        },
        "begin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bias": {
          "type": "custom",
          "typeName": "string | number"
        },
        "by": {
          "type": "custom",
          "typeName": "string | number"
        },
        "calcMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "capHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clip": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipPath": {
          "type": "string"
        },
        "clipPathUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipRule": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolationFilters": {
          "type": "string-union",
          "values": [
            "auto",
            "inherit",
            "sRGB",
            "linearRGB"
          ]
        },
        "colorProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentScriptType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentStyleType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cursor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "d": {
          "type": "string"
        },
        "decelerate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "descent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "diffuseConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "direction": {
          "type": "custom",
          "typeName": "string | number"
        },
        "display": {
          "type": "custom",
          "typeName": "string | number"
        },
        "divisor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dominantBaseline": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "edgeMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "elevation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "enableBackground": {
          "type": "custom",
          "typeName": "string | number"
        },
        "end": {
          "type": "custom",
          "typeName": "string | number"
        },
        "exponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "externalResourcesRequired": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "fill": {
          "type": "string"
        },
        "fillOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fillRule": {
          "type": "string-union",
          "values": [
            "inherit",
            "nonzero",
            "evenodd"
          ]
        },
        "filter": {
          "type": "string"
        },
        "filterRes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "filterUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "focusable": {
          "type": "custom",
          "typeName": "\"auto\" | Booleanish"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontSizeAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStretch": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStyle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontVariant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontWeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "format": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fr": {
          "type": "custom",
          "typeName": "string | number"
        },
        "from": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphName": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationHorizontal": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationVertical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphRef": {
          "type": "custom",
          "typeName": "string | number"
        },
        "gradientTransform": {
          "type": "string"
        },
        "gradientUnits": {
          "type": "string"
        },
        "hanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizAdvX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "href": {
          "type": "string"
        },
        "ideographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "imageRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in": {
          "type": "string"
        },
        "intercept": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k3": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k4": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelMatrix": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelUnitLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kerning": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyPoints": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keySplines": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyTimes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lengthAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "letterSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lightingColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "limitingConeAngle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "local": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerEnd": {
          "type": "string"
        },
        "markerHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerMid": {
          "type": "string"
        },
        "markerStart": {
          "type": "string"
        },
        "markerUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mask": {
          "type": "string"
        },
        "maskContentUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "numOctaves": {
          "type": "custom",
          "typeName": "string | number"
        },
        "offset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "opacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "operator": {
          "type": "custom",
          "typeName": "string | number"
        },
        "order": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orient": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orientation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "origin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overflow": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "paintOrder": {
          "type": "custom",
          "typeName": "string | number"
        },
        "panose1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "path": {
          "type": "string"
        },
        "pathLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternContentUnits": {
          "type": "string"
        },
        "patternTransform": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternUnits": {
          "type": "string"
        },
        "pointerEvents": {
          "type": "custom",
          "typeName": "string | number"
        },
        "points": {
          "type": "string"
        },
        "pointsAtX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtZ": {
          "type": "custom",
          "typeName": "string | number"
        },
        "preserveAlpha": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "preserveAspectRatio": {
          "type": "string"
        },
        "primitiveUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "r": {
          "type": "custom",
          "typeName": "string | number"
        },
        "radius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "renderingIntent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatCount": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatDur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredExtensions": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredFeatures": {
          "type": "custom",
          "typeName": "string | number"
        },
        "restart": {
          "type": "custom",
          "typeName": "string | number"
        },
        "result": {
          "type": "string"
        },
        "rotate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "rx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "ry": {
          "type": "custom",
          "typeName": "string | number"
        },
        "scale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "seed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "shapeRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "slope": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularExponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "speed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spreadMethod": {
          "type": "string"
        },
        "startOffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stdDeviation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemh": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemv": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stitchTiles": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stopColor": {
          "type": "string"
        },
        "stopOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughPosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "string": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stroke": {
          "type": "string"
        },
        "strokeDasharray": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeDashoffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeLinecap": {
          "type": "string-union",
          "values": [
            "inherit",
            "butt",
            "round",
            "square"
          ]
        },
        "strokeLinejoin": {
          "type": "string-union",
          "values": [
            "inherit",
            "round",
            "miter",
            "bevel"
          ]
        },
        "strokeMiterlimit": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "surfaceScale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "systemLanguage": {
          "type": "custom",
          "typeName": "string | number"
        },
        "tableValues": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textAnchor": {
          "type": "string"
        },
        "textDecoration": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "to": {
          "type": "custom",
          "typeName": "string | number"
        },
        "transform": {
          "type": "string"
        },
        "u1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "u2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeBidi": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeRange": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unitsPerEm": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vAlphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "values": {
          "type": "string"
        },
        "vectorEffect": {
          "type": "custom",
          "typeName": "string | number"
        },
        "version": {
          "type": "string"
        },
        "vertAdvY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vHanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vIdeographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "viewBox": {
          "type": "string"
        },
        "viewTarget": {
          "type": "custom",
          "typeName": "string | number"
        },
        "visibility": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vMathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "widths": {
          "type": "custom",
          "typeName": "string | number"
        },
        "wordSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "writingMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xChannelSelector": {
          "type": "string"
        },
        "xHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xlinkActuate": {
          "type": "string"
        },
        "xlinkArcrole": {
          "type": "string"
        },
        "xlinkHref": {
          "type": "string"
        },
        "xlinkRole": {
          "type": "string"
        },
        "xlinkShow": {
          "type": "string"
        },
        "xlinkTitle": {
          "type": "string"
        },
        "xlinkType": {
          "type": "string"
        },
        "xmlBase": {
          "type": "string"
        },
        "xmlLang": {
          "type": "string"
        },
        "xmlns": {
          "type": "string"
        },
        "xmlnsXlink": {
          "type": "string"
        },
        "xmlSpace": {
          "type": "string"
        },
        "y1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y": {
          "type": "custom",
          "typeName": "string | number"
        },
        "yChannelSelector": {
          "type": "string"
        },
        "z": {
          "type": "custom",
          "typeName": "string | number"
        },
        "zoomAndPan": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "LineElementSlotProps"
        },
        "slots": {
          "type": "custom",
          "typeName": "LineElementSlots"
        },
        "skipAnimation": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/x-charts/LineChart",
        "locator": {
          "type": "named",
          "name": "LinePlot"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
          "@mui/x-charts/ChartContainer#ChartContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/LineChart#AreaPlot": {
      "id": "@mui/x-charts/LineChart#AreaPlot",
      "name": "AreaPlot",
      "props": {
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "max": {
          "type": "custom",
          "typeName": "string | number"
        },
        "media": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "min": {
          "type": "custom",
          "typeName": "string | number"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "tabIndex": {
          "type": "number"
        },
        "crossOrigin": {
          "type": "string-union",
          "values": [
            "",
            "anonymous",
            "use-credentials"
          ]
        },
        "accentHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "accumulate": {
          "type": "string-union",
          "values": [
            "none",
            "sum"
          ]
        },
        "additive": {
          "type": "string-union",
          "values": [
            "sum",
            "replace"
          ]
        },
        "alignmentBaseline": {
          "type": "string-union",
          "values": [
            "middle",
            "alphabetic",
            "hanging",
            "ideographic",
            "mathematical",
            "auto",
            "baseline",
            "before-edge",
            "text-before-edge",
            "central",
            "after-edge",
            "text-after-edge",
            "inherit"
          ]
        },
        "allowReorder": {
          "type": "string-union",
          "values": [
            "no",
            "yes"
          ]
        },
        "alphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "amplitude": {
          "type": "custom",
          "typeName": "string | number"
        },
        "arabicForm": {
          "type": "string-union",
          "values": [
            "initial",
            "medial",
            "terminal",
            "isolated"
          ]
        },
        "ascent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "type": "string"
        },
        "autoReverse": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "azimuth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseFrequency": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baselineShift": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bbox": {
          "type": "custom",
          "typeName": "string | number"
        },
        "begin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bias": {
          "type": "custom",
          "typeName": "string | number"
        },
        "by": {
          "type": "custom",
          "typeName": "string | number"
        },
        "calcMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "capHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clip": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipPath": {
          "type": "string"
        },
        "clipPathUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipRule": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolationFilters": {
          "type": "string-union",
          "values": [
            "auto",
            "inherit",
            "sRGB",
            "linearRGB"
          ]
        },
        "colorProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentScriptType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentStyleType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cursor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "d": {
          "type": "string"
        },
        "decelerate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "descent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "diffuseConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "direction": {
          "type": "custom",
          "typeName": "string | number"
        },
        "display": {
          "type": "custom",
          "typeName": "string | number"
        },
        "divisor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dominantBaseline": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "edgeMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "elevation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "enableBackground": {
          "type": "custom",
          "typeName": "string | number"
        },
        "end": {
          "type": "custom",
          "typeName": "string | number"
        },
        "exponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "externalResourcesRequired": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "fill": {
          "type": "string"
        },
        "fillOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fillRule": {
          "type": "string-union",
          "values": [
            "inherit",
            "nonzero",
            "evenodd"
          ]
        },
        "filter": {
          "type": "string"
        },
        "filterRes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "filterUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "focusable": {
          "type": "custom",
          "typeName": "\"auto\" | Booleanish"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontSizeAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStretch": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStyle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontVariant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontWeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "format": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fr": {
          "type": "custom",
          "typeName": "string | number"
        },
        "from": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphName": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationHorizontal": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationVertical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphRef": {
          "type": "custom",
          "typeName": "string | number"
        },
        "gradientTransform": {
          "type": "string"
        },
        "gradientUnits": {
          "type": "string"
        },
        "hanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizAdvX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "href": {
          "type": "string"
        },
        "ideographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "imageRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in": {
          "type": "string"
        },
        "intercept": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k3": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k4": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelMatrix": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelUnitLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kerning": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyPoints": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keySplines": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyTimes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lengthAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "letterSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lightingColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "limitingConeAngle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "local": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerEnd": {
          "type": "string"
        },
        "markerHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerMid": {
          "type": "string"
        },
        "markerStart": {
          "type": "string"
        },
        "markerUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mask": {
          "type": "string"
        },
        "maskContentUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "numOctaves": {
          "type": "custom",
          "typeName": "string | number"
        },
        "offset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "opacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "operator": {
          "type": "custom",
          "typeName": "string | number"
        },
        "order": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orient": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orientation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "origin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overflow": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "paintOrder": {
          "type": "custom",
          "typeName": "string | number"
        },
        "panose1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "path": {
          "type": "string"
        },
        "pathLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternContentUnits": {
          "type": "string"
        },
        "patternTransform": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternUnits": {
          "type": "string"
        },
        "pointerEvents": {
          "type": "custom",
          "typeName": "string | number"
        },
        "points": {
          "type": "string"
        },
        "pointsAtX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtZ": {
          "type": "custom",
          "typeName": "string | number"
        },
        "preserveAlpha": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "preserveAspectRatio": {
          "type": "string"
        },
        "primitiveUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "r": {
          "type": "custom",
          "typeName": "string | number"
        },
        "radius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "renderingIntent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatCount": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatDur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredExtensions": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredFeatures": {
          "type": "custom",
          "typeName": "string | number"
        },
        "restart": {
          "type": "custom",
          "typeName": "string | number"
        },
        "result": {
          "type": "string"
        },
        "rotate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "rx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "ry": {
          "type": "custom",
          "typeName": "string | number"
        },
        "scale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "seed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "shapeRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "slope": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularExponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "speed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spreadMethod": {
          "type": "string"
        },
        "startOffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stdDeviation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemh": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemv": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stitchTiles": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stopColor": {
          "type": "string"
        },
        "stopOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughPosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "string": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stroke": {
          "type": "string"
        },
        "strokeDasharray": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeDashoffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeLinecap": {
          "type": "string-union",
          "values": [
            "inherit",
            "butt",
            "round",
            "square"
          ]
        },
        "strokeLinejoin": {
          "type": "string-union",
          "values": [
            "inherit",
            "round",
            "miter",
            "bevel"
          ]
        },
        "strokeMiterlimit": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "surfaceScale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "systemLanguage": {
          "type": "custom",
          "typeName": "string | number"
        },
        "tableValues": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textAnchor": {
          "type": "string"
        },
        "textDecoration": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "to": {
          "type": "custom",
          "typeName": "string | number"
        },
        "transform": {
          "type": "string"
        },
        "u1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "u2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeBidi": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeRange": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unitsPerEm": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vAlphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "values": {
          "type": "string"
        },
        "vectorEffect": {
          "type": "custom",
          "typeName": "string | number"
        },
        "version": {
          "type": "string"
        },
        "vertAdvY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vHanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vIdeographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "viewBox": {
          "type": "string"
        },
        "viewTarget": {
          "type": "custom",
          "typeName": "string | number"
        },
        "visibility": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vMathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "widths": {
          "type": "custom",
          "typeName": "string | number"
        },
        "wordSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "writingMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xChannelSelector": {
          "type": "string"
        },
        "xHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xlinkActuate": {
          "type": "string"
        },
        "xlinkArcrole": {
          "type": "string"
        },
        "xlinkHref": {
          "type": "string"
        },
        "xlinkRole": {
          "type": "string"
        },
        "xlinkShow": {
          "type": "string"
        },
        "xlinkTitle": {
          "type": "string"
        },
        "xlinkType": {
          "type": "string"
        },
        "xmlBase": {
          "type": "string"
        },
        "xmlLang": {
          "type": "string"
        },
        "xmlns": {
          "type": "string"
        },
        "xmlnsXlink": {
          "type": "string"
        },
        "xmlSpace": {
          "type": "string"
        },
        "y1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y": {
          "type": "custom",
          "typeName": "string | number"
        },
        "yChannelSelector": {
          "type": "string"
        },
        "z": {
          "type": "custom",
          "typeName": "string | number"
        },
        "zoomAndPan": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "AreaElementSlotProps"
        },
        "slots": {
          "type": "custom",
          "typeName": "AreaElementSlots"
        },
        "skipAnimation": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/x-charts/LineChart",
        "locator": {
          "type": "named",
          "name": "AreaPlot"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ChartContainer#ChartContainer"
        ],
        "exclusiveParent": "@mui/x-charts/ChartContainer#ChartContainer"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/LineChart#MarkPlot": {
      "id": "@mui/x-charts/LineChart#MarkPlot",
      "name": "MarkPlot",
      "props": {
        "slots": {
          "type": "custom",
          "typeName": "MarkPlotSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "MarkPlotSlotProps"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "max": {
          "type": "custom",
          "typeName": "string | number"
        },
        "media": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "min": {
          "type": "custom",
          "typeName": "string | number"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "tabIndex": {
          "type": "number"
        },
        "crossOrigin": {
          "type": "string-union",
          "values": [
            "",
            "anonymous",
            "use-credentials"
          ]
        },
        "accentHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "accumulate": {
          "type": "string-union",
          "values": [
            "none",
            "sum"
          ]
        },
        "additive": {
          "type": "string-union",
          "values": [
            "sum",
            "replace"
          ]
        },
        "alignmentBaseline": {
          "type": "string-union",
          "values": [
            "middle",
            "alphabetic",
            "hanging",
            "ideographic",
            "mathematical",
            "auto",
            "baseline",
            "before-edge",
            "text-before-edge",
            "central",
            "after-edge",
            "text-after-edge",
            "inherit"
          ]
        },
        "allowReorder": {
          "type": "string-union",
          "values": [
            "no",
            "yes"
          ]
        },
        "alphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "amplitude": {
          "type": "custom",
          "typeName": "string | number"
        },
        "arabicForm": {
          "type": "string-union",
          "values": [
            "initial",
            "medial",
            "terminal",
            "isolated"
          ]
        },
        "ascent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "type": "string"
        },
        "autoReverse": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "azimuth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseFrequency": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baselineShift": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bbox": {
          "type": "custom",
          "typeName": "string | number"
        },
        "begin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bias": {
          "type": "custom",
          "typeName": "string | number"
        },
        "by": {
          "type": "custom",
          "typeName": "string | number"
        },
        "calcMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "capHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clip": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipPath": {
          "type": "string"
        },
        "clipPathUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipRule": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolationFilters": {
          "type": "string-union",
          "values": [
            "auto",
            "inherit",
            "sRGB",
            "linearRGB"
          ]
        },
        "colorProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentScriptType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentStyleType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cursor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "d": {
          "type": "string"
        },
        "decelerate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "descent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "diffuseConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "direction": {
          "type": "custom",
          "typeName": "string | number"
        },
        "display": {
          "type": "custom",
          "typeName": "string | number"
        },
        "divisor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dominantBaseline": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "edgeMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "elevation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "enableBackground": {
          "type": "custom",
          "typeName": "string | number"
        },
        "end": {
          "type": "custom",
          "typeName": "string | number"
        },
        "exponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "externalResourcesRequired": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "fill": {
          "type": "string"
        },
        "fillOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fillRule": {
          "type": "string-union",
          "values": [
            "inherit",
            "nonzero",
            "evenodd"
          ]
        },
        "filter": {
          "type": "string"
        },
        "filterRes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "filterUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "focusable": {
          "type": "custom",
          "typeName": "\"auto\" | Booleanish"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontSizeAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStretch": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStyle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontVariant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontWeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "format": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fr": {
          "type": "custom",
          "typeName": "string | number"
        },
        "from": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphName": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationHorizontal": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationVertical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphRef": {
          "type": "custom",
          "typeName": "string | number"
        },
        "gradientTransform": {
          "type": "string"
        },
        "gradientUnits": {
          "type": "string"
        },
        "hanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizAdvX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "href": {
          "type": "string"
        },
        "ideographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "imageRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in": {
          "type": "string"
        },
        "intercept": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k3": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k4": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelMatrix": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelUnitLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kerning": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyPoints": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keySplines": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyTimes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lengthAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "letterSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lightingColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "limitingConeAngle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "local": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerEnd": {
          "type": "string"
        },
        "markerHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerMid": {
          "type": "string"
        },
        "markerStart": {
          "type": "string"
        },
        "markerUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mask": {
          "type": "string"
        },
        "maskContentUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "numOctaves": {
          "type": "custom",
          "typeName": "string | number"
        },
        "offset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "opacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "operator": {
          "type": "custom",
          "typeName": "string | number"
        },
        "order": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orient": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orientation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "origin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overflow": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "paintOrder": {
          "type": "custom",
          "typeName": "string | number"
        },
        "panose1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "path": {
          "type": "string"
        },
        "pathLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternContentUnits": {
          "type": "string"
        },
        "patternTransform": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternUnits": {
          "type": "string"
        },
        "pointerEvents": {
          "type": "custom",
          "typeName": "string | number"
        },
        "points": {
          "type": "string"
        },
        "pointsAtX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtZ": {
          "type": "custom",
          "typeName": "string | number"
        },
        "preserveAlpha": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "preserveAspectRatio": {
          "type": "string"
        },
        "primitiveUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "r": {
          "type": "custom",
          "typeName": "string | number"
        },
        "radius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "renderingIntent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatCount": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatDur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredExtensions": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredFeatures": {
          "type": "custom",
          "typeName": "string | number"
        },
        "restart": {
          "type": "custom",
          "typeName": "string | number"
        },
        "result": {
          "type": "string"
        },
        "rotate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "rx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "ry": {
          "type": "custom",
          "typeName": "string | number"
        },
        "scale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "seed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "shapeRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "slope": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularExponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "speed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spreadMethod": {
          "type": "string"
        },
        "startOffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stdDeviation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemh": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemv": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stitchTiles": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stopColor": {
          "type": "string"
        },
        "stopOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughPosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "string": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stroke": {
          "type": "string"
        },
        "strokeDasharray": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeDashoffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeLinecap": {
          "type": "string-union",
          "values": [
            "inherit",
            "butt",
            "round",
            "square"
          ]
        },
        "strokeLinejoin": {
          "type": "string-union",
          "values": [
            "inherit",
            "round",
            "miter",
            "bevel"
          ]
        },
        "strokeMiterlimit": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "surfaceScale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "systemLanguage": {
          "type": "custom",
          "typeName": "string | number"
        },
        "tableValues": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textAnchor": {
          "type": "string"
        },
        "textDecoration": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "to": {
          "type": "custom",
          "typeName": "string | number"
        },
        "transform": {
          "type": "string"
        },
        "u1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "u2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeBidi": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeRange": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unitsPerEm": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vAlphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "values": {
          "type": "string"
        },
        "vectorEffect": {
          "type": "custom",
          "typeName": "string | number"
        },
        "version": {
          "type": "string"
        },
        "vertAdvY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vHanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vIdeographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "viewBox": {
          "type": "string"
        },
        "viewTarget": {
          "type": "custom",
          "typeName": "string | number"
        },
        "visibility": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vMathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "widths": {
          "type": "custom",
          "typeName": "string | number"
        },
        "wordSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "writingMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xChannelSelector": {
          "type": "string"
        },
        "xHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xlinkActuate": {
          "type": "string"
        },
        "xlinkArcrole": {
          "type": "string"
        },
        "xlinkHref": {
          "type": "string"
        },
        "xlinkRole": {
          "type": "string"
        },
        "xlinkShow": {
          "type": "string"
        },
        "xlinkTitle": {
          "type": "string"
        },
        "xlinkType": {
          "type": "string"
        },
        "xmlBase": {
          "type": "string"
        },
        "xmlLang": {
          "type": "string"
        },
        "xmlns": {
          "type": "string"
        },
        "xmlnsXlink": {
          "type": "string"
        },
        "xmlSpace": {
          "type": "string"
        },
        "y1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y": {
          "type": "custom",
          "typeName": "string | number"
        },
        "yChannelSelector": {
          "type": "string"
        },
        "z": {
          "type": "custom",
          "typeName": "string | number"
        },
        "zoomAndPan": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "skipAnimation": {
          "type": "boolean"
        }
      },
      "export": {
        "path": "@mui/x-charts/LineChart",
        "locator": {
          "type": "named",
          "name": "MarkPlot"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
          "@mui/x-charts/ChartContainer#ChartContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/LineChart#LineHighlightPlot": {
      "id": "@mui/x-charts/LineChart#LineHighlightPlot",
      "name": "LineHighlightPlot",
      "props": {
        "slots": {
          "type": "custom",
          "typeName": "LineHighlightPlotSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "LineHighlightPlotSlotProps"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "max": {
          "type": "custom",
          "typeName": "string | number"
        },
        "media": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "min": {
          "type": "custom",
          "typeName": "string | number"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "tabIndex": {
          "type": "number"
        },
        "crossOrigin": {
          "type": "string-union",
          "values": [
            "",
            "anonymous",
            "use-credentials"
          ]
        },
        "accentHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "accumulate": {
          "type": "string-union",
          "values": [
            "none",
            "sum"
          ]
        },
        "additive": {
          "type": "string-union",
          "values": [
            "sum",
            "replace"
          ]
        },
        "alignmentBaseline": {
          "type": "string-union",
          "values": [
            "middle",
            "alphabetic",
            "hanging",
            "ideographic",
            "mathematical",
            "auto",
            "baseline",
            "before-edge",
            "text-before-edge",
            "central",
            "after-edge",
            "text-after-edge",
            "inherit"
          ]
        },
        "allowReorder": {
          "type": "string-union",
          "values": [
            "no",
            "yes"
          ]
        },
        "alphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "amplitude": {
          "type": "custom",
          "typeName": "string | number"
        },
        "arabicForm": {
          "type": "string-union",
          "values": [
            "initial",
            "medial",
            "terminal",
            "isolated"
          ]
        },
        "ascent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "type": "string"
        },
        "autoReverse": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "azimuth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseFrequency": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baselineShift": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bbox": {
          "type": "custom",
          "typeName": "string | number"
        },
        "begin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bias": {
          "type": "custom",
          "typeName": "string | number"
        },
        "by": {
          "type": "custom",
          "typeName": "string | number"
        },
        "calcMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "capHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clip": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipPath": {
          "type": "string"
        },
        "clipPathUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipRule": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolationFilters": {
          "type": "string-union",
          "values": [
            "auto",
            "inherit",
            "sRGB",
            "linearRGB"
          ]
        },
        "colorProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentScriptType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentStyleType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cursor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "d": {
          "type": "string"
        },
        "decelerate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "descent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "diffuseConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "direction": {
          "type": "custom",
          "typeName": "string | number"
        },
        "display": {
          "type": "custom",
          "typeName": "string | number"
        },
        "divisor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dominantBaseline": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "edgeMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "elevation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "enableBackground": {
          "type": "custom",
          "typeName": "string | number"
        },
        "end": {
          "type": "custom",
          "typeName": "string | number"
        },
        "exponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "externalResourcesRequired": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "fill": {
          "type": "string"
        },
        "fillOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fillRule": {
          "type": "string-union",
          "values": [
            "inherit",
            "nonzero",
            "evenodd"
          ]
        },
        "filter": {
          "type": "string"
        },
        "filterRes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "filterUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "focusable": {
          "type": "custom",
          "typeName": "\"auto\" | Booleanish"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontSizeAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStretch": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStyle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontVariant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontWeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "format": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fr": {
          "type": "custom",
          "typeName": "string | number"
        },
        "from": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphName": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationHorizontal": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationVertical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphRef": {
          "type": "custom",
          "typeName": "string | number"
        },
        "gradientTransform": {
          "type": "string"
        },
        "gradientUnits": {
          "type": "string"
        },
        "hanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizAdvX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "href": {
          "type": "string"
        },
        "ideographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "imageRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in": {
          "type": "string"
        },
        "intercept": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k3": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k4": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelMatrix": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelUnitLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kerning": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyPoints": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keySplines": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyTimes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lengthAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "letterSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lightingColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "limitingConeAngle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "local": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerEnd": {
          "type": "string"
        },
        "markerHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerMid": {
          "type": "string"
        },
        "markerStart": {
          "type": "string"
        },
        "markerUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mask": {
          "type": "string"
        },
        "maskContentUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "numOctaves": {
          "type": "custom",
          "typeName": "string | number"
        },
        "offset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "opacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "operator": {
          "type": "custom",
          "typeName": "string | number"
        },
        "order": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orient": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orientation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "origin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overflow": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "paintOrder": {
          "type": "custom",
          "typeName": "string | number"
        },
        "panose1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "path": {
          "type": "string"
        },
        "pathLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternContentUnits": {
          "type": "string"
        },
        "patternTransform": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternUnits": {
          "type": "string"
        },
        "pointerEvents": {
          "type": "custom",
          "typeName": "string | number"
        },
        "points": {
          "type": "string"
        },
        "pointsAtX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtZ": {
          "type": "custom",
          "typeName": "string | number"
        },
        "preserveAlpha": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "preserveAspectRatio": {
          "type": "string"
        },
        "primitiveUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "r": {
          "type": "custom",
          "typeName": "string | number"
        },
        "radius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "renderingIntent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatCount": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatDur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredExtensions": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredFeatures": {
          "type": "custom",
          "typeName": "string | number"
        },
        "restart": {
          "type": "custom",
          "typeName": "string | number"
        },
        "result": {
          "type": "string"
        },
        "rotate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "rx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "ry": {
          "type": "custom",
          "typeName": "string | number"
        },
        "scale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "seed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "shapeRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "slope": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularExponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "speed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spreadMethod": {
          "type": "string"
        },
        "startOffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stdDeviation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemh": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemv": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stitchTiles": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stopColor": {
          "type": "string"
        },
        "stopOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughPosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "string": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stroke": {
          "type": "string"
        },
        "strokeDasharray": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeDashoffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeLinecap": {
          "type": "string-union",
          "values": [
            "inherit",
            "butt",
            "round",
            "square"
          ]
        },
        "strokeLinejoin": {
          "type": "string-union",
          "values": [
            "inherit",
            "round",
            "miter",
            "bevel"
          ]
        },
        "strokeMiterlimit": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "surfaceScale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "systemLanguage": {
          "type": "custom",
          "typeName": "string | number"
        },
        "tableValues": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textAnchor": {
          "type": "string"
        },
        "textDecoration": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "to": {
          "type": "custom",
          "typeName": "string | number"
        },
        "transform": {
          "type": "string"
        },
        "u1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "u2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeBidi": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeRange": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unitsPerEm": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vAlphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "values": {
          "type": "string"
        },
        "vectorEffect": {
          "type": "custom",
          "typeName": "string | number"
        },
        "version": {
          "type": "string"
        },
        "vertAdvY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vHanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vIdeographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "viewBox": {
          "type": "string"
        },
        "viewTarget": {
          "type": "custom",
          "typeName": "string | number"
        },
        "visibility": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vMathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "widths": {
          "type": "custom",
          "typeName": "string | number"
        },
        "wordSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "writingMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xChannelSelector": {
          "type": "string"
        },
        "xHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xlinkActuate": {
          "type": "string"
        },
        "xlinkArcrole": {
          "type": "string"
        },
        "xlinkHref": {
          "type": "string"
        },
        "xlinkRole": {
          "type": "string"
        },
        "xlinkShow": {
          "type": "string"
        },
        "xlinkTitle": {
          "type": "string"
        },
        "xlinkType": {
          "type": "string"
        },
        "xmlBase": {
          "type": "string"
        },
        "xmlLang": {
          "type": "string"
        },
        "xmlns": {
          "type": "string"
        },
        "xmlnsXlink": {
          "type": "string"
        },
        "xmlSpace": {
          "type": "string"
        },
        "y1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y": {
          "type": "custom",
          "typeName": "string | number"
        },
        "yChannelSelector": {
          "type": "string"
        },
        "z": {
          "type": "custom",
          "typeName": "string | number"
        },
        "zoomAndPan": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/x-charts/LineChart",
        "locator": {
          "type": "named",
          "name": "LineHighlightPlot"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
        ],
        "exclusiveParent": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/LineChart#AnimatedLine": {
      "id": "@mui/x-charts/LineChart#AnimatedLine",
      "name": "AnimatedLine",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "ownerState": {
          "type": "custom",
          "typeName": "LineElementOwnerState"
        },
        "d": {
          "type": "string"
        },
        "skipAnimation": {
          "type": "boolean"
        },
        "string": {
          "type": "custom",
          "typeName": "string | number"
        },
        "id": {
          "type": "string"
        },
        "min": {
          "type": "custom",
          "typeName": "string | number"
        },
        "max": {
          "type": "custom",
          "typeName": "string | number"
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "clipPath": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "mask": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "spacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y": {
          "type": "custom",
          "typeName": "string | number"
        },
        "end": {
          "type": "custom",
          "typeName": "string | number"
        },
        "width": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dominantBaseline": {
          "type": "custom",
          "typeName": "string | number"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "className": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "height": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lang": {
          "type": "string"
        },
        "media": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | (string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"gridcell\" | \"group\" | \"heading\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "tabIndex": {
          "type": "number"
        },
        "crossOrigin": {
          "type": "string-union",
          "values": [
            "",
            "anonymous",
            "use-credentials"
          ]
        },
        "accentHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "accumulate": {
          "type": "string-union",
          "values": [
            "none",
            "sum"
          ]
        },
        "additive": {
          "type": "string-union",
          "values": [
            "sum",
            "replace"
          ]
        },
        "alignmentBaseline": {
          "type": "string-union",
          "values": [
            "middle",
            "alphabetic",
            "hanging",
            "ideographic",
            "mathematical",
            "auto",
            "baseline",
            "before-edge",
            "text-before-edge",
            "central",
            "after-edge",
            "text-after-edge",
            "inherit"
          ]
        },
        "allowReorder": {
          "type": "string-union",
          "values": [
            "no",
            "yes"
          ]
        },
        "alphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "amplitude": {
          "type": "custom",
          "typeName": "string | number"
        },
        "arabicForm": {
          "type": "string-union",
          "values": [
            "initial",
            "medial",
            "terminal",
            "isolated"
          ]
        },
        "ascent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "attributeName": {
          "type": "string"
        },
        "attributeType": {
          "type": "string"
        },
        "autoReverse": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "azimuth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseFrequency": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baselineShift": {
          "type": "custom",
          "typeName": "string | number"
        },
        "baseProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bbox": {
          "type": "custom",
          "typeName": "string | number"
        },
        "begin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "bias": {
          "type": "custom",
          "typeName": "string | number"
        },
        "by": {
          "type": "custom",
          "typeName": "string | number"
        },
        "calcMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "capHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clip": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipPathUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "clipRule": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorInterpolationFilters": {
          "type": "string-union",
          "values": [
            "auto",
            "inherit",
            "sRGB",
            "linearRGB"
          ]
        },
        "colorProfile": {
          "type": "custom",
          "typeName": "string | number"
        },
        "colorRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentScriptType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "contentStyleType": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cursor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "decelerate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "descent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "diffuseConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "direction": {
          "type": "custom",
          "typeName": "string | number"
        },
        "display": {
          "type": "custom",
          "typeName": "string | number"
        },
        "divisor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "dy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "edgeMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "elevation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "enableBackground": {
          "type": "custom",
          "typeName": "string | number"
        },
        "exponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "externalResourcesRequired": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "fill": {
          "type": "string"
        },
        "fillOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fillRule": {
          "type": "string-union",
          "values": [
            "inherit",
            "nonzero",
            "evenodd"
          ]
        },
        "filterRes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "filterUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "floodOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "focusable": {
          "type": "custom",
          "typeName": "\"auto\" | Booleanish"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontSizeAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStretch": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontStyle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontVariant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fontWeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "format": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fr": {
          "type": "custom",
          "typeName": "string | number"
        },
        "from": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "fy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "g2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphName": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationHorizontal": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphOrientationVertical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "glyphRef": {
          "type": "custom",
          "typeName": "string | number"
        },
        "gradientTransform": {
          "type": "string"
        },
        "gradientUnits": {
          "type": "string"
        },
        "hanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizAdvX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "horizOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "href": {
          "type": "string"
        },
        "ideographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "imageRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "in": {
          "type": "string"
        },
        "intercept": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k3": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k4": {
          "type": "custom",
          "typeName": "string | number"
        },
        "k": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelMatrix": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kernelUnitLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "kerning": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyPoints": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keySplines": {
          "type": "custom",
          "typeName": "string | number"
        },
        "keyTimes": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lengthAdjust": {
          "type": "custom",
          "typeName": "string | number"
        },
        "letterSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "lightingColor": {
          "type": "custom",
          "typeName": "string | number"
        },
        "limitingConeAngle": {
          "type": "custom",
          "typeName": "string | number"
        },
        "local": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerEnd": {
          "type": "string"
        },
        "markerHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerMid": {
          "type": "string"
        },
        "markerStart": {
          "type": "string"
        },
        "markerUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "markerWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskContentUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "maskUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "mode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "numOctaves": {
          "type": "custom",
          "typeName": "string | number"
        },
        "offset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "opacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "operator": {
          "type": "custom",
          "typeName": "string | number"
        },
        "order": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orient": {
          "type": "custom",
          "typeName": "string | number"
        },
        "orientation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "origin": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overflow": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "overlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "paintOrder": {
          "type": "custom",
          "typeName": "string | number"
        },
        "panose1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pathLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternContentUnits": {
          "type": "string"
        },
        "patternTransform": {
          "type": "custom",
          "typeName": "string | number"
        },
        "patternUnits": {
          "type": "string"
        },
        "pointerEvents": {
          "type": "custom",
          "typeName": "string | number"
        },
        "points": {
          "type": "string"
        },
        "pointsAtX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "pointsAtZ": {
          "type": "custom",
          "typeName": "string | number"
        },
        "preserveAlpha": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "preserveAspectRatio": {
          "type": "string"
        },
        "primitiveUnits": {
          "type": "custom",
          "typeName": "string | number"
        },
        "r": {
          "type": "custom",
          "typeName": "string | number"
        },
        "radius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "refY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "renderingIntent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatCount": {
          "type": "custom",
          "typeName": "string | number"
        },
        "repeatDur": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredExtensions": {
          "type": "custom",
          "typeName": "string | number"
        },
        "requiredFeatures": {
          "type": "custom",
          "typeName": "string | number"
        },
        "restart": {
          "type": "custom",
          "typeName": "string | number"
        },
        "result": {
          "type": "string"
        },
        "rotate": {
          "type": "custom",
          "typeName": "string | number"
        },
        "rx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "ry": {
          "type": "custom",
          "typeName": "string | number"
        },
        "scale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "seed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "shapeRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "slope": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularConstant": {
          "type": "custom",
          "typeName": "string | number"
        },
        "specularExponent": {
          "type": "custom",
          "typeName": "string | number"
        },
        "speed": {
          "type": "custom",
          "typeName": "string | number"
        },
        "spreadMethod": {
          "type": "string"
        },
        "startOffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stdDeviation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemh": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stemv": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stitchTiles": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stopColor": {
          "type": "string"
        },
        "stopOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughPosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strikethroughThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "stroke": {
          "type": "string"
        },
        "strokeDasharray": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeDashoffset": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeLinecap": {
          "type": "string-union",
          "values": [
            "inherit",
            "butt",
            "round",
            "square"
          ]
        },
        "strokeLinejoin": {
          "type": "string-union",
          "values": [
            "inherit",
            "round",
            "miter",
            "bevel"
          ]
        },
        "strokeMiterlimit": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeOpacity": {
          "type": "custom",
          "typeName": "string | number"
        },
        "strokeWidth": {
          "type": "custom",
          "typeName": "string | number"
        },
        "surfaceScale": {
          "type": "custom",
          "typeName": "string | number"
        },
        "systemLanguage": {
          "type": "custom",
          "typeName": "string | number"
        },
        "tableValues": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "targetY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textAnchor": {
          "type": "string"
        },
        "textDecoration": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textLength": {
          "type": "custom",
          "typeName": "string | number"
        },
        "textRendering": {
          "type": "custom",
          "typeName": "string | number"
        },
        "to": {
          "type": "custom",
          "typeName": "string | number"
        },
        "transform": {
          "type": "string"
        },
        "u1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "u2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlinePosition": {
          "type": "custom",
          "typeName": "string | number"
        },
        "underlineThickness": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeBidi": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unicodeRange": {
          "type": "custom",
          "typeName": "string | number"
        },
        "unitsPerEm": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vAlphabetic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "values": {
          "type": "string"
        },
        "vectorEffect": {
          "type": "custom",
          "typeName": "string | number"
        },
        "version": {
          "type": "string"
        },
        "vertAdvY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginX": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vertOriginY": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vHanging": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vIdeographic": {
          "type": "custom",
          "typeName": "string | number"
        },
        "viewBox": {
          "type": "string"
        },
        "viewTarget": {
          "type": "custom",
          "typeName": "string | number"
        },
        "visibility": {
          "type": "custom",
          "typeName": "string | number"
        },
        "vMathematical": {
          "type": "custom",
          "typeName": "string | number"
        },
        "widths": {
          "type": "custom",
          "typeName": "string | number"
        },
        "wordSpacing": {
          "type": "custom",
          "typeName": "string | number"
        },
        "writingMode": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "x2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xChannelSelector": {
          "type": "string"
        },
        "xHeight": {
          "type": "custom",
          "typeName": "string | number"
        },
        "xlinkActuate": {
          "type": "string"
        },
        "xlinkArcrole": {
          "type": "string"
        },
        "xlinkHref": {
          "type": "string"
        },
        "xlinkRole": {
          "type": "string"
        },
        "xlinkShow": {
          "type": "string"
        },
        "xlinkTitle": {
          "type": "string"
        },
        "xlinkType": {
          "type": "string"
        },
        "xmlBase": {
          "type": "string"
        },
        "xmlLang": {
          "type": "string"
        },
        "xmlns": {
          "type": "string"
        },
        "xmlnsXlink": {
          "type": "string"
        },
        "xmlSpace": {
          "type": "string"
        },
        "y1": {
          "type": "custom",
          "typeName": "string | number"
        },
        "y2": {
          "type": "custom",
          "typeName": "string | number"
        },
        "yChannelSelector": {
          "type": "string"
        },
        "z": {
          "type": "custom",
          "typeName": "string | number"
        },
        "zoomAndPan": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/LineChart",
        "locator": {
          "type": "named",
          "name": "AnimatedLine"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ScatterChart#ScatterChart": {
      "id": "@mui/x-charts/ScatterChart#ScatterChart",
      "name": "ScatterChart",
      "props": {
        "xAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\">[]"
        },
        "series": {
          "type": "custom",
          "typeName": "MakeOptional<ScatterSeriesType, \"type\">[]"
        },
        "height": {
          "type": "number"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "leftAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "bottomAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "topAxis": {
          "type": "custom",
          "typeName": "string | ChartsXAxisProps"
        },
        "rightAxis": {
          "type": "custom",
          "typeName": "string | ChartsYAxisProps"
        },
        "width": {
          "type": "number"
        },
        "yAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\">[]"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "grid": {
          "type": "custom",
          "typeName": "{ vertical?: boolean; horizontal?: boolean; }"
        },
        "zAxis": {
          "type": "custom",
          "typeName": "MakeOptional<ZAxisConfig<any>, \"id\">[]"
        },
        "disableVoronoi": {
          "type": "boolean"
        },
        "voronoiMaxRadius": {
          "type": "number"
        },
        "dataset": {
          "type": "custom",
          "typeName": "DatasetElementType<string | number | Date>[]"
        },
        "colors": {
          "type": "custom",
          "typeName": "string[] | ChartsColorPaletteCallback"
        },
        "tooltip": {
          "type": "custom",
          "typeName": "ChartsTooltipProps<\"scatter\">"
        },
        "axisHighlight": {
          "type": "custom",
          "typeName": "{ x?: AxisHighlight; y?: AxisHighlight; }"
        },
        "legend": {
          "type": "custom",
          "typeName": "ChartsLegendProps"
        },
        "slots": {
          "type": "custom",
          "typeName": "ScatterChartSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "ScatterChartSlotProps"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "highlightedItem": {
          "type": "custom",
          "typeName": "{ seriesId?: SeriesId; dataIndex?: number; }"
        },
        "loading": {
          "type": "boolean"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/ScatterChart",
        "locator": {
          "type": "named",
          "name": "ScatterChart"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/SparkLineChart#SparkLineChart": {
      "id": "@mui/x-charts/SparkLineChart#SparkLineChart",
      "name": "SparkLineChart",
      "props": {
        "data": {
          "type": "custom",
          "typeName": "number[]"
        },
        "height": {
          "type": "number"
        },
        "area": {
          "type": "boolean"
        },
        "curve": {
          "type": "string-union",
          "values": [
            "step",
            "linear",
            "catmullRom",
            "monotoneX",
            "monotoneY",
            "natural",
            "stepBefore",
            "stepAfter"
          ]
        },
        "plotType": {
          "type": "string-union",
          "values": [
            "line",
            "bar"
          ]
        },
        "showHighlight": {
          "type": "boolean"
        },
        "showTooltip": {
          "type": "boolean"
        },
        "xAxis": {
          "type": "custom",
          "typeName": "Omit<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\"> & Partial<Pick<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\">>"
        },
        "colors": {
          "type": "custom",
          "typeName": "string[] | ChartsColorPaletteCallback"
        },
        "yAxis": {
          "type": "custom",
          "typeName": "Omit<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\"> & Partial<Pick<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\">>"
        },
        "width": {
          "type": "number"
        },
        "tooltip": {
          "type": "custom",
          "typeName": "ChartsTooltipProps<\"line\" | \"bar\">"
        },
        "axisHighlight": {
          "type": "custom",
          "typeName": "{ x?: AxisHighlight; y?: AxisHighlight; }"
        },
        "valueFormatter": {
          "type": "custom",
          "typeName": "(value: number) => string"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "slots": {
          "type": "custom",
          "typeName": "SparkLineChartSlots"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "SparkLineChartSlotProps"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "dataset": {
          "type": "custom",
          "typeName": "DatasetElementType<string | number | Date>[]"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "highlightedItem": {
          "type": "custom",
          "typeName": "{ seriesId?: SeriesId; dataIndex?: number; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/SparkLineChart",
        "locator": {
          "type": "named",
          "name": "SparkLineChart"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/Gauge#Gauge": {
      "id": "@mui/x-charts/Gauge#Gauge",
      "name": "Gauge",
      "props": {
        "cornerRadius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        },
        "value": {
          "type": "number"
        },
        "startAngle": {
          "type": "number"
        },
        "endAngle": {
          "type": "number"
        },
        "valueMin": {
          "type": "number"
        },
        "valueMax": {
          "type": "number"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; valueArc?: string; referenceArc?: string; valueText?: string; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "innerRadius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "outerRadius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "text": {
          "type": "custom",
          "typeName": "string | ((params: GaugeFormatterParams) => string)"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/Gauge",
        "locator": {
          "type": "named",
          "name": "Gauge"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material/Stack#Stack"
        ],
        "exclusiveParent": "@mui/material/Stack#Stack"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/Gauge#GaugeContainer": {
      "id": "@mui/x-charts/Gauge#GaugeContainer",
      "name": "GaugeContainer",
      "props": {
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        },
        "startAngle": {
          "type": "number"
        },
        "endAngle": {
          "type": "number"
        },
        "value": {
          "type": "number"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "cx": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cy": {
          "type": "custom",
          "typeName": "string | number"
        },
        "innerRadius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "outerRadius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "cornerRadius": {
          "type": "custom",
          "typeName": "string | number"
        },
        "valueMin": {
          "type": "number"
        },
        "valueMax": {
          "type": "number"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/Gauge",
        "locator": {
          "type": "named",
          "name": "GaugeContainer"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "exclusiveChildren": [
          "@mui/x-charts/Gauge#GaugeReferenceArc",
          "@mui/x-charts/Gauge#GaugeValueArc"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ChartContainer#ChartContainer": {
      "id": "@mui/x-charts/ChartContainer#ChartContainer",
      "name": "ChartContainer",
      "props": {
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        },
        "series": {
          "type": "custom",
          "typeName": "AllSeriesType<T>[]"
        },
        "xAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\">[]"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "plugins": {
          "type": "custom",
          "typeName": "({ seriesType: \"line\"; seriesFormatter: SeriesFormatter<\"line\">; colorProcessor: ColorProcessor<\"line\">; xExtremumGetter?: ExtremumGetter<\"line\">; yExtremumGetter?: ExtremumGetter<\"line\">; } | { seriesType: \"bar\"; seriesFormatter: SeriesFormatter<\"bar\">; colorProcessor: ColorProcessor<\"bar\">; xExtremumGetter?: ExtremumGetter<\"bar\">; yExtremumGetter?: ExtremumGetter<\"bar\">; } | { seriesType: \"scatter\"; seriesFormatter: SeriesFormatter<\"scatter\">; colorProcessor: ColorProcessor<\"scatter\">; xExtremumGetter?: ExtremumGetter<\"scatter\">; yExtremumGetter?: ExtremumGetter<\"scatter\">; } | { seriesType: \"pie\"; seriesFormatter: SeriesFormatter<\"pie\">; colorProcessor: ColorProcessor<\"pie\">; xExtremumGetter?: ExtremumGetter<\"pie\">; yExtremumGetter?: ExtremumGetter<\"pie\">; })[]"
        },
        "zAxis": {
          "type": "custom",
          "typeName": "MakeOptional<ZAxisConfig<any>, \"id\">[]"
        },
        "dataset": {
          "type": "custom",
          "typeName": "DatasetElementType<string | number | Date>[]"
        },
        "colors": {
          "type": "custom",
          "typeName": "string[] | ChartsColorPaletteCallback"
        },
        "highlightedItem": {
          "type": "custom",
          "typeName": "{ seriesId?: SeriesId; dataIndex?: number; }"
        },
        "yAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\">[]"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/ChartContainer",
        "locator": {
          "type": "named",
          "name": "ChartContainer"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "exclusiveChildren": [
          "@mui/x-charts/LineChart#AreaPlot"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer": {
      "id": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
      "name": "ResponsiveChartContainer",
      "props": {
        "xAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsXAxisProps>, \"id\">[]"
        },
        "yAxis": {
          "type": "custom",
          "typeName": "MakeOptional<AxisConfig<keyof AxisScaleConfig, any, ChartsYAxisProps>, \"id\">[]"
        },
        "series": {
          "type": "custom",
          "typeName": "AllSeriesType<T>[]"
        },
        "height": {
          "type": "number"
        },
        "margin": {
          "type": "custom",
          "typeName": "{ top?: number; bottom?: number; left?: number; right?: number; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "width": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "viewBox": {
          "type": "custom",
          "typeName": "{ x?: number; y?: number; width?: number; height?: number; }"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "plugins": {
          "type": "custom",
          "typeName": "({ seriesType: \"line\"; seriesFormatter: SeriesFormatter<\"line\">; colorProcessor: ColorProcessor<\"line\">; xExtremumGetter?: ExtremumGetter<\"line\">; yExtremumGetter?: ExtremumGetter<\"line\">; } | { seriesType: \"bar\"; seriesFormatter: SeriesFormatter<\"bar\">; colorProcessor: ColorProcessor<\"bar\">; xExtremumGetter?: ExtremumGetter<\"bar\">; yExtremumGetter?: ExtremumGetter<\"bar\">; } | { seriesType: \"scatter\"; seriesFormatter: SeriesFormatter<\"scatter\">; colorProcessor: ColorProcessor<\"scatter\">; xExtremumGetter?: ExtremumGetter<\"scatter\">; yExtremumGetter?: ExtremumGetter<\"scatter\">; } | { seriesType: \"pie\"; seriesFormatter: SeriesFormatter<\"pie\">; colorProcessor: ColorProcessor<\"pie\">; xExtremumGetter?: ExtremumGetter<\"pie\">; yExtremumGetter?: ExtremumGetter<\"pie\">; })[]"
        },
        "zAxis": {
          "type": "custom",
          "typeName": "MakeOptional<ZAxisConfig<any>, \"id\">[]"
        },
        "dataset": {
          "type": "custom",
          "typeName": "DatasetElementType<string | number | Date>[]"
        },
        "colors": {
          "type": "custom",
          "typeName": "string[] | ChartsColorPaletteCallback"
        },
        "disableAxisListener": {
          "type": "boolean"
        },
        "highlightedItem": {
          "type": "custom",
          "typeName": "{ seriesId?: SeriesId; dataIndex?: number; }"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-charts/ResponsiveChartContainer",
        "locator": {
          "type": "named",
          "name": "ResponsiveChartContainer"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box",
        "exclusiveChildren": [
          "@mui/x-charts/ChartsGrid#ChartsGrid",
          "@mui/x-charts/ScatterChart#ScatterPlot",
          "@mui/x-charts/ChartsClipPath#ChartsClipPath",
          "@mui/x-charts/ChartsAxisHighlight#ChartsAxisHighlight",
          "@mui/x-charts/LineChart#LineHighlightPlot",
          "@mui/x-charts/ChartsTooltip#ChartsTooltip"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-tree-view/SimpleTreeView#SimpleTreeView": {
      "id": "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
      "name": "SimpleTreeView",
      "props": {
        "defaultExpandedItems": {
          "type": "custom",
          "typeName": "string[]"
        },
        "slots": {
          "type": "custom",
          "typeName": "SimpleTreeViewSlots"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "expandedItems": {
          "type": "custom",
          "typeName": "string[]"
        },
        "expansionTrigger": {
          "type": "string-union",
          "values": [
            "content",
            "iconContainer"
          ]
        },
        "apiRef": {
          "type": "custom",
          "typeName": "MutableRefObject<TreeViewPublicAPI<readonly [UseTreeViewItemsSignature, UseTreeViewExpansionSignature, UseTreeViewSelectionSignature, UseTreeViewFocusSignature, UseTreeViewKeyboardNavigationSignature, UseTreeViewIconsSignature, UseTreeViewJSXItemsSignature]>>"
        },
        "disabledItemsFocusable": {
          "type": "boolean"
        },
        "multiSelect": {
          "type": "custom",
          "typeName": "Multiple"
        },
        "defaultSelectedItems": {
          "type": "custom",
          "typeName": "Multiple extends true ? string[] : string"
        },
        "checkboxSelection": {
          "type": "boolean"
        },
        "selectedItems": {
          "type": "custom",
          "typeName": "Multiple extends true ? string[] : string"
        },
        "disableSelection": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "SimpleTreeViewSlotProps"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "experimentalFeatures": {
          "type": "custom",
          "typeName": "{ indentationAtItemLevel?: boolean; }"
        },
        "id": {
          "type": "string"
        },
        "itemChildrenIndentation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"article\" | \"banner\" | \"button\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"dialog\" | \"directory\" | \"document\" | \"feed\" | \"figure\" | \"form\" | \"gridcell\" | \"group\" | \"heading\" | \"img\" | \"link\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"main\" | \"marquee\" | \"math\" | \"menu\" | \"menubar\" | \"menuitem\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"option\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"search\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"switch\" | \"tab\" | \"table\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "none",
            "search",
            "text",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-tree-view/SimpleTreeView",
        "locator": {
          "type": "named",
          "name": "SimpleTreeView"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-tree-view/RichTreeView#RichTreeView": {
      "id": "@mui/x-tree-view/RichTreeView#RichTreeView",
      "name": "RichTreeView",
      "props": {
        "items": {
          "type": "custom",
          "typeName": "readonly R[]"
        },
        "defaultExpandedItems": {
          "type": "custom",
          "typeName": "string[]"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "RichTreeViewSlotProps<R, Multiple>"
        },
        "slots": {
          "type": "custom",
          "typeName": "RichTreeViewSlots"
        },
        "experimentalFeatures": {
          "type": "custom",
          "typeName": "{ indentationAtItemLevel?: boolean; } & { labelEditing?: boolean; }"
        },
        "isItemEditable": {
          "type": "custom",
          "typeName": "boolean | ((item: R) => boolean)"
        },
        "getItemLabel": {
          "type": "custom",
          "typeName": "(item: R) => string"
        },
        "expansionTrigger": {
          "type": "string-union",
          "values": [
            "content",
            "iconContainer"
          ]
        },
        "expandedItems": {
          "type": "custom",
          "typeName": "string[]"
        },
        "apiRef": {
          "type": "custom",
          "typeName": "MutableRefObject<TreeViewPublicAPI<readonly [UseTreeViewItemsSignature, UseTreeViewExpansionSignature, UseTreeViewSelectionSignature, UseTreeViewFocusSignature, UseTreeViewKeyboardNavigationSignature, UseTreeViewIconsSignature, UseTreeViewLabelSignature]>>"
        },
        "isItemDisabled": {
          "type": "custom",
          "typeName": "(item: R) => boolean"
        },
        "disabledItemsFocusable": {
          "type": "boolean"
        },
        "getItemId": {
          "type": "custom",
          "typeName": "(item: R) => string"
        },
        "multiSelect": {
          "type": "custom",
          "typeName": "Multiple"
        },
        "defaultSelectedItems": {
          "type": "custom",
          "typeName": "Multiple extends true ? string[] : string"
        },
        "checkboxSelection": {
          "type": "boolean"
        },
        "selectedItems": {
          "type": "custom",
          "typeName": "Multiple extends true ? string[] : string"
        },
        "disableSelection": {
          "type": "boolean"
        },
        "itemChildrenIndentation": {
          "type": "custom",
          "typeName": "string | number"
        },
        "id": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"article\" | \"banner\" | \"button\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"dialog\" | \"directory\" | \"document\" | \"feed\" | \"figure\" | \"form\" | \"gridcell\" | \"group\" | \"heading\" | \"img\" | \"link\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"main\" | \"marquee\" | \"math\" | \"menu\" | \"menubar\" | \"menuitem\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"option\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"search\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"switch\" | \"tab\" | \"table\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "none",
            "search",
            "text",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-tree-view/RichTreeView",
        "locator": {
          "type": "named",
          "name": "RichTreeView"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-tree-view/TreeItem#TreeItem": {
      "id": "@mui/x-tree-view/TreeItem#TreeItem",
      "name": "TreeItem",
      "props": {
        "itemId": {
          "type": "string"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        },
        "slots": {
          "type": "custom",
          "typeName": "TreeItemSlots"
        },
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "disabled": {
          "type": "boolean"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; groupTransition?: string; content?: string; expanded?: string; selected?: string; focused?: string; disabled?: string; iconContainer?: string; label?: string; checkbox?: string; labelInput?: string; editing?: string; editable?: string; dragAndDropOverlay?: string; }"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "TreeItemSlotProps"
        },
        "ContentComponent": {
          "type": "custom",
          "typeName": "((props: TreeItemContentProps, deprecatedLegacyContext?: any) => ReactNode) | (new (props: TreeItemContentProps, deprecatedLegacyContext?: any) => Component<any, any, any>)"
        },
        "ContentProps": {
          "type": "custom",
          "typeName": "HTMLAttributes<HTMLElement> & { ref?: Ref<HTMLElement>; }"
        },
        "sx": {
          "type": "custom",
          "typeName": "SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>) | readonly (boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>))[]"
        },
        "color": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"article\" | \"banner\" | \"button\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"dialog\" | \"directory\" | \"document\" | \"feed\" | \"figure\" | \"form\" | \"gridcell\" | \"group\" | \"heading\" | \"img\" | \"link\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"main\" | \"marquee\" | \"math\" | \"menu\" | \"menubar\" | \"menuitem\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"option\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"search\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"switch\" | \"tab\" | \"table\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "none",
            "search",
            "text",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        }
      },
      "export": {
        "path": "@mui/x-tree-view/TreeItem",
        "locator": {
          "type": "named",
          "name": "TreeItem"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "componentHierarchy": {
        "parents": [
          "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
          "@mui/x-tree-view/TreeItem#TreeItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-tree-view/TreeItem2#TreeItem2": {
      "id": "@mui/x-tree-view/TreeItem2#TreeItem2",
      "name": "TreeItem2",
      "props": {
        "ref": {
          "type": "custom",
          "typeName": "string | Ref<T>"
        },
        "slotProps": {
          "type": "custom",
          "typeName": "TreeItem2SlotProps"
        },
        "slots": {
          "type": "custom",
          "typeName": "TreeItem2Slots"
        },
        "className": {
          "type": "string"
        },
        "classes": {
          "type": "custom",
          "typeName": "{ root?: string; groupTransition?: string; content?: string; expanded?: string; selected?: string; focused?: string; disabled?: string; iconContainer?: string; label?: string; checkbox?: string; labelInput?: string; editing?: string; editable?: string; dragAndDropOverlay?: string; }"
        },
        "id": {
          "type": "string"
        },
        "children": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "label": {
          "type": "custom",
          "typeName": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal"
        },
        "disabled": {
          "type": "boolean"
        },
        "itemId": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "translate": {
          "type": "string-union",
          "values": [
            "yes",
            "no"
          ]
        },
        "defaultChecked": {
          "type": "boolean"
        },
        "defaultValue": {
          "type": "custom",
          "typeName": "string | number | readonly string[]"
        },
        "suppressContentEditableWarning": {
          "type": "boolean"
        },
        "suppressHydrationWarning": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "autoFocus": {
          "type": "boolean"
        },
        "contentEditable": {
          "type": "custom",
          "typeName": "Booleanish | \"inherit\" | \"plaintext-only\""
        },
        "contextMenu": {
          "type": "string"
        },
        "dir": {
          "type": "string"
        },
        "draggable": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "hidden": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "spellCheck": {
          "type": "custom",
          "typeName": "boolean | \"true\" | \"false\""
        },
        "style": {
          "type": "custom",
          "typeName": "CSSProperties"
        },
        "tabIndex": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "radioGroup": {
          "type": "string"
        },
        "role": {
          "type": "custom",
          "typeName": "(string & {}) | \"grid\" | \"alert\" | \"alertdialog\" | \"application\" | \"article\" | \"banner\" | \"button\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"dialog\" | \"directory\" | \"document\" | \"feed\" | \"figure\" | \"form\" | \"gridcell\" | \"group\" | \"heading\" | \"img\" | \"link\" | \"list\" | \"listbox\" | \"listitem\" | \"log\" | \"main\" | \"marquee\" | \"math\" | \"menu\" | \"menubar\" | \"menuitem\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"option\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"search\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"switch\" | \"tab\" | \"table\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\""
        },
        "about": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        },
        "inlist": {
          "type": "any"
        },
        "prefix": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "rev": {
          "type": "string"
        },
        "typeof": {
          "type": "string"
        },
        "vocab": {
          "type": "string"
        },
        "autoCapitalize": {
          "type": "string"
        },
        "autoCorrect": {
          "type": "string"
        },
        "autoSave": {
          "type": "string"
        },
        "itemProp": {
          "type": "string"
        },
        "itemScope": {
          "type": "boolean"
        },
        "itemType": {
          "type": "string"
        },
        "itemID": {
          "type": "string"
        },
        "itemRef": {
          "type": "string"
        },
        "results": {
          "type": "number"
        },
        "security": {
          "type": "string"
        },
        "unselectable": {
          "type": "string-union",
          "values": [
            "on",
            "off"
          ]
        },
        "inputMode": {
          "type": "string-union",
          "values": [
            "none",
            "search",
            "text",
            "tel",
            "url",
            "email",
            "numeric",
            "decimal"
          ]
        },
        "is": {
          "type": "string"
        },
        "dangerouslySetInnerHTML": {
          "type": "custom",
          "typeName": "{ __html: string | TrustedHTML; }"
        },
        "key": {
          "type": "custom",
          "typeName": "string | number | bigint"
        }
      },
      "export": {
        "path": "@mui/x-tree-view/TreeItem2",
        "locator": {
          "type": "named",
          "name": "TreeItem2"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts-pro/Heatmap#Heatmap": {
      "id": "@mui/x-charts-pro/Heatmap#Heatmap",
      "name": "Heatmap",
      "props": {
        "xAxis": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "yAxis": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "series": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "margin": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "width": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "zAxis": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-charts-pro/Heatmap",
        "locator": {
          "type": "named",
          "name": "Heatmap"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts-pro/BarChartPro#BarChartPro": {
      "id": "@mui/x-charts-pro/BarChartPro#BarChartPro",
      "name": "BarChartPro",
      "props": {
        "width": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "xAxis": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "series": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-charts-pro/BarChartPro",
        "locator": {
          "type": "named",
          "name": "BarChartPro"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "docsx/src/modules/components/ChartsUsageDemo#ChartsUsageDemo"
        ],
        "exclusiveParent": "docsx/src/modules/components/ChartsUsageDemo#ChartsUsageDemo"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts-pro/LineChartPro#LineChartPro": {
      "id": "@mui/x-charts-pro/LineChartPro#LineChartPro",
      "name": "LineChartPro",
      "props": {
        "zoom": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "xAxis": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "width": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "series": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-charts-pro/LineChartPro",
        "locator": {
          "type": "named",
          "name": "LineChartPro"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-charts-pro/ScatterChartPro#ScatterChartPro": {
      "id": "@mui/x-charts-pro/ScatterChartPro#ScatterChartPro",
      "name": "ScatterChartPro",
      "props": {
        "width": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "xAxis": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "yAxis": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "series": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-charts-pro/ScatterChartPro",
        "locator": {
          "type": "named",
          "name": "ScatterChartPro"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-data-grid-premium#DataGridPremium": {
      "id": "@mui/x-data-grid-premium#DataGridPremium",
      "name": "DataGridPremium",
      "props": {
        "rows": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "columns": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "initialState": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aggregationModel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aggregationFunctions": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableAggregation": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "aggregationRowsScope": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "apiRef": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRowSelectionOnClick": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "getAggregationPosition": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "treeData": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "getTreeDataPath": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowId": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "groupingColDef": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowSelection": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "cellSelectionModel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "cellSelection": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "checkboxSelection": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "ignoreValueFormatterDuringExport": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "clipboardCopyCellDelimiter": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "splitClipboardPastedText": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableClipboardPaste": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "loading": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "processRowUpdate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultGroupingExpansionDepth": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnMenu": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoHeight": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "hideFooter": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getDetailPanelContent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getDetailPanelHeight": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowHeight": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowHeight": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "pagination": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoPageSize": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowClassName": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "experimentalFeatures": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowGroupingModel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRowGrouping": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "isGroupExpandedByDefault": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowGroupingColumnMode": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "getCellClassName": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-data-grid-premium",
        "locator": {
          "type": "named",
          "name": "DataGridPremium"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-data-grid-pro#DataGridPro": {
      "id": "@mui/x-data-grid-pro#DataGridPro",
      "name": "DataGridPro",
      "props": {
        "apiRef": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "density": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "columns": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rows": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "loading": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "checkboxSelection": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRowSelectionOnClick": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "columnGroupingModel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "initialState": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getRowHeight": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "pinnedColumns": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnPinning": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoHeight": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "hideFooter": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "showCellVerticalBorder": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "showColumnVerticalBorder": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnReorder": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "headerFilters": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableColumnFilter": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getDetailPanelHeight": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getDetailPanelContent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "detailPanelExpandedRowIds": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowHeight": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "rowReordering": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "pinnedRows": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "pagination": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "pageSizeOptions": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "checkboxSelectionVisibleOnly": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "scrollEndThreshold": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "sortingMode": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sortModel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "filterMode": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "filterModel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "hideFooterPagination": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "rowCount": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowsLoadingMode": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "throttleRowsMs": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "unstable_dataSource": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "unstable_dataSourceCache": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "unstable_onDataSourceError": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "treeData": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultGroupingExpansionDepth": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getTreeDataPath": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "groupingColDef": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableChildrenFiltering": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableChildrenSorting": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-data-grid-pro",
        "locator": {
          "type": "named",
          "name": "DataGridPro"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar": {
      "id": "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar",
      "name": "DateRangeCalendar",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "calendars": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "currentMonthCalendarPosition": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "disableFuture": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "readOnly": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/DateRangeCalendar",
        "locator": {
          "type": "named",
          "name": "DateRangeCalendar"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/MultiInputDateRangeField#MultiInputDateRangeField": {
      "id": "@mui/x-date-pickers-pro/MultiInputDateRangeField#MultiInputDateRangeField",
      "name": "MultiInputDateRangeField",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "selectedSections": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/MultiInputDateRangeField",
        "locator": {
          "type": "named",
          "name": "MultiInputDateRangeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/material/Stack#Stack"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/MultiInputTimeRangeField#MultiInputTimeRangeField": {
      "id": "@mui/x-date-pickers-pro/MultiInputTimeRangeField#MultiInputTimeRangeField",
      "name": "MultiInputTimeRangeField",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/MultiInputTimeRangeField",
        "locator": {
          "type": "named",
          "name": "MultiInputTimeRangeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/internals/demo#DemoContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/MultiInputDateTimeRangeField#MultiInputDateTimeRangeField": {
      "id": "@mui/x-date-pickers-pro/MultiInputDateTimeRangeField#MultiInputDateTimeRangeField",
      "name": "MultiInputDateTimeRangeField",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/MultiInputDateTimeRangeField",
        "locator": {
          "type": "named",
          "name": "MultiInputDateTimeRangeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/internals/demo#DemoContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker": {
      "id": "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker",
      "name": "DateRangePicker",
      "props": {
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "maxDate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "localeText": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "calendars": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "readOnly": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "shouldDisableDate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableFuture": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disablePast": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "minDate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/DateRangePicker",
        "locator": {
          "type": "named",
          "name": "DateRangePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveChildren": [
          "@mui/icons-material/Event#Calendar"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField": {
      "id": "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField",
      "name": "SingleInputDateRangeField",
      "props": {
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "unstableFieldRef": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "inputRef": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "selectedSections": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "clearable": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/SingleInputDateRangeField",
        "locator": {
          "type": "named",
          "name": "SingleInputDateRangeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/material/Stack#Stack",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker": {
      "id": "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker",
      "name": "StaticDateRangePicker",
      "props": {
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "calendars": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "shouldDisableDate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/StaticDateRangePicker",
        "locator": {
          "type": "named",
          "name": "StaticDateRangePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/LocalizationProvider#LocalizationProvider",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/DesktopDateRangePicker#DesktopDateRangePicker": {
      "id": "@mui/x-date-pickers-pro/DesktopDateRangePicker#DesktopDateRangePicker",
      "name": "DesktopDateRangePicker",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/DesktopDateRangePicker",
        "locator": {
          "type": "named",
          "name": "DesktopDateRangePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/MobileDateRangePicker#MobileDateRangePicker": {
      "id": "@mui/x-date-pickers-pro/MobileDateRangePicker#MobileDateRangePicker",
      "name": "MobileDateRangePicker",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/MobileDateRangePicker",
        "locator": {
          "type": "named",
          "name": "MobileDateRangePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField#SingleInputDateTimeRangeField": {
      "id": "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField#SingleInputDateTimeRangeField",
      "name": "SingleInputDateTimeRangeField",
      "props": {
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField",
        "locator": {
          "type": "named",
          "name": "SingleInputDateTimeRangeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker": {
      "id": "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker",
      "name": "DateTimeRangePicker",
      "props": {
        "localeText": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "calendars": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "views": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "timeSteps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "viewRenderers": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "readOnly": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "shouldDisableDate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "maxDateTime": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "minDateTime": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableFuture": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disablePast": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "maxDate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "minDate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "maxTime": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "minTime": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "shouldDisableTime": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/DateTimeRangePicker",
        "locator": {
          "type": "named",
          "name": "DateTimeRangePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoContainer",
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/DesktopDateTimeRangePicker#DesktopDateTimeRangePicker": {
      "id": "@mui/x-date-pickers-pro/DesktopDateTimeRangePicker#DesktopDateTimeRangePicker",
      "name": "DesktopDateTimeRangePicker",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/DesktopDateTimeRangePicker",
        "locator": {
          "type": "named",
          "name": "DesktopDateTimeRangePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/MobileDateTimeRangePicker#MobileDateTimeRangePicker": {
      "id": "@mui/x-date-pickers-pro/MobileDateTimeRangePicker#MobileDateTimeRangePicker",
      "name": "MobileDateTimeRangePicker",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/MobileDateTimeRangePicker",
        "locator": {
          "type": "named",
          "name": "MobileDateTimeRangePicker"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem"
        ],
        "exclusiveParent": "@mui/x-date-pickers/internals/demo#DemoItem"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-date-pickers-pro/SingleInputTimeRangeField#SingleInputTimeRangeField": {
      "id": "@mui/x-date-pickers-pro/SingleInputTimeRangeField#SingleInputTimeRangeField",
      "name": "SingleInputTimeRangeField",
      "props": {
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-date-pickers-pro/SingleInputTimeRangeField",
        "locator": {
          "type": "named",
          "name": "SingleInputTimeRangeField"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/x-date-pickers/internals/demo#DemoItem",
          "@mui/x-date-pickers/internals/demo#DemoContainer"
        ]
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/x-tree-view-pro/RichTreeViewPro#RichTreeViewPro": {
      "id": "@mui/x-tree-view-pro/RichTreeViewPro#RichTreeViewPro",
      "name": "RichTreeViewPro",
      "props": {
        "items": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "itemsReordering": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultExpandedItems": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "experimentalFeatures": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "canMoveItemToNewPosition": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/x-tree-view-pro/RichTreeViewPro",
        "locator": {
          "type": "named",
          "name": "RichTreeViewPro"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "componentHierarchy": {
        "parents": [
          "@mui/material#Box"
        ],
        "exclusiveParent": "@mui/material#Box"
      },
      "tags": [
        "external-lib"
      ],
      "parents": []
    }
  },
  "instances": {
    "@mui/material/Accordion#Accordion": [
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expanded": "expanded",
          "onChange": "handleExpansion",
          "slots": "{ transition: Fade as AccordionSlots['transition'] }",
          "slotProps": "{ transition: { timeout: 400 } }",
          "sx": "{ '& .MuiAccordion-region': { height: expanded ? 'auto' : 0 }, '& .MuiAccordionDetails-root': { display: expanded ? 'block' : 'none' }, }"
        },
        "snippet": "<Accordion expanded={expanded} onChange={handleExpansion} slots={{ transition: Fade as AccordionSlots['transition'] }} slotProps={{ transition: { timeout: 400 } }} sx={{ '& .MuiAccordion-region': { height: expanded ? 'auto' : 0 }, '& .MuiAccordionDetails-root': { display: expanded ? 'block' : 'none' }, }} > <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1-content\" id=\"panel1-header\" > <Typography>Custom transition using Fade</Typography> </AccordionSummary> <AccordionDetails> <Typography> Lorem ipsum dolor sit amet.</Typography> </AccordionDetails> <AccordionActions disableSpacing> <Button>Cancel</Button> <Button>Agree</Button> </AccordionActions> </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disabled": "!!expanded",
          "expanded": "expanded === 'panel1'",
          "onChange": "handleChange('panel1')"
        },
        "snippet": "<Accordion disabled={!!expanded} expanded={expanded === 'panel1'} onChange={handleChange('panel1')}> <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1bh-content\" id=\"panel1bh-header\" > <Typography sx={{ width: '33%', flexShrink: 0 }}> General settings </Typography> <Typography sx={{ color: 'text.secondary' }}>I am an accordion</Typography> </AccordionSummary> <AccordionDetails> <Typography> Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat. Aliquam eget maximus est, id dignissim quam. </Typography> </AccordionDetails> </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultExpanded": true
        },
        "snippet": "<Accordion defaultExpanded> <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1-content\" id=\"panel1-header\" > <Typography>Expanded by default</Typography> </AccordionSummary> <AccordionDetails> <Typography> Lorem ipsum dolor sit amet.</Typography> </AccordionDetails> <AccordionActions> <Button>Cancel</Button> <Button>Agree</Button> </AccordionActions> </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disabled": true
        },
        "snippet": "<Accordion disabled> <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel3-content\" id=\"panel3-header\" > <Typography>Disabled Accordion</Typography> </AccordionSummary> </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<Accordion> <AccordionSummary expandIcon={<ArrowDropDownIcon />} aria-controls=\"panel2-content\" id=\"panel2-header\" > <Typography>Accordion 2</Typography> </AccordionSummary> <AccordionDetails> <Typography> Lorem ipsum dolor sit amet.</Typography> </AccordionDetails> </Accordion>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AccordionActions#AccordionActions": [
      {
        "componentId": "@mui/material/AccordionActions#AccordionActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableSpacing": true
        },
        "snippet": "<AccordionActions disableSpacing> <Button>Cancel</Button> <Button>Agree</Button> </AccordionActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AccordionActions#AccordionActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionActions> <Button>Cancel</Button> <Button>Agree</Button> </AccordionActions>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#AccordionDetails": [
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails> <Typography> Lorem ipsum dolor sit amet.</Typography> </AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails> <Typography> Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat. Aliquam eget maximus est, id dignissim quam. </Typography> </AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails>Contents</AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#AccordionSummary": [
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel1bh-content",
          "id": "panel1bh-header"
        },
        "snippet": "<AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1bh-content\" id=\"panel1bh-header\" > <Typography sx={{ width: '33%', flexShrink: 0 }}> General settings </Typography> <Typography sx={{ color: 'text.secondary' }}>I am an accordion</Typography> </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel1-content",
          "id": "panel1-header"
        },
        "snippet": "<AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1-content\" id=\"panel1-header\" > <Typography>Custom transition using Fade</Typography> </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel1-content",
          "id": "panel1-header"
        },
        "snippet": "<AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1-content\" id=\"panel1-header\" > <Typography>Expanded by default</Typography> </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel3-content",
          "id": "panel3-header"
        },
        "snippet": "<AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel3-content\" id=\"panel3-header\" > <Typography>Disabled Accordion</Typography> </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ArrowDropDownIcon />",
          "aria-controls": "panel2-content",
          "id": "panel2-header"
        },
        "snippet": "<AccordionSummary expandIcon={<ArrowDropDownIcon />} aria-controls=\"panel2-content\" id=\"panel2-header\" > <Typography>Accordion 2</Typography> </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Alert#Alert": [
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "severity": "success",
          "variant": "filled",
          "action": " <Button color=\"inherit\" size=\"small\"> UNDO </Button> ",
          "color": "success",
          "closeText": "Accept"
        },
        "snippet": "<Alert severity=\"success\" variant=\"filled\" action={ <Button color=\"inherit\" size=\"small\"> UNDO </Button> } color=\"success\" closeText=\"Accept\" > <AlertTitle>Warning</AlertTitle> This Alert uses a Button component for its action. </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<CheckIcon fontSize=\"inherit\" />",
          "severity": "error",
          "variant": "outlined"
        },
        "snippet": "<Alert icon={<CheckIcon fontSize=\"inherit\" />} severity=\"error\" variant=\"outlined\"> <AlertTitle>Custom Icon</AlertTitle> This error Alert has a custom icon. </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "severity": "success",
          "variant": "filled",
          "sx": "{ width: '100%' }"
        },
        "snippet": "<Alert severity=\"success\" variant=\"filled\" sx={{ width: '100%' }} > <AlertTitle>Snackbar Alert</AlertTitle> This is a success Alert inside a Snackbar! </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "action": " <IconButton aria-label=\"close\" color=\"inherit\" size=\"small\" onClick={() => { setOpen(false); }} > <CloseIcon fontSize=\"inherit\" /> </IconButton> ",
          "sx": "{ mb: 2 }"
        },
        "snippet": "<Alert action={ <IconButton aria-label=\"close\" color=\"inherit\" size=\"small\" onClick={() => { setOpen(false); }} > <CloseIcon fontSize=\"inherit\" /> </IconButton> } sx={{ mb: 2 }} > <AlertTitle>Close Me</AlertTitle> Click the close icon to see the Collapse transition in action! </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "severity": "info",
          "sx": "{ width: '100%', mt: 1 }"
        },
        "snippet": "<Alert severity=\"info\" sx={{ width: '100%', mt: 1 }}> <AlertTitle>Copied data:</AlertTitle> <code style={{ display: 'block', maxHeight: 200, overflow: 'auto', whiteSpace: 'pre-line', }} > {copiedData} </code> </Alert>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#AlertTitle": [
      {
        "componentId": "@mui/material#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Snackbar Alert</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Icon Mapping</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Copied data:</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Custom Icon</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Warning</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AppBar#AppBar": [
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "fixed",
          "color": "primary",
          "sx": "{ top: 'auto', bottom: 0 }"
        },
        "snippet": "<AppBar position=\"fixed\" color=\"primary\" sx={{ top: 'auto', bottom: 0 }}> <Toolbar> <IconButton color=\"inherit\" aria-label=\"open drawer\"> <MenuIcon /> </IconButton> <StyledFab color=\"secondary\" aria-label=\"add\"> <AddIcon /> </StyledFab> <Box sx={{ flexGrow: 1 }} /> <IconButton color=\"inherit\"> <SearchIcon /> </IconButton> <IconButton color=\"inherit\"> <MoreIcon /> </IconButton> </Toolbar> </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "static",
          "color": "primary",
          "enableColorOnDark": true
        },
        "snippet": "<AppBar position=\"static\" color=\"primary\" enableColorOnDark> {appBarLabel('enableColorOnDark')} </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "fixed",
          "sx": "{ width: { sm: `calc(100% - ${drawerWidth}px)` }, ml: { sm: `${drawerWidth}px` }, }"
        },
        "snippet": "<AppBar position=\"fixed\" sx={{ width: { sm: `calc(100% - ${drawerWidth}px)` }, ml: { sm: `${drawerWidth}px` }, }} > <Toolbar> <IconButton color=\"inherit\" aria-label=\"open drawer\" edge=\"start\" onClick={handleDrawerToggle} sx={{ mr: 2, display: { sm: 'none' } }} > <MenuIcon /> </IconButton> <Typography variant=\"h6\" noWrap component=\"div\"> Responsive drawer </Typography> </Toolbar> </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "static",
          "color": "default"
        },
        "snippet": "<AppBar position=\"static\" color=\"default\"> <Tabs value={value} onChange={handleChange} indicatorColor=\"primary\" textColor=\"primary\" variant=\"fullWidth\" aria-label=\"action tabs example\" > <Tab label=\"Item One\" {...a11yProps(0)} /> <Tab label=\"Item Two\" {...a11yProps(1)} /> <Tab label=\"Item Three\" {...a11yProps(2)} /> </Tabs> </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "static",
          "color": "primary"
        },
        "snippet": "<AppBar position=\"static\" color=\"primary\"> <Toolbar> <IconButton edge=\"start\" sx={{ mr: 2 }} color=\"inherit\" aria-label=\"menu\" > <MenuIcon /> </IconButton> <Typography variant=\"h6\" color=\"inherit\" component=\"div\"> App bar </Typography> </Toolbar> </AppBar>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Autocomplete#Autocomplete": [
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "google-map-demo",
          "sx": "{ width: 300 }",
          "getOptionLabel": "(option) => typeof option === 'string' ? option : option.description ",
          "filterOptions": "(x) => x",
          "options": "options",
          "autoComplete": true,
          "includeInputInList": true,
          "filterSelectedOptions": true,
          "value": "value",
          "noOptionsText": "No locations",
          "onChange": "(event: any, newValue: PlaceType | null) => { setOptions(newValue ? [newValue, ...options] : options); setValue(newValue); }",
          "onInputChange": "(event, newInputValue) => { setInputValue(newInputValue); }",
          "renderInput": "(params) => ( <TextField {...params} label=\"Add a location\" fullWidth /> )",
          "renderOption": "(props, option) => { const { key, ...optionProps } = props; const matches = option.structured_formatting.main_text_matched_substrings || []; const parts = parse( option.structured_formatting.main_text, matches.map((match: any) => [match.offset, match.offset + match.length]), ); return ( <li key={key} {...optionProps}> <Grid container sx={{ alignItems: 'center' }}> <Grid item sx={{ display: 'flex', width: 44 }}> <LocationOnIcon sx={{ color: 'text.secondary' }} /> </Grid> <Grid item sx={{ width: 'calc(100% - 44px)', wordWrap: 'break-word' }}> {parts.map((part, index) => ( <Box key={index} component=\"span\" sx={{ fontWeight: part.highlight ? 'bold' : 'regular' }} > {part.text} </Box> ))} <Typography variant=\"body2\" color=\"text.secondary\"> {option.structured_formatting.secondary_text} </Typography> </Grid> </Grid> </li> ); }"
        },
        "snippet": "<Autocomplete id=\"google-map-demo\" sx={{ width: 300 }} getOptionLabel={(option) => typeof option === 'string' ? option : option.description } filterOptions={(x) => x} options={options} autoComplete includeInputInList filterSelectedOptions value={value} noOptionsText=\"No locations\" onChange={(event: any, newValue: PlaceType | null) => { setOptions(newValue ? [newValue, ...options] : options); setValue(newValue); }} onInputChange={(event, newInputValue) => { setInputValue(newInputValue); }} renderInput={(params) => ( <TextField {...params} label=\"Add a location\" fullWidth /> )} renderOption={(props, option) => { const { key, ...optionProps } = props; const matches = option.structured_formatting.main_text_matched_substrings || []; const parts = parse( option.structured_formatting.main_text, matches.map((match: any) => [match.offset, match.offset + match.length]), ); return ( <li key={key} {...optionProps}> <Grid container sx={{ alignItems: 'center' }}> <Grid item sx={{ display: 'flex', width: 44 }}> <LocationOnIcon sx={{ color: 'text.secondary' }} /> </Grid> <Grid item sx={{ width: 'calc(100% - 44px)', wordWrap: 'break-word' }}> {parts.map((part, index) => ( <Box key={index} component=\"span\" sx={{ fontWeight: part.highlight ? 'bold' : 'regular' }} > {part.text} </Box> ))} <Typography variant=\"body2\" color=\"text.secondary\"> {option.structured_formatting.secondary_text} </Typography> </Grid> </Grid> </li> ); }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": true,
          "multiple": true,
          "onClose": "( event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason, ) => { if (reason === 'escape') { handleClose(); } }",
          "value": "pendingValue",
          "onChange": "(event, newValue, reason) => { if ( event.type === 'keydown' && ((event as React.KeyboardEvent).key === 'Backspace' || (event as React.KeyboardEvent).key === 'Delete') && reason === 'removeOption' ) { return; } setPendingValue(newValue); }",
          "disableCloseOnSelect": true,
          "PopperComponent": "PopperComponent",
          "renderTags": "() => null",
          "noOptionsText": "No labels",
          "renderOption": "(props, option, { selected }) => { const { key, ...optionProps } = props; return ( <li key={key} {...optionProps}> <Box component={DoneIcon} sx={{ width: 17, height: 17, mr: '5px', ml: '-2px' }} style={{ visibility: selected ? 'visible' : 'hidden', }} /> <Box component=\"span\" sx={{ width: 14, height: 14, flexShrink: 0, borderRadius: '3px', mr: 1, mt: '2px', }} style={{ backgroundColor: option.color }} /> <Box sx={(t) => ({ flexGrow: 1, '& span': { color: '#8b949e', ...t.applyStyles('light', { color: '#586069', }), }, })} > {option.name} <br /> <span>{option.description}</span> </Box> <Box component={CloseIcon} sx={{ opacity: 0.6, width: 18, height: 18 }} style={{ visibility: selected ? 'visible' : 'hidden', }} /> </li> ); }",
          "options": "[...labels].sort((a, b) => { // Display the selected labels first. let ai = value.indexOf(a); ai = ai === -1 ? value.length + labels.indexOf(a) : ai; let bi = value.indexOf(b); bi = bi === -1 ? value.length + labels.indexOf(b) : bi; return ai - bi; })",
          "getOptionLabel": "(option) => option.name",
          "renderInput": "(params) => ( <StyledInput ref={params.InputProps.ref} inputProps={params.inputProps} autoFocus placeholder=\"Filter labels\" /> )"
        },
        "snippet": "<Autocomplete open multiple onClose={( event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason, ) => { if (reason === 'escape') { handleClose(); } }} value={pendingValue} onChange={(event, newValue, reason) => { if ( event.type === 'keydown' && ((event as React.KeyboardEvent).key === 'Backspace' || (event as React.KeyboardEvent).key === 'Delete') && reason === 'removeOption' ) { return; } setPendingValue(newValue); }} disableCloseOnSelect PopperComponent={PopperComponent} renderTags={() => null} noOptionsText=\"No labels\" renderOption={(props, option, { selected }) => { const { key, ...optionProps } = props; return ( <li key={key} {...optionProps}> <Box component={DoneIcon} sx={{ width: 17, height: 17, mr: '5px', ml: '-2px' }} style={{ visibility: selected ? 'visible' : 'hidden', }} /> <Box component=\"span\" sx={{ width: 14, height: 14, flexShrink: 0, borderRadius: '3px', mr: 1, mt: '2px', }} style={{ backgroundColor: option.color }} /> <Box sx={(t) => ({ flexGrow: 1, '& span': { color: '#8b949e', ...t.applyStyles('light', { color: '#586069', }), }, })} > {option.name} <br /> <span>{option.description}</span> </Box> <Box component={CloseIcon} sx={{ opacity: 0.6, width: 18, height: 18 }} style={{ visibility: selected ? 'visible' : 'hidden', }} /> </li> ); }} options={[...labels].sort((a, b) => { // Display the selected labels first. let ai = value.indexOf(a); ai = ai === -1 ? value.length + labels.indexOf(a) : ai; let bi = value.indexOf(b); bi = bi === -1 ? value.length + labels.indexOf(b) : bi; return ai - bi; })} getOptionLabel={(option) => option.name} renderInput={(params) => ( <StyledInput ref={params.InputProps.ref} inputProps={params.inputProps} autoFocus placeholder=\"Filter labels\" /> )} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(event, newValue) => { if (typeof newValue === 'string') { setValue({ title: newValue, }); } else if (newValue && newValue.inputValue) { // Create a new value from the user input setValue({ title: newValue.inputValue, }); } else { setValue(newValue); } }",
          "filterOptions": "(options, params) => { const filtered = filter(options, params); const { inputValue } = params; // Suggest the creation of a new value const isExisting = options.some((option) => inputValue === option.title); if (inputValue !== '' && !isExisting) { filtered.push({ inputValue, title: `Add \"${inputValue}\"`, }); } return filtered; }",
          "selectOnFocus": true,
          "clearOnBlur": true,
          "handleHomeEndKeys": true,
          "id": "free-solo-with-text-demo",
          "options": "top100Films",
          "getOptionLabel": "(option) => { // Value selected with enter, right from the input if (typeof option === 'string') { return option; } // Add \"xxx\" option created dynamically if (option.inputValue) { return option.inputValue; } // Regular option return option.title; }",
          "renderOption": "(props, option) => { const { key, ...optionProps } = props; return ( <li key={key} {...optionProps}> {option.title} </li> ); }",
          "sx": "{ width: 300 }",
          "freeSolo": true,
          "renderInput": "(params) => ( <TextField {...params} label=\"Free solo with text demo\" /> )"
        },
        "snippet": "<Autocomplete value={value} onChange={(event, newValue) => { if (typeof newValue === 'string') { setValue({ title: newValue, }); } else if (newValue && newValue.inputValue) { // Create a new value from the user input setValue({ title: newValue.inputValue, }); } else { setValue(newValue); } }} filterOptions={(options, params) => { const filtered = filter(options, params); const { inputValue } = params; // Suggest the creation of a new value const isExisting = options.some((option) => inputValue === option.title); if (inputValue !== '' && !isExisting) { filtered.push({ inputValue, title: `Add \"${inputValue}\"`, }); } return filtered; }} selectOnFocus clearOnBlur handleHomeEndKeys id=\"free-solo-with-text-demo\" options={top100Films} getOptionLabel={(option) => { // Value selected with enter, right from the input if (typeof option === 'string') { return option; } // Add \"xxx\" option created dynamically if (option.inputValue) { return option.inputValue; } // Regular option return option.title; }} renderOption={(props, option) => { const { key, ...optionProps } = props; return ( <li key={key} {...optionProps}> {option.title} </li> ); }} sx={{ width: 300 }} freeSolo renderInput={(params) => ( <TextField {...params} label=\"Free solo with text demo\" /> )} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(event, newValue) => { if (typeof newValue === 'string') { // timeout to avoid instant validation of the dialog's form. setTimeout(() => { toggleOpen(true); setDialogValue({ title: newValue, year: '', }); }); } else if (newValue && newValue.inputValue) { toggleOpen(true); setDialogValue({ title: newValue.inputValue, year: '', }); } else { setValue(newValue); } }",
          "filterOptions": "(options, params) => { const filtered = filter(options, params); if (params.inputValue !== '') { filtered.push({ inputValue: params.inputValue, title: `Add \"${params.inputValue}\"`, }); } return filtered; }",
          "id": "free-solo-dialog-demo",
          "options": "top100Films",
          "getOptionLabel": "(option) => { // for example value selected with enter, right from the input if (typeof option === 'string') { return option; } if (option.inputValue) { return option.inputValue; } return option.title; }",
          "selectOnFocus": true,
          "clearOnBlur": true,
          "handleHomeEndKeys": true,
          "renderOption": "(props, option) => { const { key, ...optionProps } = props; return ( <li key={key} {...optionProps}> {option.title} </li> ); }",
          "sx": "{ width: 300 }",
          "freeSolo": true,
          "renderInput": "(params) => <TextField {...params} label=\"Free solo dialog\" />"
        },
        "snippet": "<Autocomplete value={value} onChange={(event, newValue) => { if (typeof newValue === 'string') { // timeout to avoid instant validation of the dialog's form. setTimeout(() => { toggleOpen(true); setDialogValue({ title: newValue, year: '', }); }); } else if (newValue && newValue.inputValue) { toggleOpen(true); setDialogValue({ title: newValue.inputValue, year: '', }); } else { setValue(newValue); } }} filterOptions={(options, params) => { const filtered = filter(options, params); if (params.inputValue !== '') { filtered.push({ inputValue: params.inputValue, title: `Add \"${params.inputValue}\"`, }); } return filtered; }} id=\"free-solo-dialog-demo\" options={top100Films} getOptionLabel={(option) => { // for example value selected with enter, right from the input if (typeof option === 'string') { return option; } if (option.inputValue) { return option.inputValue; } return option.title; }} selectOnFocus clearOnBlur handleHomeEndKeys renderOption={(props, option) => { const { key, ...optionProps } = props; return ( <li key={key} {...optionProps}> {option.title} </li> ); }} sx={{ width: 300 }} freeSolo renderInput={(params) => <TextField {...params} label=\"Free solo dialog\" />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "options": "options",
          "disabled": "disabled",
          "readOnly": "readOnly",
          "ref": "ref",
          "sx": "{ minWidth: 250 }",
          "renderInput": "(params) => ( <TextField {...params} label={label} inputProps={{ ...params.inputProps, ...inputProps }} InputProps={{ ...params.InputProps, startAdornment: mergeAdornments( startAdornment, params.InputProps.startAdornment, ), endAdornment: mergeAdornments( endAdornment, params.InputProps.endAdornment, ), }} /> )",
          "getOptionLabel": "(option) => { if (!dayjs.isDayjs(option)) { return ''; } return option.format('MM / DD / YYYY'); }",
          "value": "value",
          "onChange": "(_, newValue) => { onChange?.(newValue, { validationError: null }); }",
          "isOptionEqualToValue": "(option, valueToCheck) => option.toISOString() === valueToCheck.toISOString() "
        },
        "snippet": "<Autocomplete id={id} options={options} disabled={disabled} readOnly={readOnly} ref={ref} sx={{ minWidth: 250 }} renderInput={(params) => ( <TextField {...params} label={label} inputProps={{ ...params.inputProps, ...inputProps }} InputProps={{ ...params.InputProps, startAdornment: mergeAdornments( startAdornment, params.InputProps.startAdornment, ), endAdornment: mergeAdornments( endAdornment, params.InputProps.endAdornment, ), }} /> )} getOptionLabel={(option) => { if (!dayjs.isDayjs(option)) { return ''; } return option.format('MM / DD / YYYY'); }} value={value} onChange={(_, newValue) => { onChange?.(newValue, { validationError: null }); }} isOptionEqualToValue={(option, valueToCheck) => option.toISOString() === valueToCheck.toISOString() } />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Avatar#Avatar": [
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: deepOrange[500] }",
          "alt": "Remy Sharp",
          "src": "/broken-image.jpg"
        },
        "snippet": "<Avatar sx={{ bgcolor: deepOrange[500] }} alt=\"Remy Sharp\" src=\"/broken-image.jpg\" > B </Avatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alt": "Remy Sharp",
          "src": "/static/images/avatar/1.jpg",
          "sx": "{ width: 24, height: 24 }"
        },
        "snippet": "<Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" sx={{ width: 24, height: 24 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alt": "Remy Sharp",
          "src": "/static/images/avatar/1.jpg",
          "sx": "{ width: 56, height: 56 }"
        },
        "snippet": "<Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" sx={{ width: 56, height: 56 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: deepOrange[500] }",
          "alt": "Remy Sharp",
          "src": "/broken-image.jpg"
        },
        "snippet": "<Avatar sx={{ bgcolor: deepOrange[500] }} alt=\"Remy Sharp\" src=\"/broken-image.jpg\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alt": "Ted talk",
          "src": "https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg"
        },
        "snippet": "<Avatar alt=\"Ted talk\" src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AvatarGroup#AvatarGroup": [
      {
        "componentId": "@mui/material/AvatarGroup#AvatarGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "renderSurplus": "(surplus) => <span>+{surplus.toString()[0]}k</span>",
          "total": 4251
        },
        "snippet": "<AvatarGroup renderSurplus={(surplus) => <span>+{surplus.toString()[0]}k</span>} total={4251} > <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" /> <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" /> <Avatar alt=\"Agnes Walker\" src=\"/static/images/avatar/4.jpg\" /> <Avatar alt=\"Trevor Henderson\" src=\"/static/images/avatar/5.jpg\" /> </AvatarGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AvatarGroup#AvatarGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "max": 4
        },
        "snippet": "<AvatarGroup max={4}> <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" /> <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" /> <Avatar alt=\"Cindy Baker\" src=\"/static/images/avatar/3.jpg\" /> <Avatar alt=\"Agnes Walker\" src=\"/static/images/avatar/4.jpg\" /> <Avatar alt=\"Trevor Henderson\" src=\"/static/images/avatar/5.jpg\" /> </AvatarGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AvatarGroup#AvatarGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "total": 24
        },
        "snippet": "<AvatarGroup total={24}> <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" /> <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" /> <Avatar alt=\"Agnes Walker\" src=\"/static/images/avatar/4.jpg\" /> <Avatar alt=\"Trevor Henderson\" src=\"/static/images/avatar/5.jpg\" /> </AvatarGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Backdrop#Backdrop": [
      {
        "componentId": "@mui/material/Backdrop#Backdrop",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }",
          "open": "open",
          "onClick": "handleClose"
        },
        "snippet": "<Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={open} onClick={handleClose} > <CircularProgress color=\"inherit\" /> </Backdrop>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Backdrop#Backdrop",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open"
        },
        "snippet": "<Backdrop open={open} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Badge#Badge": [
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary",
          "overlap": "circular",
          "badgeContent": " ",
          "variant": "dot"
        },
        "snippet": "<Badge color=\"secondary\" overlap=\"circular\" badgeContent=\" \" variant=\"dot\"> {circle} </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "overlap": "circular",
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'right' }",
          "badgeContent": " <SmallAvatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" /> "
        },
        "snippet": "<Badge overlap=\"circular\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }} badgeContent={ <SmallAvatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" /> } > <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" /> </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "props.day.toString()",
          "overlap": "circular",
          "badgeContent": "isSelected ? '🌚' : undefined"
        },
        "snippet": "<Badge key={props.day.toString()} overlap=\"circular\" badgeContent={isSelected ? '🌚' : undefined} > <PickersDay {...other} outsideCurrentMonth={outsideCurrentMonth} day={day} /> </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary",
          "variant": "dot",
          "invisible": "invisible"
        },
        "snippet": "<Badge color=\"secondary\" variant=\"dot\" invisible={invisible}> <MailIcon /> </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary",
          "overlap": "circular",
          "badgeContent": " "
        },
        "snippet": "<Badge color=\"secondary\" overlap=\"circular\" badgeContent=\" \"> {circle} </Badge>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/BottomNavigation#BottomNavigation": [
      {
        "componentId": "@mui/material/BottomNavigation#BottomNavigation",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500 }",
          "value": "value",
          "onChange": "handleChange"
        },
        "snippet": "<BottomNavigation sx={{ width: 500 }} value={value} onChange={handleChange}> <BottomNavigationAction label=\"Recents\" value=\"recents\" icon={<RestoreIcon />} /> <BottomNavigationAction label=\"Favorites\" value=\"favorites\" icon={<FavoriteIcon />} /> <BottomNavigationAction label=\"Nearby\" value=\"nearby\" icon={<LocationOnIcon />} /> <BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} /> </BottomNavigation>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigation#BottomNavigation",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "showLabels": true,
          "value": "value",
          "onChange": "(event, newValue) => { setValue(newValue); }"
        },
        "snippet": "<BottomNavigation showLabels value={value} onChange={(event, newValue) => { setValue(newValue); }} > <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} /> <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} /> <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} /> </BottomNavigation>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigation#BottomNavigation",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "showLabels": true,
          "value": "value",
          "onChange": "(event, newValue) => { setValue(newValue); }"
        },
        "snippet": "<BottomNavigation showLabels value={value} onChange={(event, newValue) => { setValue(newValue); }} > <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} /> <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} /> <BottomNavigationAction label=\"Archive\" icon={<ArchiveIcon />} /> </BottomNavigation>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/BottomNavigationAction#BottomNavigationAction": [
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Favorites",
          "value": "favorites",
          "icon": "<FavoriteIcon />"
        },
        "snippet": "<BottomNavigationAction label=\"Favorites\" value=\"favorites\" icon={<FavoriteIcon />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Nearby",
          "value": "nearby",
          "icon": "<LocationOnIcon />"
        },
        "snippet": "<BottomNavigationAction label=\"Nearby\" value=\"nearby\" icon={<LocationOnIcon />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Recents",
          "value": "recents",
          "icon": "<RestoreIcon />"
        },
        "snippet": "<BottomNavigationAction label=\"Recents\" value=\"recents\" icon={<RestoreIcon />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Folder",
          "value": "folder",
          "icon": "<FolderIcon />"
        },
        "snippet": "<BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Favorites",
          "icon": "<FavoriteIcon />"
        },
        "snippet": "<BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#Box": [
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 200,
          "width": 200,
          "my": 4,
          "display": "flex",
          "alignItems": "center",
          "gap": 4,
          "p": 2,
          "sx": "{ border: '2px solid grey' }"
        },
        "snippet": "<Box height={200} width={200} my={4} display=\"flex\" alignItems=\"center\" gap={4} p={2} sx={{ border: '2px solid grey' }} > This Box uses MUI System props for quick customization. </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{ '& > :not(style)': { m: 1 }, }",
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Box component=\"form\" sx={{ '& > :not(style)': { m: 1 }, }} noValidate autoComplete=\"off\" > <FormControl variant=\"standard\"> <InputLabel htmlFor=\"component-simple\">Name</InputLabel> <Input id=\"component-simple\" defaultValue=\"Composed TextField\" /> </FormControl> <FormControl variant=\"standard\"> <InputLabel htmlFor=\"component-helper\">Name</InputLabel> <Input id=\"component-helper\" defaultValue=\"Composed TextField\" aria-describedby=\"component-helper-text\" /> <FormHelperText id=\"component-helper-text\"> Some important helper text </FormHelperText> </FormControl> <FormControl disabled variant=\"standard\"> <InputLabel htmlFor=\"component-disabled\">Name</InputLabel> <Input id=\"component-disabled\" defaultValue=\"Composed TextField\" /> <FormHelperText>Disabled</FormHelperText> </FormControl> <FormControl error variant=\"standard\"> <InputLabel htmlFor=\"component-error\">Name</InputLabel> <Input id=\"component-error\" defaultValue=\"Composed TextField\" aria-describedby=\"component-error-text\" /> <FormHelperText id=\"component-error-text\">Error</FormHelperText> </FormControl> <FormControl> <InputLabel htmlFor=\"component-outlined\">Name</InputLabel> <OutlinedInput id=\"component-outlined\" defaultValue=\"Composed TextField\" label=\"Name\" /> </FormControl> <FormControl variant=\"filled\"> <InputLabel htmlFor=\"component-filled\">Name</InputLabel> <FilledInput id=\"component-filled\" defaultValue=\"Composed TextField\" /> </FormControl> </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: anchor === 'top' || anchor === 'bottom' ? 'auto' : 250 }",
          "role": "presentation",
          "onClick": "toggleDrawer(anchor, false)",
          "onKeyDown": "toggleDrawer(anchor, false)"
        },
        "snippet": "<Box sx={{ width: anchor === 'top' || anchor === 'bottom' ? 'auto' : 250 }} role=\"presentation\" onClick={toggleDrawer(anchor, false)} onKeyDown={toggleDrawer(anchor, false)} > <List> {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> <Divider /> <List> {['All mail', 'Trash', 'Spam'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{ '& .MuiTextField-root': { m: 1, width: '25ch' }, }",
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Box component=\"form\" sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' }, }} noValidate autoComplete=\"off\" > <div> <TextField id=\"outlined-select-currency-native\" select required color=\"primary\" label=\"Native select\" defaultValue=\"EUR\" SelectProps={{ native: true, }} helperText=\"Please select your currency\" variant=\"filled\" placeholder=\"Currency...\" size=\"medium\" rows={5} > {currencies.map((option) => ( <option key={option.value} value={option.value}> {option.label} </option> ))} </TextField> </div> </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{ '& > :not(style)': { m: 1 }, }",
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Box component=\"form\" sx={{ '& > :not(style)': { m: 1 }, }} noValidate autoComplete=\"off\" > <Input placeholder=\"Placeholder...\" defaultValue=\"Hello world\" inputProps={ariaLabel} /> <Input placeholder=\"Placeholder...\" inputProps={ariaLabel} /> <Input placeholder=\"Placeholder...\" disabled defaultValue=\"Disabled\" inputProps={ariaLabel} /> <Input placeholder=\"Placeholder...\" defaultValue=\"Error\" error inputProps={ariaLabel} /> </Box>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Breadcrumbs#Breadcrumbs": [
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxItems": 2,
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs maxItems={2} aria-label=\"breadcrumb\"> <Link underline=\"hover\" color=\"inherit\" href=\"#\"> Home </Link> <Link underline=\"hover\" color=\"inherit\" href=\"#\"> Catalog </Link> <Link underline=\"hover\" color=\"inherit\" href=\"#\"> Accessories </Link> <Link underline=\"hover\" color=\"inherit\" href=\"#\"> New Collection </Link> <Typography color=\"text.primary\">Belts</Typography> </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "separator": "<NavigateNextIcon fontSize=\"small\" />",
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\" > {breadcrumbs} </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "separator": "›",
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs separator=\"›\" aria-label=\"breadcrumb\"> {breadcrumbs} </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "separator": "-",
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs separator=\"-\" aria-label=\"breadcrumb\"> {breadcrumbs} </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs aria-label=\"breadcrumb\"> <Link underline=\"hover\" sx={{ display: 'flex', alignItems: 'center' }} color=\"inherit\" href=\"/\" > <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> MUI </Link> <Link underline=\"hover\" sx={{ display: 'flex', alignItems: 'center' }} color=\"inherit\" href=\"/material-ui/getting-started/installation/\" > <WhatshotIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> Core </Link> <Typography sx={{ display: 'flex', alignItems: 'center' }} color=\"text.primary\" > <GrainIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> Breadcrumb </Typography> </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#Button": [
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-describedby": "popperId",
          "type": "button",
          "size": "small",
          "id": "custom-view-button",
          "aria-controls": "state.isMenuOpened ? 'custom-view-menu' : undefined",
          "aria-expanded": "state.isMenuOpened ? 'true' : undefined",
          "aria-haspopup": "true",
          "onClick": "handlePopperAnchorClick"
        },
        "snippet": "<Button aria-describedby={popperId} type=\"button\" size=\"small\" id=\"custom-view-button\" aria-controls={state.isMenuOpened ? 'custom-view-menu' : undefined} aria-expanded={state.isMenuOpened ? 'true' : undefined} aria-haspopup=\"true\" onClick={handlePopperAnchorClick} > Custom view ({Object.keys(state.views).length}) </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-customized-button",
          "aria-controls": "open ? 'demo-customized-menu' : undefined",
          "aria-haspopup": "true",
          "aria-expanded": "open ? 'true' : undefined",
          "variant": "contained",
          "disableElevation": true,
          "onClick": "handleClick",
          "endIcon": "<KeyboardArrowDownIcon />"
        },
        "snippet": "<Button id=\"demo-customized-button\" aria-controls={open ? 'demo-customized-menu' : undefined} aria-haspopup=\"true\" aria-expanded={open ? 'true' : undefined} variant=\"contained\" disableElevation onClick={handleClick} endIcon={<KeyboardArrowDownIcon />} > Options </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "small",
          "aria-controls": "open ? 'split-button-menu' : undefined",
          "aria-expanded": "open ? 'true' : undefined",
          "aria-label": "select merge strategy",
          "aria-haspopup": "menu",
          "onClick": "handleToggle"
        },
        "snippet": "<Button size=\"small\" aria-controls={open ? 'split-button-menu' : undefined} aria-expanded={open ? 'true' : undefined} aria-label=\"select merge strategy\" aria-haspopup=\"menu\" onClick={handleToggle} > <ArrowDropDownIcon /> </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "id": "id",
          "disabled": "disabled",
          "ref": "ref",
          "aria-label": "ariaLabel",
          "onClick": "() => setOpen?.((prev) => !prev)"
        },
        "snippet": "<Button variant=\"outlined\" id={id} disabled={disabled} ref={ref} aria-label={ariaLabel} onClick={() => setOpen?.((prev) => !prev)} > {label ? `Current date: ${label}` : 'Pick a date'} </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ my: 0.5 }",
          "variant": "outlined",
          "size": "small",
          "onClick": "handleCheckedRight",
          "disabled": "leftChecked.length === 0",
          "aria-label": "move selected right"
        },
        "snippet": "<Button sx={{ my: 0.5 }} variant=\"outlined\" size=\"small\" onClick={handleCheckedRight} disabled={leftChecked.length === 0} aria-label=\"move selected right\" > &gt; </Button>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ButtonBase#ButtonBase": [
      {
        "componentId": "@mui/material/ButtonBase#ButtonBase",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 128, height: 128 }"
        },
        "snippet": "<ButtonBase sx={{ width: 128, height: 128 }}> <Img alt=\"complex\" src=\"/static/images/grid/complex.jpg\" /> </ButtonBase>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ButtonGroup#ButtonGroup": [
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "contained",
          "ref": "anchorRef",
          "aria-label": "Button group with a nested menu"
        },
        "snippet": "<ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"Button group with a nested menu\" > <Button onClick={handleClick}>{options[selectedIndex]}</Button> <Button size=\"small\" aria-controls={open ? 'split-button-menu' : undefined} aria-expanded={open ? 'true' : undefined} aria-label=\"select merge strategy\" aria-haspopup=\"menu\" onClick={handleToggle} > <ArrowDropDownIcon /> </Button> </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableElevation": true,
          "variant": "contained",
          "aria-label": "Disabled button group"
        },
        "snippet": "<ButtonGroup disableElevation variant=\"contained\" aria-label=\"Disabled button group\" > <Button>One</Button> <Button>Two</Button> </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "aria-label": "Vertical button group",
          "variant": "contained"
        },
        "snippet": "<ButtonGroup orientation=\"vertical\" aria-label=\"Vertical button group\" variant=\"contained\" > {buttons} </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "aria-label": "Vertical button group",
          "variant": "text"
        },
        "snippet": "<ButtonGroup orientation=\"vertical\" aria-label=\"Vertical button group\" variant=\"text\" > {buttons} </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "aria-label": "Loading button group"
        },
        "snippet": "<ButtonGroup variant=\"outlined\" aria-label=\"Loading button group\"> <Button>Submit</Button> <LoadingButton>Fetch data</LoadingButton> <LoadingButton loading loadingPosition=\"start\" startIcon={<SaveIcon />}> Save </LoadingButton> </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Card#Card": [
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "sx": "{ maxWidth: 360 }"
        },
        "snippet": "<Card variant=\"outlined\" sx={{ maxWidth: 360 }}> <Box sx={{ p: 2 }}> <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\"> <Typography gutterBottom variant=\"h5\" component=\"div\"> Toothbrush </Typography> <Typography gutterBottom variant=\"h6\" component=\"div\"> $4.50 </Typography> </Stack> <Typography color=\"text.secondary\" variant=\"body2\"> Pinstriped cornflower blue cotton blouse takes you on a walk to the park or just down the hall. </Typography> </Box> <Divider /> <Box sx={{ p: 2 }}> <Typography gutterBottom variant=\"body2\"> Select type </Typography> <Stack direction=\"row\" spacing={1}> <Chip color=\"primary\" label=\"Soft\" size=\"small\" /> <Chip label=\"Medium\" size=\"small\" /> <Chip label=\"Hard\" size=\"small\" /> </Stack> </Box> </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "sx": "{ display: 'flex', color: 'text.secondary', '& svg': { m: 1, }, '& hr': { mx: 0.5, }, }"
        },
        "snippet": "<Card variant=\"outlined\" sx={{ display: 'flex', color: 'text.secondary', '& svg': { m: 1, }, '& hr': { mx: 0.5, }, }} > <FormatAlignLeftIcon /> <FormatAlignCenterIcon /> <FormatAlignRightIcon /> <Divider orientation=\"vertical\" variant=\"middle\" flexItem /> <FormatBoldIcon /> </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ maxWidth: 345 }"
        },
        "snippet": "<Card sx={{ maxWidth: 345 }}> <CardHeader avatar={ <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\"> R </Avatar> } action={ <IconButton aria-label=\"settings\"> <MoreVertIcon /> </IconButton> } title=\"Shrimp and Chorizo Paella\" subheader=\"September 14, 2016\" /> <CardMedia component=\"img\" height=\"194\" image=\"/static/images/cards/paella.jpg\" alt=\"Paella dish\" /> <CardContent> <Typography variant=\"body2\" color=\"text.secondary\"> This impressive paella is a perfect party dish and a fun meal to cook together with your guests. Add 1 cup of frozen peas along with the mussels, if you like. </Typography> </CardContent> <CardActions disableSpacing> <IconButton aria-label=\"add to favorites\"> <FavoriteIcon /> </IconButton> <IconButton aria-label=\"share\"> <ShareIcon /> </IconButton> <ExpandMore expand={expanded} onClick={handleExpandClick} aria-expanded={expanded} aria-label=\"show more\" > <ExpandMoreIcon /> </ExpandMore> </CardActions> <Collapse in={expanded} timeout=\"auto\" unmountOnExit> <CardContent> <Typography paragraph>Method:</Typography> <Typography paragraph> Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10 minutes. </Typography> <Typography paragraph> Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a large plate and set aside, leaving chicken and chorizo in the pan. Add pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook, stirring often until thickened and fragrant, about 10 minutes. Add saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil. </Typography> <Typography paragraph> Add rice and stir very gently to distribute. Top with artichokes and peppers, and cook without stirring, until most of the liquid is absorbed, 15 to 18 minutes. Reduce heat to medium-low, add reserved shrimp and mussels, tucking them down into the rice, and cook again without stirring, until mussels have opened and rice is just tender, 5 to 7 minutes more. (Discard any mussels that don&apos;t open.) </Typography> <Typography> Set aside off of the heat to let rest for 10 minutes, and then serve. </Typography> </CardContent> </Collapse> </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ maxWidth: 345, m: 2 }"
        },
        "snippet": "<Card sx={{ maxWidth: 345, m: 2 }}> <CardHeader avatar={ loading ? ( <Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} /> ) : ( <Avatar alt=\"Ted talk\" src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\" /> ) } action={ loading ? null : ( <IconButton aria-label=\"settings\"> <MoreVertIcon /> </IconButton> ) } title={ loading ? ( <Skeleton animation=\"wave\" height={10} width=\"80%\" style={{ marginBottom: 6 }} /> ) : ( 'Ted' ) } subheader={ loading ? ( <Skeleton animation=\"wave\" height={10} width=\"40%\" /> ) : ( '5 hours ago' ) } /> {loading ? ( <Skeleton sx={{ height: 190 }} animation=\"wave\" variant=\"rectangular\" /> ) : ( <CardMedia component=\"img\" height=\"140\" image=\"https://pi.tedcdn.com/r/talkstar-photos.s3.amazonaws.com/uploads/72bda89f-9bbf-4685-910a-2f151c4f3a8a/NicolaSturgeon_2019T-embed.jpg?w=512\" alt=\"Nicola Sturgeon on a TED talk stage\" /> )} <CardContent> {loading ? ( <React.Fragment> <Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} /> <Skeleton animation=\"wave\" height={10} width=\"80%\" /> </React.Fragment> ) : ( <Typography variant=\"body2\" color=\"text.secondary\" component=\"p\"> { \"Why First Minister of Scotland Nicola Sturgeon thinks GDP is the wrong measure of a country's success:\" } </Typography> )} </CardContent> </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ display: 'flex' }"
        },
        "snippet": "<Card sx={{ display: 'flex' }}> <Box sx={{ display: 'flex', flexDirection: 'column' }}> <CardContent sx={{ flex: '1 0 auto' }}> <Typography component=\"div\" variant=\"h5\"> Live From Space </Typography> <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\"> Mac Miller </Typography> </CardContent> <Box sx={{ display: 'flex', alignItems: 'center', pl: 1, pb: 1 }}> <IconButton aria-label=\"previous\"> {theme.direction === 'rtl' ? <SkipNextIcon /> : <SkipPreviousIcon />} </IconButton> <IconButton aria-label=\"play/pause\"> <PlayArrowIcon sx={{ height: 38, width: 38 }} /> </IconButton> <IconButton aria-label=\"next\"> {theme.direction === 'rtl' ? <SkipPreviousIcon /> : <SkipNextIcon />} </IconButton> </Box> </Box> <CardMedia component=\"img\" sx={{ width: 151 }} image=\"/static/images/cards/live-from-space.jpg\" alt=\"Live from space album cover\" /> </Card>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#CardActionArea": [
      {
        "componentId": "@mui/material#CardActionArea",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActionArea> <CardMedia component=\"img\" height=\"140\" image=\"/static/images/cards/contemplative-reptile.jpg\" alt=\"green iguana\" /> <CardContent> <Typography gutterBottom variant=\"h5\" component=\"div\"> Lizard </Typography> <Typography variant=\"body2\" color=\"text.secondary\"> Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica </Typography> </CardContent> </CardActionArea>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#CardActions": [
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableSpacing": true
        },
        "snippet": "<CardActions disableSpacing> <IconButton aria-label=\"add to favorites\"> <FavoriteIcon /> </IconButton> <IconButton aria-label=\"share\"> <ShareIcon /> </IconButton> <ExpandMore expand={expanded} onClick={handleExpandClick} aria-expanded={expanded} aria-label=\"show more\" > <ExpandMoreIcon /> </ExpandMore> </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions> <Button size=\"small\">Share</Button> <Button size=\"small\">Learn More</Button> </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions> <Button size=\"small\" color=\"primary\"> Share </Button> </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions> <Button size=\"small\">Learn More</Button> </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions> <Button size=\"small\">Learn More</Button> </CardActions>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CardContent#CardContent": [
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ flex: '1 0 auto' }"
        },
        "snippet": "<CardContent sx={{ flex: '1 0 auto' }}> <Typography component=\"div\" variant=\"h5\"> Live From Space </Typography> <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\"> Mac Miller </Typography> </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent> <Typography paragraph>Method:</Typography> <Typography paragraph> Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10 minutes. </Typography> <Typography paragraph> Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a large plate and set aside, leaving chicken and chorizo in the pan. Add pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook, stirring often until thickened and fragrant, about 10 minutes. Add saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil. </Typography> <Typography paragraph> Add rice and stir very gently to distribute. Top with artichokes and peppers, and cook without stirring, until most of the liquid is absorbed, 15 to 18 minutes. Reduce heat to medium-low, add reserved shrimp and mussels, tucking them down into the rice, and cook again without stirring, until mussels have opened and rice is just tender, 5 to 7 minutes more. (Discard any mussels that don&apos;t open.) </Typography> <Typography> Set aside off of the heat to let rest for 10 minutes, and then serve. </Typography> </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent> <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom> Word of the Day </Typography> <Typography variant=\"h5\" component=\"div\"> be{bull}nev{bull}o{bull}lent </Typography> <Typography sx={{ mb: 1.5 }} color=\"text.secondary\"> adjective </Typography> <Typography variant=\"body2\"> well meaning and kindly. <br /> {'\"a benevolent smile\"'} </Typography> </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent> <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom> Word of the Day </Typography> <Typography variant=\"h5\" component=\"div\"> be{bull}nev{bull}o{bull}lent </Typography> <Typography sx={{ mb: 1.5 }} color=\"text.secondary\"> adjective </Typography> <Typography variant=\"body2\"> well meaning and kindly. <br /> {'\"a benevolent smile\"'} </Typography> </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent> {loading ? ( <React.Fragment> <Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} /> <Skeleton animation=\"wave\" height={10} width=\"80%\" /> </React.Fragment> ) : ( <Typography variant=\"body2\" color=\"text.secondary\" component=\"p\"> { \"Why First Minister of Scotland Nicola Sturgeon thinks GDP is the wrong measure of a country's success:\" } </Typography> )} </CardContent>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CardHeader#CardHeader": [
      {
        "componentId": "@mui/material/CardHeader#CardHeader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "avatar": " loading ? ( <Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} /> ) : ( <Avatar alt=\"Ted talk\" src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\" /> ) ",
          "action": " loading ? null : ( <IconButton aria-label=\"settings\"> <MoreVertIcon /> </IconButton> ) ",
          "title": " loading ? ( <Skeleton animation=\"wave\" height={10} width=\"80%\" style={{ marginBottom: 6 }} /> ) : ( 'Ted' ) ",
          "subheader": " loading ? ( <Skeleton animation=\"wave\" height={10} width=\"40%\" /> ) : ( '5 hours ago' ) "
        },
        "snippet": "<CardHeader avatar={ loading ? ( <Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} /> ) : ( <Avatar alt=\"Ted talk\" src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\" /> ) } action={ loading ? null : ( <IconButton aria-label=\"settings\"> <MoreVertIcon /> </IconButton> ) } title={ loading ? ( <Skeleton animation=\"wave\" height={10} width=\"80%\" style={{ marginBottom: 6 }} /> ) : ( 'Ted' ) } subheader={ loading ? ( <Skeleton animation=\"wave\" height={10} width=\"40%\" /> ) : ( '5 hours ago' ) } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardHeader#CardHeader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ px: 2, py: 1 }",
          "avatar": " <Checkbox onClick={handleToggleAll(items)} checked={numberOfChecked(items) === items.length && items.length !== 0} indeterminate={ numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0 } disabled={items.length === 0} inputProps={{ 'aria-label': 'all items selected', }} /> ",
          "title": "title",
          "subheader": "`${numberOfChecked(items)}/${items.length} selected`"
        },
        "snippet": "<CardHeader sx={{ px: 2, py: 1 }} avatar={ <Checkbox onClick={handleToggleAll(items)} checked={numberOfChecked(items) === items.length && items.length !== 0} indeterminate={ numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0 } disabled={items.length === 0} inputProps={{ 'aria-label': 'all items selected', }} /> } title={title} subheader={`${numberOfChecked(items)}/${items.length} selected`} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardHeader#CardHeader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "avatar": " <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\"> R </Avatar> ",
          "action": " <IconButton aria-label=\"settings\"> <MoreVertIcon /> </IconButton> ",
          "title": "Shrimp and Chorizo Paella",
          "subheader": "September 14, 2016"
        },
        "snippet": "<CardHeader avatar={ <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\"> R </Avatar> } action={ <IconButton aria-label=\"settings\"> <MoreVertIcon /> </IconButton> } title=\"Shrimp and Chorizo Paella\" subheader=\"September 14, 2016\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CardMedia#CardMedia": [
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "height": "140",
          "image": "https://pi.tedcdn.com/r/talkstar-photos.s3.amazonaws.com/uploads/72bda89f-9bbf-4685-910a-2f151c4f3a8a/NicolaSturgeon_2019T-embed.jpg?w=512",
          "alt": "Nicola Sturgeon on a TED talk stage"
        },
        "snippet": "<CardMedia component=\"img\" height=\"140\" image=\"https://pi.tedcdn.com/r/talkstar-photos.s3.amazonaws.com/uploads/72bda89f-9bbf-4685-910a-2f151c4f3a8a/NicolaSturgeon_2019T-embed.jpg?w=512\" alt=\"Nicola Sturgeon on a TED talk stage\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "sx": "{ width: 151 }",
          "image": "/static/images/cards/live-from-space.jpg",
          "alt": "Live from space album cover"
        },
        "snippet": "<CardMedia component=\"img\" sx={{ width: 151 }} image=\"/static/images/cards/live-from-space.jpg\" alt=\"Live from space album cover\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "height": "140",
          "image": "/static/images/cards/contemplative-reptile.jpg",
          "alt": "green iguana"
        },
        "snippet": "<CardMedia component=\"img\" height=\"140\" image=\"/static/images/cards/contemplative-reptile.jpg\" alt=\"green iguana\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "alt": "green iguana",
          "height": "140",
          "image": "/static/images/cards/contemplative-reptile.jpg"
        },
        "snippet": "<CardMedia component=\"img\" alt=\"green iguana\" height=\"140\" image=\"/static/images/cards/contemplative-reptile.jpg\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "height": "194",
          "image": "/static/images/cards/paella.jpg",
          "alt": "Paella dish"
        },
        "snippet": "<CardMedia component=\"img\" height=\"194\" image=\"/static/images/cards/paella.jpg\" alt=\"Paella dish\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Checkbox#Checkbox": [
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ '&:hover': { bgcolor: 'transparent' }, }",
          "disableRipple": true,
          "color": "default",
          "checkedIcon": "<BpCheckedIcon />",
          "icon": "<BpIcon />",
          "inputProps": "{ 'aria-label': 'Checkbox demo' }"
        },
        "snippet": "<Checkbox sx={{ '&:hover': { bgcolor: 'transparent' }, }} disableRipple color=\"default\" checkedIcon={<BpCheckedIcon />} icon={<BpIcon />} inputProps={{ 'aria-label': 'Checkbox demo' }} {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClick": "handleToggleAll(items)",
          "checked": "numberOfChecked(items) === items.length && items.length !== 0",
          "indeterminate": " numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0 ",
          "disabled": "items.length === 0",
          "inputProps": "{ 'aria-label': 'all items selected', }"
        },
        "snippet": "<Checkbox onClick={handleToggleAll(items)} checked={numberOfChecked(items) === items.length && items.length !== 0} indeterminate={ numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0 } disabled={items.length === 0} inputProps={{ 'aria-label': 'all items selected', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "primary",
          "indeterminate": "numSelected > 0 && numSelected < rowCount",
          "checked": "rowCount > 0 && numSelected === rowCount",
          "onChange": "onSelectAllClick",
          "inputProps": "{ 'aria-label': 'select all desserts', }"
        },
        "snippet": "<Checkbox color=\"primary\" indeterminate={numSelected > 0 && numSelected < rowCount} checked={rowCount > 0 && numSelected === rowCount} onChange={onSelectAllClick} inputProps={{ 'aria-label': 'select all desserts', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "start",
          "checked": "checked.indexOf(value) !== -1",
          "tabIndex": "-1",
          "disableRipple": true,
          "inputProps": "{ 'aria-labelledby': labelId }"
        },
        "snippet": "<Checkbox edge=\"start\" checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "end",
          "onChange": "handleToggle(value)",
          "checked": "checked.indexOf(value) !== -1",
          "inputProps": "{ 'aria-labelledby': labelId }"
        },
        "snippet": "<Checkbox edge=\"end\" onChange={handleToggle(value)} checked={checked.indexOf(value) !== -1} inputProps={{ 'aria-labelledby': labelId }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Chip#Chip": [
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "size": "small",
          "avatar": "avatar",
          "label": "props.plan",
          "sx": "{ pl: 0.5, ...(props.plan === 'Premium' && { backgroundColor: theme.palette.mode === 'dark' ? alpha(yellow[900], 0.4) : yellow[50], borderColor: theme.palette.mode === 'dark' ? alpha(yellow[300], 0.4) : alpha(yellow[900], 0.4), }), ...(props.plan === 'Pro' && { backgroundColor: theme.palette.mode === 'dark' ? alpha(blue[600], 0.4) : blue[50], borderColor: theme.palette.mode === 'dark' ? alpha(blue[300], 0.4) : alpha(blue[900], 0.2), }), ...(props.plan === 'Community' && { backgroundColor: theme.palette.mode === 'dark' ? alpha(green[600], 0.4) : green[50], borderColor: theme.palette.mode === 'dark' ? alpha(green[300], 0.4) : alpha(green[900], 0.2), }), '& .MuiChip-label': { fontWeight: 'medium', fontSize: theme.typography.pxToRem(12), pl: 1, }, '& .MuiChip-avatar': { width: 16, }, }"
        },
        "snippet": "<Chip variant=\"outlined\" size=\"small\" avatar={avatar} label={props.plan} sx={{ pl: 0.5, ...(props.plan === 'Premium' && { backgroundColor: theme.palette.mode === 'dark' ? alpha(yellow[900], 0.4) : yellow[50], borderColor: theme.palette.mode === 'dark' ? alpha(yellow[300], 0.4) : alpha(yellow[900], 0.4), }), ...(props.plan === 'Pro' && { backgroundColor: theme.palette.mode === 'dark' ? alpha(blue[600], 0.4) : blue[50], borderColor: theme.palette.mode === 'dark' ? alpha(blue[300], 0.4) : alpha(blue[900], 0.2), }), ...(props.plan === 'Community' && { backgroundColor: theme.palette.mode === 'dark' ? alpha(green[600], 0.4) : green[50], borderColor: theme.palette.mode === 'dark' ? alpha(green[300], 0.4) : alpha(green[900], 0.2), }), '& .MuiChip-label': { fontWeight: 'medium', fontSize: theme.typography.pxToRem(12), pl: 1, }, '& .MuiChip-avatar': { width: 16, }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Custom delete icon",
          "onClick": "handleClick",
          "onDelete": "handleDelete",
          "deleteIcon": "<DeleteIcon />",
          "variant": "outlined"
        },
        "snippet": "<Chip label=\"Custom delete icon\" onClick={handleClick} onDelete={handleDelete} deleteIcon={<DeleteIcon />} variant=\"outlined\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Clickable Link",
          "component": "a",
          "href": "#basic-chip",
          "variant": "outlined",
          "clickable": true
        },
        "snippet": "<Chip label=\"Clickable Link\" component=\"a\" href=\"#basic-chip\" variant=\"outlined\" clickable />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "New",
          "color": "success",
          "size": "small",
          "sx": "(theme) => ({ ml: 1, p: 0.2, height: 'auto', fontSize: theme.typography.pxToRem(10), fontWeight: 'bold', textTransform: 'uppercase', letterSpacing: '.04rem', '& .MuiChip-label': { px: '4px', }, })"
        },
        "snippet": "<Chip label=\"New\" color=\"success\" size=\"small\" sx={(theme) => ({ ml: 1, p: 0.2, height: 'auto', fontSize: theme.typography.pxToRem(10), fontWeight: 'bold', textTransform: 'uppercase', letterSpacing: '.04rem', '& .MuiChip-label': { px: '4px', }, })} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Group by company and director",
          "onClick": "() => setRowGroupingModel(['company', 'director'])",
          "variant": "outlined",
          "color": "rowGroupingModelStr === 'company-director' ? 'primary' : undefined"
        },
        "snippet": "<Chip label=\"Group by company and director\" onClick={() => setRowGroupingModel(['company', 'director'])} variant=\"outlined\" color={rowGroupingModelStr === 'company-director' ? 'primary' : undefined} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CircularProgress#CircularProgress": [
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "indeterminate",
          "disableShrink": true,
          "sx": "{ color: (theme) => (theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8'), animationDuration: '550ms', position: 'absolute', left: 0, [`& .${circularProgressClasses.circle}`]: { strokeLinecap: 'round', }, }",
          "size": 40,
          "thickness": 4
        },
        "snippet": "<CircularProgress variant=\"indeterminate\" disableShrink sx={{ color: (theme) => (theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8'), animationDuration: '550ms', position: 'absolute', left: 0, [`& .${circularProgressClasses.circle}`]: { strokeLinecap: 'round', }, }} size={40} thickness={4} {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate",
          "sx": "{ color: (theme) => theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800], }",
          "size": 40,
          "thickness": 4,
          "value": 100
        },
        "snippet": "<CircularProgress variant=\"determinate\" sx={{ color: (theme) => theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800], }} size={40} thickness={4} {...props} value={100} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": 24,
          "sx": "{ color: green[500], position: 'absolute', top: '50%', left: '50%', marginTop: '-12px', marginLeft: '-12px', }"
        },
        "snippet": "<CircularProgress size={24} sx={{ color: green[500], position: 'absolute', top: '50%', left: '50%', marginTop: '-12px', marginLeft: '-12px', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": 68,
          "sx": "{ color: green[500], position: 'absolute', top: -6, left: -6, zIndex: 1, }"
        },
        "snippet": "<CircularProgress size={68} sx={{ color: green[500], position: 'absolute', top: -6, left: -6, zIndex: 1, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate",
          "value": "progress"
        },
        "snippet": "<CircularProgress variant=\"determinate\" value={progress} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Collapse#Collapse": [
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "li",
          "in": "open",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse component=\"li\" in={open} timeout=\"auto\" unmountOnExit> <List disablePadding> <ListItemLink sx={{ pl: 4 }} to=\"/inbox/important\" /> </List> </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "expanded",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse in={expanded} timeout=\"auto\" unmountOnExit> <CardContent> <Typography paragraph>Method:</Typography> <Typography paragraph> Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10 minutes. </Typography> <Typography paragraph> Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a large plate and set aside, leaving chicken and chorizo in the pan. Add pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook, stirring often until thickened and fragrant, about 10 minutes. Add saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil. </Typography> <Typography paragraph> Add rice and stir very gently to distribute. Top with artichokes and peppers, and cook without stirring, until most of the liquid is absorbed, 15 to 18 minutes. Reduce heat to medium-low, add reserved shrimp and mussels, tucking them down into the rice, and cook again without stirring, until mussels have opened and rice is just tender, 5 to 7 minutes more. (Discard any mussels that don&apos;t open.) </Typography> <Typography> Set aside off of the heat to let rest for 10 minutes, and then serve. </Typography> </CardContent> </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "open",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse in={open} timeout=\"auto\" unmountOnExit> <Box sx={{ margin: 1 }}> <Typography variant=\"h6\" gutterBottom component=\"div\"> History </Typography> <Table size=\"small\" aria-label=\"purchases\"> <TableHead> <TableRow> <TableCell>Date</TableCell> <TableCell>Customer</TableCell> <TableCell align=\"right\">Amount</TableCell> <TableCell align=\"right\">Total price ($)</TableCell> </TableRow> </TableHead> <TableBody> {row.history.map((historyRow) => ( <TableRow key={historyRow.date}> <TableCell component=\"th\" scope=\"row\"> {historyRow.date} </TableCell> <TableCell>{historyRow.customerId}</TableCell> <TableCell align=\"right\">{historyRow.amount}</TableCell> <TableCell align=\"right\"> {Math.round(historyRow.amount * row.price * 100) / 100} </TableCell> </TableRow> ))} </TableBody> </Table> </Box> </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "open",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse in={open} timeout=\"auto\" unmountOnExit> <List component=\"div\" disablePadding> <ListItemButton sx={{ pl: 4 }}> <ListItemIcon> <StarBorder /> </ListItemIcon> <ListItemText primary=\"Starred\" /> </ListItemButton> </List> </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "horizontal",
          "in": "checked",
          "collapsedSize": 40
        },
        "snippet": "<Collapse orientation=\"horizontal\" in={checked} collapsedSize={40}> {icon} </Collapse>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Container#Container": [
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "main",
          "sx": "{ pt: 3 }"
        },
        "snippet": "<Container component=\"main\" sx={{ pt: 3 }}> <Toolbar /> <Typography paragraph> Lorem ipsum dolor sit amet.</Typography> <Typography paragraph> Lorem ipsum dolor sit amet.</Typography> </Container>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxWidth": "xl"
        },
        "snippet": "<Container maxWidth=\"xl\"> <Toolbar disableGutters> <AdbIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} /> <Typography variant=\"h6\" noWrap component=\"a\" href=\"#app-bar-with-responsive-menu\" sx={{ mr: 2, display: { xs: 'none', md: 'flex' }, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }} > LOGO </Typography> <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}> <IconButton size=\"large\" aria-label=\"account of current user\" aria-controls=\"menu-appbar\" aria-haspopup=\"true\" onClick={handleOpenNavMenu} color=\"inherit\" > <MenuIcon /> </IconButton> <Menu id=\"menu-appbar\" anchorEl={anchorElNav} anchorOrigin={{ vertical: 'bottom', horizontal: 'left', }} keepMounted transformOrigin={{ vertical: 'top', horizontal: 'left', }} open={Boolean(anchorElNav)} onClose={handleCloseNavMenu} sx={{ display: { xs: 'block', md: 'none' }, }} > {pages.map((page) => ( <MenuItem key={page} onClick={handleCloseNavMenu}> <Typography textAlign=\"center\">{page}</Typography> </MenuItem> ))} </Menu> </Box> <AdbIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} /> <Typography variant=\"h5\" noWrap component=\"a\" href=\"#app-bar-with-responsive-menu\" sx={{ mr: 2, display: { xs: 'flex', md: 'none' }, flexGrow: 1, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }} > LOGO </Typography> <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}> {pages.map((page) => ( <Button key={page} onClick={handleCloseNavMenu} sx={{ my: 2, color: 'white', display: 'block' }} > {page} </Button> ))} </Box> <Box sx={{ flexGrow: 0 }}> <Tooltip title=\"Open settings\"> <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}> <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" /> </IconButton> </Tooltip> <Menu sx={{ mt: '45px' }} id=\"menu-appbar\" anchorEl={anchorElUser} anchorOrigin={{ vertical: 'top', horizontal: 'right', }} keepMounted transformOrigin={{ vertical: 'top', horizontal: 'right', }} open={Boolean(anchorElUser)} onClose={handleCloseUserMenu} > {settings.map((setting) => ( <MenuItem key={setting} onClick={handleCloseUserMenu}> <Typography textAlign=\"center\">{setting}</Typography> </MenuItem> ))} </Menu> </Box> </Toolbar> </Container>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxWidth": "sm"
        },
        "snippet": "<Container maxWidth=\"sm\"> <Box sx={{ bgcolor: '#cfe8fc', height: '100vh' }} /> </Container>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fixed": true
        },
        "snippet": "<Container fixed> <Box sx={{ bgcolor: '#cfe8fc', height: '100vh' }} /> </Container>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<Container> <Box sx={{ my: 2 }}> {[...new Array(12)] .map( () => `Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.`, ) .join('\\n')} </Box> </Container>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Dialog#Dialog": [
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "scroll": "scroll",
          "aria-labelledby": "scroll-dialog-title",
          "aria-describedby": "scroll-dialog-description"
        },
        "snippet": "<Dialog open={open} onClose={handleClose} scroll={scroll} aria-labelledby=\"scroll-dialog-title\" aria-describedby=\"scroll-dialog-description\" > <DialogTitle id=\"scroll-dialog-title\">Subscribe</DialogTitle> <DialogContent dividers={scroll === 'paper'}> <DialogContentText id=\"scroll-dialog-description\" ref={descriptionElementRef} tabIndex={-1} > {[...new Array(50)] .map( () => `Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.`, ) .join('\\n')} </DialogContentText> </DialogContent> <DialogActions> <Button onClick={handleClose}>Cancel</Button> <Button onClick={handleClose}>Subscribe</Button> </DialogActions> </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "TransitionComponent": "Transition",
          "keepMounted": true,
          "onClose": "handleClose",
          "aria-describedby": "alert-dialog-slide-description"
        },
        "snippet": "<Dialog open={open} TransitionComponent={Transition} keepMounted onClose={handleClose} aria-describedby=\"alert-dialog-slide-description\" > <DialogTitle>{\"Use Google's location service?\"}</DialogTitle> <DialogContent> <DialogContentText id=\"alert-dialog-slide-description\"> Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running. </DialogContentText> </DialogContent> <DialogActions> <Button onClick={handleClose}>Disagree</Button> <Button onClick={handleClose}>Agree</Button> </DialogActions> </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullWidth": "fullWidth",
          "maxWidth": "maxWidth",
          "open": "open",
          "onClose": "handleClose"
        },
        "snippet": "<Dialog fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose} > <DialogTitle>Optional sizes</DialogTitle> <DialogContent> <DialogContentText> You can set my maximum width and whether to adapt or not. </DialogContentText> <Box noValidate component=\"form\" sx={{ display: 'flex', flexDirection: 'column', m: 'auto', width: 'fit-content', }} > <FormControl sx={{ mt: 2, minWidth: 120 }}> <InputLabel htmlFor=\"max-width\">maxWidth</InputLabel> <Select autoFocus value={maxWidth} onChange={handleMaxWidthChange} label=\"maxWidth\" inputProps={{ name: 'max-width', id: 'max-width', }} > <MenuItem value={false as any}>false</MenuItem> <MenuItem value=\"xs\">xs</MenuItem> <MenuItem value=\"sm\">sm</MenuItem> <MenuItem value=\"md\">md</MenuItem> <MenuItem value=\"lg\">lg</MenuItem> <MenuItem value=\"xl\">xl</MenuItem> </Select> </FormControl> <FormControlLabel sx={{ mt: 1 }} control={ <Switch checked={fullWidth} onChange={handleFullWidthChange} /> } label=\"Full width\" /> </Box> </DialogContent> <DialogActions> <Button onClick={handleClose}>Close</Button> </DialogActions> </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullScreen": true,
          "open": "open",
          "onClose": "handleClose",
          "TransitionComponent": "Transition"
        },
        "snippet": "<Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition} > <AppBar sx={{ position: 'relative' }}> <Toolbar> <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\" > <CloseIcon /> </IconButton> <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\"> Sound </Typography> <Button autoFocus color=\"inherit\" onClick={handleClose}> save </Button> </Toolbar> </AppBar> <List> <ListItemButton> <ListItemText primary=\"Phone ringtone\" secondary=\"Titania\" /> </ListItemButton> <Divider /> <ListItemButton> <ListItemText primary=\"Default notification ringtone\" secondary=\"Tethys\" /> </ListItemButton> </List> </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }",
          "maxWidth": "xs",
          "TransitionProps": "{ onEntering: handleEntering }",
          "open": "open"
        },
        "snippet": "<Dialog sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }} maxWidth=\"xs\" TransitionProps={{ onEntering: handleEntering }} open={open} {...other} > <DialogTitle>Phone Ringtone</DialogTitle> <DialogContent dividers> <RadioGroup ref={radioGroupRef} aria-label=\"ringtone\" name=\"ringtone\" value={value} onChange={handleChange} > {options.map((option) => ( <FormControlLabel value={option} key={option} control={<Radio />} label={option} /> ))} </RadioGroup> </DialogContent> <DialogActions> <Button autoFocus onClick={handleCancel}> Cancel </Button> <Button onClick={handleOk}>Ok</Button> </DialogActions> </Dialog>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogActions#DialogActions": [
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "className": "className"
        },
        "snippet": "<DialogActions className={className}> <Button id={`picker-actions-${id}`} aria-controls={open ? 'basic-menu' : undefined} aria-haspopup=\"true\" aria-expanded={open ? 'true' : undefined} onClick={(event) => setAnchorEl(event.currentTarget)} > Actions </Button> <Menu id=\"basic-menu\" anchorEl={anchorEl} open={open} onClose={() => setAnchorEl(null)} MenuListProps={{ 'aria-labelledby': `picker-actions-${id}`, }} > {menuItems} </Menu> </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions> <Button onClick={() => setOpen(false)}>Cancel</Button> <Button onClick={() => { setOpen(false); deleteUser(); }} color=\"warning\" autoFocus > Delete </Button> </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions> <Button type=\"button\" onClick={() => setIsAddingView(false)}> Cancel </Button> <Button type=\"submit\" disabled={!isValid}> Create view </Button> </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions> <Button autoFocus onClick={handleClose}> Disagree </Button> <Button onClick={handleClose} autoFocus> Agree </Button> </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions> <Button onClick={confirm.cancel}>Cancel</Button> <Button onClick={confirm.confirm} autoFocus> Confirm </Button> </DialogActions>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogContent#DialogContent": [
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dividers": true
        },
        "snippet": "<DialogContent dividers> <Typography gutterBottom> Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. </Typography> <Typography gutterBottom> Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. </Typography> <Typography gutterBottom> Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla. </Typography> </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dividers": "scroll === 'paper'"
        },
        "snippet": "<DialogContent dividers={scroll === 'paper'}> <DialogContentText id=\"scroll-dialog-description\" ref={descriptionElementRef} tabIndex={-1} > {[...new Array(50)] .map( () => `Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.`, ) .join('\\n')} </DialogContentText> </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dividers": true
        },
        "snippet": "<DialogContent dividers> <RadioGroup ref={radioGroupRef} aria-label=\"ringtone\" name=\"ringtone\" value={value} onChange={handleChange} > {options.map((option) => ( <FormControlLabel value={option} key={option} control={<Radio />} label={option} /> ))} </RadioGroup> </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dividers": true
        },
        "snippet": "<DialogContent dividers> {`Pressing 'Yes' will change ${mutation}.`} </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogContent> <Box component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap' }}> <FormControl sx={{ m: 1, minWidth: 120 }}> <InputLabel htmlFor=\"demo-dialog-native\">Age</InputLabel> <Select native value={age} onChange={handleChange} input={<OutlinedInput label=\"Age\" id=\"demo-dialog-native\" />} > <option aria-label=\"None\" value=\"\" /> <option value={10}>Ten</option> <option value={20}>Twenty</option> <option value={30}>Thirty</option> </Select> </FormControl> <FormControl sx={{ m: 1, minWidth: 120 }}> <InputLabel id=\"demo-dialog-select-label\">Age</InputLabel> <Select labelId=\"demo-dialog-select-label\" id=\"demo-dialog-select\" value={age} onChange={handleChange} input={<OutlinedInput label=\"Age\" />} > <MenuItem value=\"\"> <em>None</em> </MenuItem> <MenuItem value={10}>Ten</MenuItem> <MenuItem value={20}>Twenty</MenuItem> <MenuItem value={30}>Thirty</MenuItem> </Select> </FormControl> </Box> </DialogContent>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogContentText#DialogContentText": [
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "scroll-dialog-description",
          "ref": "descriptionElementRef",
          "tabIndex": "-1"
        },
        "snippet": "<DialogContentText id=\"scroll-dialog-description\" ref={descriptionElementRef} tabIndex={-1} > {[...new Array(50)] .map( () => `Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.`, ) .join('\\n')} </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-slide-description"
        },
        "snippet": "<DialogContentText id=\"alert-dialog-slide-description\"> Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running. </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-description"
        },
        "snippet": "<DialogContentText id=\"alert-dialog-description\"> Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running. </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-description"
        },
        "snippet": "<DialogContentText id=\"alert-dialog-description\"> This will overwrite the selected cells. </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-description"
        },
        "snippet": "<DialogContentText id=\"alert-dialog-description\"> This action cannot be undone. </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogTitle#DialogTitle": [
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "style": "{ cursor: 'move' }",
          "id": "draggable-dialog-title"
        },
        "snippet": "<DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\"> Subscribe </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ m: 0, p: 2 }",
          "id": "customized-dialog-title"
        },
        "snippet": "<DialogTitle sx={{ m: 0, p: 2 }} id=\"customized-dialog-title\"> Modal title </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "responsive-dialog-title"
        },
        "snippet": "<DialogTitle id=\"responsive-dialog-title\"> {\"Use Google's location service?\"} </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-title"
        },
        "snippet": "<DialogTitle id=\"alert-dialog-title\"> {\"Use Google's location service?\"} </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-title"
        },
        "snippet": "<DialogTitle id=\"alert-dialog-title\"> {'Are you sure you want to paste?'} </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Divider#Divider": [
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "flexItem": true,
          "orientation": "vertical",
          "sx": "{ mx: 0.5, my: 1 }"
        },
        "snippet": "<Divider flexItem orientation=\"vertical\" sx={{ mx: 0.5, my: 1 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "variant": "middle",
          "flexItem": true
        },
        "snippet": "<Divider orientation=\"vertical\" variant=\"middle\" flexItem />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ height: 28, m: 0.5 }",
          "orientation": "vertical"
        },
        "snippet": "<Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "middle",
          "component": "li"
        },
        "snippet": "<Divider variant=\"middle\" component=\"li\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "flexItem": true
        },
        "snippet": "<Divider orientation=\"vertical\" flexItem />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Drawer#Drawer": [
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": "container",
          "variant": "temporary",
          "open": "mobileOpen",
          "onTransitionEnd": "handleDrawerTransitionEnd",
          "onClose": "handleDrawerClose",
          "ModalProps": "{ keepMounted: true, // Better open performance on mobile. }",
          "sx": "{ display: { xs: 'block', sm: 'none' }, '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth }, }"
        },
        "snippet": "<Drawer container={container} variant=\"temporary\" open={mobileOpen} onTransitionEnd={handleDrawerTransitionEnd} onClose={handleDrawerClose} ModalProps={{ keepMounted: true, // Better open performance on mobile. }} sx={{ display: { xs: 'block', sm: 'none' }, '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth }, }} > {drawer} </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": "container",
          "variant": "temporary",
          "open": "mobileOpen",
          "onClose": "handleDrawerToggle",
          "ModalProps": "{ keepMounted: true, // Better open performance on mobile. }",
          "sx": "{ display: { xs: 'block', sm: 'none' }, '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth }, }"
        },
        "snippet": "<Drawer container={container} variant=\"temporary\" open={mobileOpen} onClose={handleDrawerToggle} ModalProps={{ keepMounted: true, // Better open performance on mobile. }} sx={{ display: { xs: 'block', sm: 'none' }, '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth }, }} > {drawer} </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: drawerWidth, flexShrink: 0, '& .MuiDrawer-paper': { width: drawerWidth, boxSizing: 'border-box', }, }",
          "variant": "persistent",
          "anchor": "left",
          "open": "open"
        },
        "snippet": "<Drawer sx={{ width: drawerWidth, flexShrink: 0, '& .MuiDrawer-paper': { width: drawerWidth, boxSizing: 'border-box', }, }} variant=\"persistent\" anchor=\"left\" open={open} > <DrawerHeader> <IconButton onClick={handleDrawerClose}> {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />} </IconButton> </DrawerHeader> <Divider /> <List> {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> <Divider /> <List> {['All mail', 'Trash', 'Spam'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: drawerWidth, flexShrink: 0, '& .MuiDrawer-paper': { width: drawerWidth, }, }",
          "variant": "persistent",
          "anchor": "right",
          "open": "open"
        },
        "snippet": "<Drawer sx={{ width: drawerWidth, flexShrink: 0, '& .MuiDrawer-paper': { width: drawerWidth, }, }} variant=\"persistent\" anchor=\"right\" open={open} > <DrawerHeader> <IconButton onClick={handleDrawerClose}> {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />} </IconButton> </DrawerHeader> <Divider /> <List> {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> <Divider /> <List> {['All mail', 'Trash', 'Spam'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: drawerWidth, flexShrink: 0, '& .MuiDrawer-paper': { width: drawerWidth, boxSizing: 'border-box', }, }",
          "variant": "permanent",
          "anchor": "right"
        },
        "snippet": "<Drawer sx={{ width: drawerWidth, flexShrink: 0, '& .MuiDrawer-paper': { width: drawerWidth, boxSizing: 'border-box', }, }} variant=\"permanent\" anchor=\"right\" > <Toolbar /> <Divider /> <List> {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> <Divider /> <List> {['All mail', 'Trash', 'Spam'].map((text, index) => ( <ListItem key={text} disablePadding> <ListItemButton> <ListItemIcon> {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} /> </ListItemButton> </ListItem> ))} </List> </Drawer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Fab#Fab": [
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "save",
          "color": "primary",
          "sx": "buttonSx",
          "onClick": "handleButtonClick"
        },
        "snippet": "<Fab aria-label=\"save\" color=\"primary\" sx={buttonSx} onClick={handleButtonClick} > {success ? <CheckIcon /> : <SaveIcon />} </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "extended",
          "size": "medium",
          "color": "primary"
        },
        "snippet": "<Fab variant=\"extended\" size=\"medium\" color=\"primary\"> <NavigationIcon sx={{ mr: 1 }} /> Extended </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "extended",
          "size": "small",
          "color": "primary"
        },
        "snippet": "<Fab variant=\"extended\" size=\"small\" color=\"primary\"> <NavigationIcon sx={{ mr: 1 }} /> Extended </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "fab.sx",
          "aria-label": "fab.label",
          "color": "fab.color"
        },
        "snippet": "<Fab sx={fab.sx} aria-label={fab.label} color={fab.color}> {fab.icon} </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "medium",
          "color": "secondary",
          "aria-label": "add"
        },
        "snippet": "<Fab size=\"medium\" color=\"secondary\" aria-label=\"add\"> <AddIcon /> </Fab>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Fade#Fade": [
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "query === 'progress'",
          "style": "{ transitionDelay: query === 'progress' ? '800ms' : '0ms', }",
          "unmountOnExit": true
        },
        "snippet": "<Fade in={query === 'progress'} style={{ transitionDelay: query === 'progress' ? '800ms' : '0ms', }} unmountOnExit > <CircularProgress /> </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "loading",
          "style": "{ transitionDelay: loading ? '800ms' : '0ms', }",
          "unmountOnExit": true
        },
        "snippet": "<Fade in={loading} style={{ transitionDelay: loading ? '800ms' : '0ms', }} unmountOnExit > <CircularProgress /> </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "appear": false,
          "in": "bannerOpen"
        },
        "snippet": "<Fade appear={false} in={bannerOpen}> <Paper role=\"dialog\" aria-modal=\"false\" aria-label=\"Cookie banner\" square variant=\"outlined\" tabIndex={-1} sx={{ position: 'fixed', bottom: 0, left: 0, right: 0, m: 0, p: 2, borderWidth: 0, borderTopWidth: 1, }} > <Stack direction={{ xs: 'column', sm: 'row' }} justifyContent=\"space-between\" gap={2} > <Box sx={{ flexShrink: 1, alignSelf: { xs: 'flex-start', sm: 'center' }, }} > <Typography fontWeight=\"bold\">This website uses cookies</Typography> <Typography variant=\"body2\"> example.com relies on cookies to improve your experience. </Typography> </Box> <Stack gap={2} direction={{ xs: 'row-reverse', sm: 'row', }} sx={{ flexShrink: 0, alignSelf: { xs: 'flex-end', sm: 'center' }, }} > <Button size=\"small\" onClick={closeBanner} variant=\"contained\"> Allow all </Button> <Button size=\"small\" onClick={closeBanner}> Reject all </Button> </Stack> </Stack> </Paper> </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "timeout": 350
        },
        "snippet": "<Fade {...TransitionProps} timeout={350}> <Paper> <MenuList autoFocusItem={state.isMenuOpened} id=\"custom-view-menu\" aria-labelledby=\"custom-view-button\" onKeyDown={handleListKeyDown} > {Object.entries(state.views).map(([viewId, view]) => ( <ViewListItem key={viewId} view={view} viewId={viewId} selected={viewId === state.activeViewId} onDelete={handleDeleteView} onSelect={handleSetActiveView} /> ))} </MenuList> </Paper> </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "open"
        },
        "snippet": "<Fade in={open}> <Box sx={style}> <Typography id=\"transition-modal-title\" variant=\"h6\" component=\"h2\"> Text in a modal </Typography> <Typography id=\"transition-modal-description\" sx={{ mt: 2 }}> Duis mollis, est non commodo luctus, nisi erat porttitor ligula. </Typography> </Box> </Fade>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FilledInput#FilledInput": [
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-adornment-weight",
          "endAdornment": "<InputAdornment position=\"end\">kg</InputAdornment>",
          "aria-describedby": "filled-weight-helper-text",
          "inputProps": "{ 'aria-label': 'weight', }"
        },
        "snippet": "<FilledInput id=\"filled-adornment-weight\" endAdornment={<InputAdornment position=\"end\">kg</InputAdornment>} aria-describedby=\"filled-weight-helper-text\" inputProps={{ 'aria-label': 'weight', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-adornment-password",
          "type": "showPassword ? 'text' : 'password'",
          "endAdornment": " <InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} edge=\"end\" > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment> "
        },
        "snippet": "<FilledInput id=\"filled-adornment-password\" type={showPassword ? 'text' : 'password'} endAdornment={ <InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} edge=\"end\" > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-adornment-amount",
          "startAdornment": "<InputAdornment position=\"start\">$</InputAdornment>"
        },
        "snippet": "<FilledInput id=\"filled-adornment-amount\" startAdornment={<InputAdornment position=\"start\">$</InputAdornment>} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-filled",
          "defaultValue": "Composed TextField"
        },
        "snippet": "<FilledInput id=\"component-filled\" defaultValue=\"Composed TextField\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormControl#FormControl": [
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "required": true,
          "error": "error",
          "component": "fieldset",
          "sx": "{ m: 3 }",
          "variant": "standard"
        },
        "snippet": "<FormControl required error={error} component=\"fieldset\" sx={{ m: 3 }} variant=\"standard\" > <FormLabel component=\"legend\">Pick two</FormLabel> <FormGroup> <FormControlLabel control={ <Checkbox checked={gilad} onChange={handleChange} name=\"gilad\" /> } label=\"Gilad Gray\" /> <FormControlLabel control={ <Checkbox checked={jason} onChange={handleChange} name=\"jason\" /> } label=\"Jason Killian\" /> <FormControlLabel control={ <Checkbox checked={antoine} onChange={handleChange} name=\"antoine\" /> } label=\"Antoine Llorca\" /> </FormGroup> <FormHelperText>You can display an error</FormHelperText> </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ m: 3 }",
          "component": "fieldset",
          "variant": "standard"
        },
        "snippet": "<FormControl sx={{ m: 3 }} component=\"fieldset\" variant=\"standard\"> <FormLabel component=\"legend\">Assign responsibility</FormLabel> <FormGroup> <FormControlLabel control={ <Checkbox checked={gilad} onChange={handleChange} name=\"gilad\" /> } label=\"Gilad Gray\" /> <FormControlLabel control={ <Checkbox checked={jason} onChange={handleChange} name=\"jason\" /> } label=\"Jason Killian\" /> <FormControlLabel control={ <Checkbox checked={antoine} onChange={handleChange} name=\"antoine\" /> } label=\"Antoine Llorca\" /> </FormGroup> <FormHelperText>Be careful</FormHelperText> </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ m: 3 }",
          "error": "error",
          "variant": "standard"
        },
        "snippet": "<FormControl sx={{ m: 3 }} error={error} variant=\"standard\"> <FormLabel id=\"demo-error-radios\">Pop quiz: MUI is...</FormLabel> <RadioGroup aria-labelledby=\"demo-error-radios\" name=\"quiz\" value={value} onChange={handleRadioChange} > <FormControlLabel value=\"best\" control={<Radio />} label=\"The best!\" /> <FormControlLabel value=\"worst\" control={<Radio />} label=\"The worst.\" /> </RadioGroup> <FormHelperText>{helperText}</FormHelperText> <Button sx={{ mt: 1, mr: 1 }} type=\"submit\" variant=\"outlined\"> Check Answer </Button> </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "standard",
          "sx": "{ m: 1, minWidth: 120 }",
          "fullWidth": true
        },
        "snippet": "<FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }} fullWidth> <InputLabel id=\"select-is-admin-label\">{label}</InputLabel> <Select labelId=\"select-is-admin-label\" id=\"select-is-admin\" value={value} onChange={handleChange} label={label} > <MenuItem value=\"\"> <em>None</em> </MenuItem> <MenuItem value=\"true\">True</MenuItem> <MenuItem value=\"false\">False</MenuItem> </Select> </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullWidth": true,
          "sx": "{ m: 1 }",
          "variant": "filled"
        },
        "snippet": "<FormControl fullWidth sx={{ m: 1 }} variant=\"filled\"> <InputLabel htmlFor=\"filled-adornment-amount\">Amount</InputLabel> <FilledInput id=\"filled-adornment-amount\" startAdornment={<InputAdornment position=\"start\">$</InputAdornment>} /> </FormControl>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormControlLabel#FormControlLabel": [
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "hasNegativeValue",
          "onChange": "(event) => setHasNegativeValue((event.target as any).checked)",
          "control": "<Switch color=\"primary\" />",
          "label": "data has negative value",
          "labelPlacement": "end"
        },
        "snippet": "<FormControlLabel checked={hasNegativeValue} onChange={(event) => setHasNegativeValue((event.target as any).checked)} control={<Switch color=\"primary\" />} label=\"data has negative value\" labelPlacement=\"end\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "filterModel.quickFilterExcludeHiddenColumns",
          "onChange": "toggleExcludeHiddenColumns",
          "control": "<Switch color=\"primary\" />",
          "label": "Exclude hidden columns"
        },
        "snippet": "<FormControlLabel checked={filterModel.quickFilterExcludeHiddenColumns} onChange={toggleExcludeHiddenColumns} control={<Switch color=\"primary\" />} label=\"Exclude hidden columns\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "isResponsive",
          "control": " <Checkbox onChange={(event) => setIsResponsive(event.target.checked)} /> ",
          "label": "Use responsive container",
          "labelPlacement": "end"
        },
        "snippet": "<FormControlLabel checked={isResponsive} control={ <Checkbox onChange={(event) => setIsResponsive(event.target.checked)} /> } label=\"Use responsive container\" labelPlacement=\"end\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "ignoreDiacritics",
          "onChange": "(event) => setIgnoreDiacritics((event.target as HTMLInputElement).checked) ",
          "control": "<Switch />",
          "label": "Ignore diacritics"
        },
        "snippet": "<FormControlLabel checked={ignoreDiacritics} onChange={(event) => setIgnoreDiacritics((event.target as HTMLInputElement).checked) } control={<Switch />} label=\"Ignore diacritics\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "undefinedRadius",
          "control": " <Checkbox onChange={(event) => setUndefinedRadius(event.target.checked)} /> ",
          "label": "undefined radius",
          "labelPlacement": "end"
        },
        "snippet": "<FormControlLabel checked={undefinedRadius} control={ <Checkbox onChange={(event) => setUndefinedRadius(event.target.checked)} /> } label=\"undefined radius\" labelPlacement=\"end\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormGroup#FormGroup": [
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "className": "MuiFormGroup-options",
          "row": true
        },
        "snippet": "<FormGroup className=\"MuiFormGroup-options\" row> <FormControl variant=\"standard\"> <InputLabel>Dataset</InputLabel> <Select<GridDataType> value={typeState} onChange={handleDatasetChange}> <MenuItem value=\"Employee\">Employee</MenuItem> <MenuItem value=\"Commodity\">Commodity</MenuItem> </Select> </FormControl> <FormControl variant=\"standard\"> <InputLabel>Rows</InputLabel> <Select<number> value={sizeState} onChange={handleSizeChange}> <MenuItem value={100}>100</MenuItem> <MenuItem value={1000}>{Number(1000).toLocaleString()}</MenuItem> <MenuItem value={10000}>{Number(10000).toLocaleString()}</MenuItem> <MenuItem value={100000}>{Number(100000).toLocaleString()}</MenuItem> </Select> </FormControl> <FormControl variant=\"standard\"> <InputLabel>Page Size</InputLabel> <Select<number> value={selectedPaginationValue} onChange={handlePaginationChange} > <MenuItem value={-1}>off</MenuItem> <MenuItem value={0}>auto</MenuItem> <MenuItem value={25}>25</MenuItem> <MenuItem value={100}>100</MenuItem> <MenuItem value={1000}>{Number(1000).toLocaleString()}</MenuItem> </Select> </FormControl> <FormControl variant=\"standard\"> <InputLabel>Theme</InputLabel> <Select value={activeTheme} onChange={handleThemeChange}> <MenuItem value=\"default\">Default Theme</MenuItem> <MenuItem value=\"ant\">Ant Design</MenuItem> </Select> </FormControl> <Button size=\"small\" variant=\"outlined\" onClick={handleApplyChanges}> <KeyboardArrowRightIcon fontSize=\"small\" /> Apply </Button> </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "position",
          "row": true
        },
        "snippet": "<FormGroup aria-label=\"position\" row> <FormControlLabel value=\"top\" control={<Switch color=\"primary\" />} label=\"Top\" labelPlacement=\"top\" /> <FormControlLabel value=\"start\" control={<Switch color=\"primary\" />} label=\"Start\" labelPlacement=\"start\" /> <FormControlLabel value=\"bottom\" control={<Switch color=\"primary\" />} label=\"Bottom\" labelPlacement=\"bottom\" /> <FormControlLabel value=\"end\" control={<Switch color=\"primary\" />} label=\"End\" labelPlacement=\"end\" /> </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "position",
          "row": true
        },
        "snippet": "<FormGroup aria-label=\"position\" row> <FormControlLabel value=\"top\" control={<Checkbox />} label=\"Top\" labelPlacement=\"top\" /> <FormControlLabel value=\"start\" control={<Checkbox />} label=\"Start\" labelPlacement=\"start\" /> <FormControlLabel value=\"bottom\" control={<Checkbox />} label=\"Bottom\" labelPlacement=\"bottom\" /> <FormControlLabel value=\"end\" control={<Checkbox />} label=\"End\" labelPlacement=\"end\" /> </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true
        },
        "snippet": "<FormGroup row> <FormControlLabel control={ <Checkbox checked={dense} onChange={(event) => setDense(event.target.checked)} /> } label=\"Enable dense\" /> <FormControlLabel control={ <Checkbox checked={secondary} onChange={(event) => setSecondary(event.target.checked)} /> } label=\"Enable secondary text\" /> </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<FormGroup> <FormControlLabel control={<MaterialUISwitch sx={{ m: 1 }} defaultChecked />} label=\"MUI switch\" /> <FormControlLabel control={<Android12Switch defaultChecked />} label=\"Android 12\" /> <FormControlLabel control={<IOSSwitch sx={{ m: 1 }} defaultChecked />} label=\"iOS style\" /> <Stack direction=\"row\" spacing={1} alignItems=\"center\"> <Typography>Off</Typography> <AntSwitch defaultChecked inputProps={{ 'aria-label': 'ant design' }} /> <Typography>On</Typography> </Stack> </FormGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormHelperText#FormHelperText": [
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-helper-text"
        },
        "snippet": "<FormHelperText id=\"component-helper-text\"> Some important helper text </FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-weight-helper-text"
        },
        "snippet": "<FormHelperText id=\"outlined-weight-helper-text\">Weight</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "standard-weight-helper-text"
        },
        "snippet": "<FormHelperText id=\"standard-weight-helper-text\">Weight</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-weight-helper-text"
        },
        "snippet": "<FormHelperText id=\"filled-weight-helper-text\">Weight</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-error-text"
        },
        "snippet": "<FormHelperText id=\"component-error-text\">Error</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormLabel#FormLabel": [
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "label-placement-radio-buttons-group-label"
        },
        "snippet": "<FormLabel id=\"label-placement-radio-buttons-group-label\"> tickLabelPlacement </FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "tick-placement-radio-buttons-group-label"
        },
        "snippet": "<FormLabel id=\"tick-placement-radio-buttons-group-label\"> tickPlacement </FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-cursor-pagination-buttons-group-label"
        },
        "snippet": "<FormLabel id=\"demo-cursor-pagination-buttons-group-label\"> Row count </FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-form-control-label-placement"
        },
        "snippet": "<FormLabel id=\"demo-form-control-label-placement\">Label placement</FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-controlled-radio-buttons-group"
        },
        "snippet": "<FormLabel id=\"demo-controlled-radio-buttons-group\">Gender</FormLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Grid#Grid": [
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ height: 300, pb: 2 }",
          "container": true,
          "spacing": 2,
          "alignItems": "alignItems",
          "direction": "direction",
          "justifyContent": "justifyContent"
        },
        "snippet": "<Grid sx={{ height: 300, pb: 2 }} container spacing={2} alignItems={alignItems} direction={direction} justifyContent={justifyContent} > {[0, 1, 2].map((value) => ( <Grid key={value} item> <Paper sx={{ p: 2, backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#1A2027' : '#fff', height: '100%', color: 'text.secondary', pt: `${(value + 1) * 10}px`, pb: `${(value + 1) * 10}px`, }} > {`Cell ${value + 1}`} </Paper> </Grid> ))} </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "item": true,
          "xs": true,
          "container": true,
          "direction": "column",
          "spacing": 2
        },
        "snippet": "<Grid item xs container direction=\"column\" spacing={2}> <Grid item xs> <Typography gutterBottom variant=\"subtitle1\" component=\"div\"> Standard license </Typography> <Typography variant=\"body2\" gutterBottom> Full resolution 1920x1080 • JPEG </Typography> <Typography variant=\"body2\" color=\"text.secondary\"> ID: 1030114 </Typography> </Grid> <Grid item> <Typography sx={{ cursor: 'pointer' }} variant=\"body2\"> Remove </Typography> </Grid> </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "item": true,
          "container": true,
          "xs": 6,
          "alignItems": "flex-end",
          "direction": "column"
        },
        "snippet": "<Grid item container xs={6} alignItems=\"flex-end\" direction=\"column\"> <Grid item> <Button onClick={handleClick('right-start')}>right-start</Button> </Grid> <Grid item> <Button onClick={handleClick('right')}>right</Button> </Grid> <Grid item> <Button onClick={handleClick('right-end')}>right-end</Button> </Grid> </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": true,
          "columns": "{ xs: 1, lg: 2 }",
          "spacing": 4,
          "alignItems": "center",
          "justifyContent": "center"
        },
        "snippet": "<Grid container columns={{ xs: 1, lg: 2 }} spacing={4} alignItems=\"center\" justifyContent=\"center\" > <Grid item> <DateCalendar defaultValue={today} disableFuture /> </Grid> <Grid item> <TimeClock defaultValue={twoPM} maxTime={threePM} /> </Grid> </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "item": true,
          "xs": 2,
          "sm": 4,
          "md": 4,
          "key": "index"
        },
        "snippet": "<Grid item xs={2} sm={4} md={4} key={index}> <Item>xs=2</Item> </Grid>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Grow#Grow": [
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked",
          "style": "{ transformOrigin: '0 0 0' }"
        },
        "snippet": "<Grow in={checked} style={{ transformOrigin: '0 0 0' }} {...(checked ? { timeout: 1000 } : {})} > {icon} </Grow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "style": "{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom', }"
        },
        "snippet": "<Grow {...TransitionProps} style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom', }} > <Paper> <ClickAwayListener onClickAway={handleClose}> <MenuList id=\"split-button-menu\" autoFocusItem> {options.map((option, index) => ( <MenuItem key={option} disabled={index === 2} selected={index === selectedIndex} onClick={(event) => handleMenuItemClick(event, index)} > {option} </MenuItem> ))} </MenuList> </ClickAwayListener> </Paper> </Grow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked"
        },
        "snippet": "<Grow in={checked}>{icon}</Grow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<Grow {...props} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Icon#Icon": [
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ ...(isDarkMode && { filter: 'invert(1)' }) }",
          "baseClassName": "material-icons-two-tone"
        },
        "snippet": "<Icon sx={{ ...(isDarkMode && { filter: 'invert(1)' }) }} baseClassName=\"material-icons-two-tone\" > add_circle </Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ color: green[500] }"
        },
        "snippet": "<Icon sx={{ color: green[500] }}>add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ fontSize: 30 }"
        },
        "snippet": "<Icon sx={{ fontSize: 30 }}>add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fontSize": "small"
        },
        "snippet": "<Icon fontSize=\"small\">add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "primary"
        },
        "snippet": "<Icon color=\"primary\">add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/IconButton#IconButton": [
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "large",
          "edge": "end",
          "aria-label": "account of current user",
          "aria-controls": "menuId",
          "aria-haspopup": "true",
          "onClick": "handleProfileMenuOpen",
          "color": "inherit"
        },
        "snippet": "<IconButton size=\"large\" edge=\"end\" aria-label=\"account of current user\" aria-controls={menuId} aria-haspopup=\"true\" onClick={handleProfileMenuOpen} color=\"inherit\" > <AccountCircle /> </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClick": "handleClick",
          "size": "small",
          "sx": "{ ml: 2 }",
          "aria-controls": "open ? 'account-menu' : undefined",
          "aria-haspopup": "true",
          "aria-expanded": "open ? 'true' : undefined"
        },
        "snippet": "<IconButton onClick={handleClick} size=\"small\" sx={{ ml: 2 }} aria-controls={open ? 'account-menu' : undefined} aria-haspopup=\"true\" aria-expanded={open ? 'true' : undefined} > <Avatar sx={{ width: 32, height: 32 }}>M</Avatar> </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "more",
          "id": "long-button",
          "aria-controls": "open ? 'long-menu' : undefined",
          "aria-expanded": "open ? 'true' : undefined",
          "aria-haspopup": "true",
          "onClick": "handleClick"
        },
        "snippet": "<IconButton aria-label=\"more\" id=\"long-button\" aria-controls={open ? 'long-menu' : undefined} aria-expanded={open ? 'true' : undefined} aria-haspopup=\"true\" onClick={handleClick} > <MoreVertIcon /> </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "large",
          "aria-label": "account of current user",
          "aria-controls": "menu-appbar",
          "aria-haspopup": "true",
          "onClick": "handleOpenNavMenu",
          "color": "inherit"
        },
        "snippet": "<IconButton size=\"large\" aria-label=\"account of current user\" aria-controls=\"menu-appbar\" aria-haspopup=\"true\" onClick={handleOpenNavMenu} color=\"inherit\" > <MenuIcon /> </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "large",
          "aria-label": "account of current user",
          "aria-controls": "menu-appbar",
          "aria-haspopup": "true",
          "onClick": "handleMenu",
          "color": "inherit"
        },
        "snippet": "<IconButton size=\"large\" aria-label=\"account of current user\" aria-controls=\"menu-appbar\" aria-haspopup=\"true\" onClick={handleMenu} color=\"inherit\" > <AccountCircle /> </IconButton>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ImageList#ImageList": [
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500, height: 450 }",
          "variant": "woven",
          "cols": 3,
          "gap": 8
        },
        "snippet": "<ImageList sx={{ width: 500, height: 450 }} variant=\"woven\" cols={3} gap={8}> {itemData.map((item) => ( <ImageListItem key={item.img}> <img srcSet={`${item.img}?w=161&fit=crop&auto=format&dpr=2 2x`} src={`${item.img}?w=161&fit=crop&auto=format`} alt={item.title} loading=\"lazy\" /> </ImageListItem> ))} </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500, height: 450 }",
          "variant": "quilted",
          "cols": 4,
          "rowHeight": 121
        },
        "snippet": "<ImageList sx={{ width: 500, height: 450 }} variant=\"quilted\" cols={4} rowHeight={121} > {itemData.map((item) => ( <ImageListItem key={item.img} cols={item.cols || 1} rows={item.rows || 1}> <img {...srcset(item.img, 121, item.rows, item.cols)} alt={item.title} loading=\"lazy\" /> </ImageListItem> ))} </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500, height: 450, // Promote the list into its own layer in Chrome. This costs memory, but helps keeping high FPS. transform: 'translateZ(0)', }",
          "rowHeight": 200,
          "gap": 1
        },
        "snippet": "<ImageList sx={{ width: 500, height: 450, // Promote the list into its own layer in Chrome. This costs memory, but helps keeping high FPS. transform: 'translateZ(0)', }} rowHeight={200} gap={1} > {itemData.map((item) => { const cols = item.featured ? 2 : 1; const rows = item.featured ? 2 : 1; return ( <ImageListItem key={item.img} cols={cols} rows={rows}> <img {...srcset(item.img, 250, 200, rows, cols)} alt={item.title} loading=\"lazy\" /> <ImageListItemBar sx={{ background: 'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' + 'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)', }} title={item.title} position=\"top\" actionIcon={ <IconButton sx={{ color: 'white' }} aria-label={`star ${item.title}`} > <StarBorderIcon /> </IconButton> } actionPosition=\"left\" /> </ImageListItem> ); })} </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "masonry",
          "cols": 3,
          "gap": 8
        },
        "snippet": "<ImageList variant=\"masonry\" cols={3} gap={8}> {itemData.map((item) => ( <ImageListItem key={item.img}> <img srcSet={`${item.img}?w=248&fit=crop&auto=format&dpr=2 2x`} src={`${item.img}?w=248&fit=crop&auto=format`} alt={item.title} loading=\"lazy\" /> <ImageListItemBar position=\"below\" title={item.author} /> </ImageListItem> ))} </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500, height: 450 }",
          "cols": 3,
          "rowHeight": 164
        },
        "snippet": "<ImageList sx={{ width: 500, height: 450 }} cols={3} rowHeight={164}> {itemData.map((item) => ( <ImageListItem key={item.img}> <img srcSet={`${item.img}?w=164&h=164&fit=crop&auto=format&dpr=2 2x`} src={`${item.img}?w=164&h=164&fit=crop&auto=format`} alt={item.title} loading=\"lazy\" /> </ImageListItem> ))} </ImageList>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ImageListItem#ImageListItem": [
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img",
          "cols": "cols",
          "rows": "rows"
        },
        "snippet": "<ImageListItem key={item.img} cols={cols} rows={rows}> <img {...srcset(item.img, 250, 200, rows, cols)} alt={item.title} loading=\"lazy\" /> <ImageListItemBar sx={{ background: 'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' + 'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)', }} title={item.title} position=\"top\" actionIcon={ <IconButton sx={{ color: 'white' }} aria-label={`star ${item.title}`} > <StarBorderIcon /> </IconButton> } actionPosition=\"left\" /> </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img",
          "cols": "item.cols || 1",
          "rows": "item.rows || 1"
        },
        "snippet": "<ImageListItem key={item.img} cols={item.cols || 1} rows={item.rows || 1}> <img {...srcset(item.img, 121, item.rows, item.cols)} alt={item.title} loading=\"lazy\" /> </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "Subheader",
          "cols": 2
        },
        "snippet": "<ImageListItem key=\"Subheader\" cols={2}> <ListSubheader component=\"div\">December</ListSubheader> </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img"
        },
        "snippet": "<ImageListItem key={item.img}> <img srcSet={`${item.img}?w=248&fit=crop&auto=format&dpr=2 2x`} src={`${item.img}?w=248&fit=crop&auto=format`} alt={item.title} loading=\"lazy\" /> <ImageListItemBar title={item.title} subtitle={item.author} actionIcon={ <IconButton sx={{ color: 'rgba(255, 255, 255, 0.54)' }} aria-label={`info about ${item.title}`} > <InfoIcon /> </IconButton> } /> </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img"
        },
        "snippet": "<ImageListItem key={item.img}> <img srcSet={`${item.img}?w=248&fit=crop&auto=format&dpr=2 2x`} src={`${item.img}?w=248&fit=crop&auto=format`} alt={item.title} loading=\"lazy\" /> <ImageListItemBar title={item.title} subtitle={<span>by: {item.author}</span>} position=\"below\" /> </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ImageListItemBar#ImageListItemBar": [
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ background: 'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' + 'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)', }",
          "title": "item.title",
          "position": "top",
          "actionIcon": " <IconButton sx={{ color: 'white' }} aria-label={`star ${item.title}`} > <StarBorderIcon /> </IconButton> ",
          "actionPosition": "left"
        },
        "snippet": "<ImageListItemBar sx={{ background: 'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' + 'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)', }} title={item.title} position=\"top\" actionIcon={ <IconButton sx={{ color: 'white' }} aria-label={`star ${item.title}`} > <StarBorderIcon /> </IconButton> } actionPosition=\"left\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "item.title",
          "subtitle": "item.author",
          "actionIcon": " <IconButton sx={{ color: 'rgba(255, 255, 255, 0.54)' }} aria-label={`info about ${item.title}`} > <InfoIcon /> </IconButton> "
        },
        "snippet": "<ImageListItemBar title={item.title} subtitle={item.author} actionIcon={ <IconButton sx={{ color: 'rgba(255, 255, 255, 0.54)' }} aria-label={`info about ${item.title}`} > <InfoIcon /> </IconButton> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "item.title",
          "subtitle": "<span>by: {item.author}</span>",
          "position": "below"
        },
        "snippet": "<ImageListItemBar title={item.title} subtitle={<span>by: {item.author}</span>} position=\"below\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "below",
          "title": "item.author"
        },
        "snippet": "<ImageListItemBar position=\"below\" title={item.author} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Input#Input": [
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "values.textmask",
          "onChange": "handleChange",
          "name": "textmask",
          "id": "formatted-text-mask-input",
          "inputComponent": "TextMaskCustom as any"
        },
        "snippet": "<Input value={values.textmask} onChange={handleChange} name=\"textmask\" id=\"formatted-text-mask-input\" inputComponent={TextMaskCustom as any} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "standard-adornment-weight",
          "endAdornment": "<InputAdornment position=\"end\">kg</InputAdornment>",
          "aria-describedby": "standard-weight-helper-text",
          "inputProps": "{ 'aria-label': 'weight', }"
        },
        "snippet": "<Input id=\"standard-adornment-weight\" endAdornment={<InputAdornment position=\"end\">kg</InputAdornment>} aria-describedby=\"standard-weight-helper-text\" inputProps={{ 'aria-label': 'weight', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "placeholder": "Placeholder...",
          "disabled": true,
          "defaultValue": "Disabled",
          "inputProps": "ariaLabel"
        },
        "snippet": "<Input placeholder=\"Placeholder...\" disabled defaultValue=\"Disabled\" inputProps={ariaLabel} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "placeholder": "Placeholder...",
          "defaultValue": "Error",
          "error": true,
          "inputProps": "ariaLabel"
        },
        "snippet": "<Input placeholder=\"Placeholder...\" defaultValue=\"Error\" error inputProps={ariaLabel} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "standard-adornment-password",
          "type": "showPassword ? 'text' : 'password'",
          "endAdornment": " <InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment> "
        },
        "snippet": "<Input id=\"standard-adornment-password\" type={showPassword ? 'text' : 'password'} endAdornment={ <InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment> } />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/InputAdornment#InputAdornment": [
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "end"
        },
        "snippet": "<InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} edge=\"end\" > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "end"
        },
        "snippet": "<InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "start"
        },
        "snippet": "<InputAdornment position=\"start\"> <AccountCircle /> </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "start"
        },
        "snippet": "<InputAdornment position=\"start\">kg</InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "start"
        },
        "snippet": "<InputAdornment position=\"start\">$</InputAdornment>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/InputBase#InputBase": [
      {
        "componentId": "@mui/material/InputBase#InputBase",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "multiline": true,
          "rows": 4,
          "value": "valueState",
          "sx": "{ textarea: { resize: 'both' }, width: '100%' }",
          "onChange": "handleChange",
          "inputRef": "(ref) => setInputRef(ref)"
        },
        "snippet": "<InputBase multiline rows={4} value={valueState} sx={{ textarea: { resize: 'both' }, width: '100%' }} onChange={handleChange} inputRef={(ref) => setInputRef(ref)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputBase#InputBase",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ ml: 1, flex: 1 }",
          "placeholder": "Search Google Maps",
          "inputProps": "{ 'aria-label': 'search google maps' }"
        },
        "snippet": "<InputBase sx={{ ml: 1, flex: 1 }} placeholder=\"Search Google Maps\" inputProps={{ 'aria-label': 'search google maps' }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/InputLabel#InputLabel": [
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "htmlFor": "main-grouping-criteria",
          "id": "main-grouping-criteria-label"
        },
        "snippet": "<InputLabel htmlFor=\"main-grouping-criteria\" id=\"main-grouping-criteria-label\" > Main grouping criteria </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "htmlFor": "height-of-container",
          "id": "height-of-container-label"
        },
        "snippet": "<InputLabel htmlFor=\"height-of-container\" id=\"height-of-container-label\"> Height of the container </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "standard",
          "htmlFor": "uncontrolled-native"
        },
        "snippet": "<InputLabel variant=\"standard\" htmlFor=\"uncontrolled-native\"> Age </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "shrink": true,
          "htmlFor": "select-multiple-native"
        },
        "snippet": "<InputLabel shrink htmlFor=\"select-multiple-native\"> Native </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "shrink": true,
          "htmlFor": "bootstrap-input"
        },
        "snippet": "<InputLabel shrink htmlFor=\"bootstrap-input\"> Bootstrap </InputLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/LinearProgress#LinearProgress": [
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "buffer",
          "value": "progress",
          "valueBuffer": "buffer"
        },
        "snippet": "<LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate",
          "value": "progress"
        },
        "snippet": "<LinearProgress variant=\"determinate\" value={progress} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate"
        },
        "snippet": "<LinearProgress variant=\"determinate\" {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary"
        },
        "snippet": "<LinearProgress color=\"secondary\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "success"
        },
        "snippet": "<LinearProgress color=\"success\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Link#Link": [
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "href": "`/x/react-data-grid${row.linkToCode}`",
          "target": "_blank",
          "color": "primary",
          "variant": "body2",
          "sx": "{ mt: 1.5, fontWeight: 'bold', fontFamily: 'IBM Plex Sans', display: 'inline-flex', alignItems: 'center', '& > svg': { transition: '0.2s' }, '&:hover > svg': { transform: 'translateX(2px)' }, }"
        },
        "snippet": "<Link href={`/x/react-data-grid${row.linkToCode}`} target=\"_blank\" color=\"primary\" variant=\"body2\" sx={{ mt: 1.5, fontWeight: 'bold', fontFamily: 'IBM Plex Sans', display: 'inline-flex', alignItems: 'center', '& > svg': { transition: '0.2s' }, '&:hover > svg': { transform: 'translateX(2px)' }, }} > View the demo source <KeyboardArrowRightRounded fontSize=\"small\" sx={{ mt: '1px', ml: '2px' }} /> </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "key": "2",
          "color": "inherit",
          "href": "/material-ui/getting-started/installation/",
          "onClick": "handleClick"
        },
        "snippet": "<Link underline=\"hover\" key=\"2\" color=\"inherit\" href=\"/material-ui/getting-started/installation/\" onClick={handleClick} > Core </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "key": "1",
          "color": "inherit",
          "href": "/",
          "onClick": "handleClick"
        },
        "snippet": "<Link underline=\"hover\" key=\"1\" color=\"inherit\" href=\"/\" onClick={handleClick}> MUI </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "sx": "{ display: 'flex', alignItems: 'center' }",
          "color": "inherit",
          "href": "/material-ui/getting-started/installation/"
        },
        "snippet": "<Link underline=\"hover\" sx={{ display: 'flex', alignItems: 'center' }} color=\"inherit\" href=\"/material-ui/getting-started/installation/\" > <WhatshotIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> Core </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "sx": "{ display: 'flex', alignItems: 'center' }",
          "color": "inherit",
          "href": "/"
        },
        "snippet": "<Link underline=\"hover\" sx={{ display: 'flex', alignItems: 'center' }} color=\"inherit\" href=\"/\" > <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" /> MUI </Link>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/List#List": [
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }",
          "component": "nav",
          "aria-labelledby": "nested-list-subheader",
          "subheader": " <ListSubheader component=\"div\" id=\"nested-list-subheader\"> Nested List Items </ListSubheader> "
        },
        "snippet": "<List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }} component=\"nav\" aria-labelledby=\"nested-list-subheader\" subheader={ <ListSubheader component=\"div\" id=\"nested-list-subheader\"> Nested List Items </ListSubheader> } > <ListItemButton> <ListItemIcon> <SendIcon /> </ListItemIcon> <ListItemText primary=\"Sent mail\" /> </ListItemButton> <ListItemButton> <ListItemIcon> <DraftsIcon /> </ListItemIcon> <ListItemText primary=\"Drafts\" /> </ListItemButton> <ListItemButton onClick={handleClick}> <ListItemIcon> <InboxIcon /> </ListItemIcon> <ListItemText primary=\"Inbox\" /> {open ? <ExpandLess /> : <ExpandMore />} </ListItemButton> <Collapse in={open} timeout=\"auto\" unmountOnExit> <List component=\"div\" disablePadding> <ListItemButton sx={{ pl: 4 }}> <ListItemIcon> <StarBorder /> </ListItemIcon> <ListItemText primary=\"Starred\" /> </ListItemButton> </List> </Collapse> </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 200, height: 230, bgcolor: 'background.paper', overflow: 'auto', }",
          "dense": true,
          "component": "div",
          "role": "list"
        },
        "snippet": "<List sx={{ width: 200, height: 230, bgcolor: 'background.paper', overflow: 'auto', }} dense component=\"div\" role=\"list\" > {items.map((value: number) => { const labelId = `transfer-list-all-item-${value}-label`; return ( <ListItemButton key={value} role=\"listitem\" onClick={handleToggle(value)} > <ListItemIcon> <Checkbox checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId, }} /> </ListItemIcon> <ListItemText id={labelId} primary={`List item ${value + 1}`} /> </ListItemButton> ); })} </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dense": true,
          "component": "div",
          "role": "list"
        },
        "snippet": "<List dense component=\"div\" role=\"list\"> {items.map((value: number) => { const labelId = `transfer-list-item-${value}-label`; return ( <ListItemButton key={value} role=\"listitem\" onClick={handleToggle(value)} > <ListItemIcon> <Checkbox checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId, }} /> </ListItemIcon> <ListItemText id={labelId} primary={`List item ${value + 1}`} /> </ListItemButton> ); })} </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "nav",
          "aria-label": "Device settings",
          "sx": "{ bgcolor: 'background.paper' }"
        },
        "snippet": "<List component=\"nav\" aria-label=\"Device settings\" sx={{ bgcolor: 'background.paper' }} > <ListItemButton id=\"lock-button\" aria-haspopup=\"listbox\" aria-controls=\"lock-menu\" aria-label=\"when device is locked\" aria-expanded={open ? 'true' : undefined} onClick={handleClickListItem} > <ListItemText primary=\"When device is locked\" secondary={options[selectedIndex]} /> </ListItemButton> </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }",
          "subheader": "<ListSubheader>Settings</ListSubheader>"
        },
        "snippet": "<List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }} subheader={<ListSubheader>Settings</ListSubheader>} > <ListItem> <ListItemIcon> <WifiIcon /> </ListItemIcon> <ListItemText id=\"switch-list-label-wifi\" primary=\"Wi-Fi\" /> <Switch edge=\"end\" onChange={handleToggle('wifi')} checked={checked.indexOf('wifi') !== -1} inputProps={{ 'aria-labelledby': 'switch-list-label-wifi', }} /> </ListItem> <ListItem> <ListItemIcon> <BluetoothIcon /> </ListItemIcon> <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Bluetooth\" /> <Switch edge=\"end\" onChange={handleToggle('bluetooth')} checked={checked.indexOf('bluetooth') !== -1} inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth', }} /> </ListItem> </List>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItem#ListItem": [
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "style": "style",
          "key": "index",
          "component": "div",
          "disablePadding": true
        },
        "snippet": "<ListItem style={style} key={index} component=\"div\" disablePadding> <ListItemButton> <ListItemText primary={`Item ${index + 1}`} /> </ListItemButton> </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "secondaryAction": " <IconButton edge=\"end\" aria-label=\"comments\"> <CommentIcon /> </IconButton> ",
          "disablePadding": true
        },
        "snippet": "<ListItem key={value} secondaryAction={ <IconButton edge=\"end\" aria-label=\"comments\"> <CommentIcon /> </IconButton> } disablePadding > <ListItemButton role={undefined} onClick={handleToggle(value)} dense> <ListItemIcon> <Checkbox edge=\"start\" checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId }} /> </ListItemIcon> <ListItemText id={labelId} primary={`Line item ${value + 1}`} /> </ListItemButton> </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "secondaryAction": " <Checkbox edge=\"end\" onChange={handleToggle(value)} checked={checked.indexOf(value) !== -1} inputProps={{ 'aria-labelledby': labelId }} /> ",
          "disablePadding": true
        },
        "snippet": "<ListItem key={value} secondaryAction={ <Checkbox edge=\"end\" onChange={handleToggle(value)} checked={checked.indexOf(value) !== -1} inputProps={{ 'aria-labelledby': labelId }} /> } disablePadding > <ListItemButton> <ListItemAvatar> <Avatar alt={`Avatar n°${value + 1}`} src={`/static/images/avatar/${value + 1}.jpg`} /> </ListItemAvatar> <ListItemText id={labelId} primary={`Line item ${value + 1}`} /> </ListItemButton> </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "text",
          "disablePadding": true,
          "sx": "{ display: 'block' }"
        },
        "snippet": "<ListItem key={text} disablePadding sx={{ display: 'block' }}> <ListItemButton sx={{ minHeight: 48, justifyContent: open ? 'initial' : 'center', px: 2.5, }} > <ListItemIcon sx={{ minWidth: 0, mr: open ? 3 : 'auto', justifyContent: 'center', }} > {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon> <ListItemText primary={text} sx={{ opacity: open ? 1 : 0 }} /> </ListItemButton> </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "disableGutters": true,
          "secondaryAction": " <IconButton aria-label=\"comment\"> <CommentIcon /> </IconButton> "
        },
        "snippet": "<ListItem key={value} disableGutters secondaryAction={ <IconButton aria-label=\"comment\"> <CommentIcon /> </IconButton> } > <ListItemText primary={`Line item ${value}`} /> </ListItem>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemAvatar#ListItemAvatar": [
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar> <Avatar alt={`Avatar n°${value + 1}`} src={`/static/images/avatar/${value + 1}.jpg`} /> </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar> <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}> <PersonIcon /> </Avatar> </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar> <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" /> </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar> <Avatar alt=\"Cindy Baker\" src=\"/static/images/avatar/3.jpg\" /> </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar> <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" /> </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemButton#ListItemButton": [
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "lock-button",
          "aria-haspopup": "listbox",
          "aria-controls": "lock-menu",
          "aria-label": "when device is locked",
          "aria-expanded": "open ? 'true' : undefined",
          "onClick": "handleClickListItem"
        },
        "snippet": "<ListItemButton id=\"lock-button\" aria-haspopup=\"listbox\" aria-controls=\"lock-menu\" aria-label=\"when device is locked\" aria-expanded={open ? 'true' : undefined} onClick={handleClickListItem} > <ListItemText primary=\"When device is locked\" secondary={options[selectedIndex]} /> </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "divider": true,
          "aria-haspopup": "true",
          "aria-controls": "ringtone-menu",
          "aria-label": "phone ringtone",
          "onClick": "handleClickListItem"
        },
        "snippet": "<ListItemButton divider aria-haspopup=\"true\" aria-controls=\"ringtone-menu\" aria-label=\"phone ringtone\" onClick={handleClickListItem} > <ListItemText primary=\"Phone ringtone\" secondary={value} /> </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alignItems": "flex-start",
          "onClick": "() => setOpen(!open)",
          "sx": "{ px: 3, pt: 2.5, pb: open ? 0 : 2.5, '&:hover, &:focus': { '& svg': { opacity: open ? 1 : 0 } }, }"
        },
        "snippet": "<ListItemButton alignItems=\"flex-start\" onClick={() => setOpen(!open)} sx={{ px: 3, pt: 2.5, pb: open ? 0 : 2.5, '&:hover, &:focus': { '& svg': { opacity: open ? 1 : 0 } }, }} > <ListItemText primary=\"Build\" primaryTypographyProps={{ fontSize: 15, fontWeight: 'medium', lineHeight: '20px', mb: '2px', }} secondary=\"Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning\" secondaryTypographyProps={{ noWrap: true, fontSize: 12, lineHeight: '16px', color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)', }} sx={{ my: 0 }} /> <KeyboardArrowDown sx={{ mr: -1, opacity: 0, transform: open ? 'rotate(-180deg)' : 'rotate(0)', transition: '0.2s', }} /> </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "role": "undefined",
          "onClick": "handleToggle(value)",
          "dense": true
        },
        "snippet": "<ListItemButton role={undefined} onClick={handleToggle(value)} dense> <ListItemIcon> <Checkbox edge=\"start\" checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId }} /> </ListItemIcon> <ListItemText id={labelId} primary={`Line item ${value + 1}`} /> </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "role": "listitem",
          "onClick": "handleToggle(value)"
        },
        "snippet": "<ListItemButton key={value} role=\"listitem\" onClick={handleToggle(value)} > <ListItemIcon> <Checkbox checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId, }} /> </ListItemIcon> <ListItemText id={labelId} primary={`List item ${value + 1}`} /> </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemIcon#ListItemIcon": [
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 0, mr: open ? 3 : 'auto', justifyContent: 'center', }"
        },
        "snippet": "<ListItemIcon sx={{ minWidth: 0, mr: open ? 3 : 'auto', justifyContent: 'center', }} > {index % 2 === 0 ? <InboxIcon /> : <MailIcon />} </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ color: 'inherit' }"
        },
        "snippet": "<ListItemIcon sx={{ color: 'inherit' }}> {item.icon} </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ fontSize: 20 }"
        },
        "snippet": "<ListItemIcon sx={{ fontSize: 20 }}>🔥</ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemIcon> <Checkbox edge=\"start\" checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId }} /> </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemIcon> <Checkbox checked={checked.indexOf(value) !== -1} tabIndex={-1} disableRipple inputProps={{ 'aria-labelledby': labelId, }} /> </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemSecondaryAction#ListItemSecondaryAction": [
      {
        "componentId": "@mui/material/ListItemSecondaryAction#ListItemSecondaryAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemSecondaryAction> <IconButton edge=\"end\" aria-label=\"delete\"> <DeleteIcon /> </IconButton> </ListItemSecondaryAction>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemSecondaryAction#ListItemSecondaryAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemSecondaryAction> <IconButton edge=\"end\" aria-label=\"edit\"> <DeleteIcon /> </IconButton> </ListItemSecondaryAction>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemText#ListItemText": [
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Build",
          "primaryTypographyProps": "{ fontSize: 15, fontWeight: 'medium', lineHeight: '20px', mb: '2px', }",
          "secondary": "Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning",
          "secondaryTypographyProps": "{ noWrap: true, fontSize: 12, lineHeight: '16px', color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)', }",
          "sx": "{ my: 0 }"
        },
        "snippet": "<ListItemText primary=\"Build\" primaryTypographyProps={{ fontSize: 15, fontWeight: 'medium', lineHeight: '20px', mb: '2px', }} secondary=\"Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning\" secondaryTypographyProps={{ noWrap: true, fontSize: 12, lineHeight: '16px', color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)', }} sx={{ my: 0 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ my: 0 }",
          "primary": "Firebash",
          "primaryTypographyProps": "{ fontSize: 20, fontWeight: 'medium', letterSpacing: 0, }"
        },
        "snippet": "<ListItemText sx={{ my: 0 }} primary=\"Firebash\" primaryTypographyProps={{ fontSize: 20, fontWeight: 'medium', letterSpacing: 0, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Brunch this weekend?",
          "secondary": " <React.Fragment> <Typography component=\"span\" variant=\"body2\" className={classes.inline} color=\"textPrimary\" > Ali Connors </Typography> { \" — I'll be in your neighborhood doing errands this…I'll be in your neighborhood doing errands this…I'll be in your neighborhood doing errands this…\" } </React.Fragment> "
        },
        "snippet": "<ListItemText primary=\"Brunch this weekend?\" secondary={ <React.Fragment> <Typography component=\"span\" variant=\"body2\" className={classes.inline} color=\"textPrimary\" > Ali Connors </Typography> { \" — I'll be in your neighborhood doing errands this…I'll be in your neighborhood doing errands this…I'll be in your neighborhood doing errands this…\" } </React.Fragment> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Brunch this weekend?",
          "secondary": " <React.Fragment> <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\" > Ali Connors </Typography> {\" — I'll be in your neighborhood doing errands this…\"} </React.Fragment> "
        },
        "snippet": "<ListItemText primary=\"Brunch this weekend?\" secondary={ <React.Fragment> <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\" > Ali Connors </Typography> {\" — I'll be in your neighborhood doing errands this…\"} </React.Fragment> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Summer BBQ",
          "secondary": " <React.Fragment> <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\" > to Scott, Alex, Jennifer </Typography> {\" — Wish I could come, but I'm out of town this…\"} </React.Fragment> "
        },
        "snippet": "<ListItemText primary=\"Summer BBQ\" secondary={ <React.Fragment> <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\" > to Scott, Alex, Jennifer </Typography> {\" — Wish I could come, but I'm out of town this…\"} </React.Fragment> } />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListSubheader#ListSubheader": [
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "dataSet.key",
          "component": "div",
          "style": "inlineStyle"
        },
        "snippet": "<ListSubheader key={dataSet.key} component=\"div\" style={inlineStyle}> {dataSet.group} </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div",
          "id": "nested-list-subheader"
        },
        "snippet": "<ListSubheader component=\"div\" id=\"nested-list-subheader\"> Nested List Items </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: 'background.paper' }"
        },
        "snippet": "<ListSubheader sx={{ bgcolor: 'background.paper' }}> Yesterday </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: 'background.paper' }"
        },
        "snippet": "<ListSubheader sx={{ bgcolor: 'background.paper' }}> Today </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div"
        },
        "snippet": "<ListSubheader component=\"div\">December</ListSubheader>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Menu#Menu": [
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorEl": "anchorEl",
          "id": "account-menu",
          "open": "open",
          "onClose": "handleClose",
          "onClick": "handleClose",
          "PaperProps": "{ elevation: 0, sx: { overflow: 'visible', filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))', mt: 1.5, '& .MuiAvatar-root': { width: 32, height: 32, ml: -0.5, mr: 1, }, '&::before': { content: '\"\"', display: 'block', position: 'absolute', top: 0, right: 14, width: 10, height: 10, bgcolor: 'background.paper', transform: 'translateY(-50%) rotate(45deg)', zIndex: 0, }, }, }",
          "transformOrigin": "{ horizontal: 'right', vertical: 'top' }",
          "anchorOrigin": "{ horizontal: 'right', vertical: 'bottom' }"
        },
        "snippet": "<Menu anchorEl={anchorEl} id=\"account-menu\" open={open} onClose={handleClose} onClick={handleClose} PaperProps={{ elevation: 0, sx: { overflow: 'visible', filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))', mt: 1.5, '& .MuiAvatar-root': { width: 32, height: 32, ml: -0.5, mr: 1, }, '&::before': { content: '\"\"', display: 'block', position: 'absolute', top: 0, right: 14, width: 10, height: 10, bgcolor: 'background.paper', transform: 'translateY(-50%) rotate(45deg)', zIndex: 0, }, }, }} transformOrigin={{ horizontal: 'right', vertical: 'top' }} anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }} > <MenuItem onClick={handleClose}> <Avatar /> Profile </MenuItem> <MenuItem onClick={handleClose}> <Avatar /> My account </MenuItem> <Divider /> <MenuItem onClick={handleClose}> <ListItemIcon> <PersonAdd fontSize=\"small\" /> </ListItemIcon> Add another account </MenuItem> <MenuItem onClick={handleClose}> <ListItemIcon> <Settings fontSize=\"small\" /> </ListItemIcon> Settings </MenuItem> <MenuItem onClick={handleClose}> <ListItemIcon> <Logout fontSize=\"small\" /> </ListItemIcon> Logout </MenuItem> </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "menu-appbar",
          "anchorEl": "anchorElNav",
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'left', }",
          "keepMounted": true,
          "transformOrigin": "{ vertical: 'top', horizontal: 'left', }",
          "open": "Boolean(anchorElNav)",
          "onClose": "handleCloseNavMenu",
          "sx": "{ display: { xs: 'block', md: 'none' }, }"
        },
        "snippet": "<Menu id=\"menu-appbar\" anchorEl={anchorElNav} anchorOrigin={{ vertical: 'bottom', horizontal: 'left', }} keepMounted transformOrigin={{ vertical: 'top', horizontal: 'left', }} open={Boolean(anchorElNav)} onClose={handleCloseNavMenu} sx={{ display: { xs: 'block', md: 'none' }, }} > {pages.map((page) => ( <MenuItem key={page} onClick={handleCloseNavMenu}> <Typography textAlign=\"center\">{page}</Typography> </MenuItem> ))} </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ mt: '45px' }",
          "id": "menu-appbar",
          "anchorEl": "anchorElUser",
          "anchorOrigin": "{ vertical: 'top', horizontal: 'right', }",
          "keepMounted": true,
          "transformOrigin": "{ vertical: 'top', horizontal: 'right', }",
          "open": "Boolean(anchorElUser)",
          "onClose": "handleCloseUserMenu"
        },
        "snippet": "<Menu sx={{ mt: '45px' }} id=\"menu-appbar\" anchorEl={anchorElUser} anchorOrigin={{ vertical: 'top', horizontal: 'right', }} keepMounted transformOrigin={{ vertical: 'top', horizontal: 'right', }} open={Boolean(anchorElUser)} onClose={handleCloseUserMenu} > {settings.map((setting) => ( <MenuItem key={setting} onClick={handleCloseUserMenu}> <Typography textAlign=\"center\">{setting}</Typography> </MenuItem> ))} </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorEl": "mobileMoreAnchorEl",
          "anchorOrigin": "{ vertical: 'top', horizontal: 'right', }",
          "id": "mobileMenuId",
          "keepMounted": true,
          "transformOrigin": "{ vertical: 'top', horizontal: 'right', }",
          "open": "isMobileMenuOpen",
          "onClose": "handleMobileMenuClose"
        },
        "snippet": "<Menu anchorEl={mobileMoreAnchorEl} anchorOrigin={{ vertical: 'top', horizontal: 'right', }} id={mobileMenuId} keepMounted transformOrigin={{ vertical: 'top', horizontal: 'right', }} open={isMobileMenuOpen} onClose={handleMobileMenuClose} > <MenuItem> <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\"> <Badge badgeContent={4} color=\"error\"> <MailIcon /> </Badge> </IconButton> <p>Messages</p> </MenuItem> <MenuItem> <IconButton size=\"large\" aria-label=\"show 17 new notifications\" color=\"inherit\" > <Badge badgeContent={17} color=\"error\"> <NotificationsIcon /> </Badge> </IconButton> <p>Notifications</p> </MenuItem> <MenuItem onClick={handleProfileMenuOpen}> <IconButton size=\"large\" aria-label=\"account of current user\" aria-controls=\"primary-search-account-menu\" aria-haspopup=\"true\" color=\"inherit\" > <AccountCircle /> </IconButton> <p>Profile</p> </MenuItem> </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-positioned-menu",
          "aria-labelledby": "demo-positioned-button",
          "anchorEl": "anchorEl",
          "open": "open",
          "onClose": "handleClose",
          "anchorOrigin": "{ vertical: 'top', horizontal: 'left', }",
          "transformOrigin": "{ vertical: 'top', horizontal: 'left', }"
        },
        "snippet": "<Menu id=\"demo-positioned-menu\" aria-labelledby=\"demo-positioned-button\" anchorEl={anchorEl} open={open} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'left', }} transformOrigin={{ vertical: 'top', horizontal: 'left', }} > <MenuItem onClick={handleClose}>Profile</MenuItem> <MenuItem onClick={handleClose}>My account</MenuItem> <MenuItem onClick={handleClose}>Logout</MenuItem> </Menu>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/MenuItem#MenuItem": [
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "option",
          "disabled": "index === 2",
          "selected": "index === selectedIndex",
          "onClick": "(event) => handleMenuItemClick(event, index)"
        },
        "snippet": "<MenuItem key={option} disabled={index === 2} selected={index === selectedIndex} onClick={(event) => handleMenuItemClick(event, index)} > {option} </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "option",
          "disabled": "index === 0",
          "selected": "index === selectedIndex",
          "onClick": "(event) => handleMenuItemClick(event, index)"
        },
        "snippet": "<MenuItem key={option} disabled={index === 0} selected={index === selectedIndex} onClick={(event) => handleMenuItemClick(event, index)} > {option} </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "data-mui-test": "today-action-button",
          "onClick": "() => { setAnchorEl(null); onSetToday(); }",
          "key": "actionType"
        },
        "snippet": "<MenuItem data-mui-test=\"today-action-button\" onClick={() => { setAnchorEl(null); onSetToday(); }} key={actionType} > {translations.todayButtonLabel} </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "data-mui-test": "clear-action-button",
          "onClick": "() => { onClear(); setAnchorEl(null); }",
          "key": "actionType"
        },
        "snippet": "<MenuItem data-mui-test=\"clear-action-button\" onClick={() => { onClear(); setAnchorEl(null); }} key={actionType} > {translations.clearButtonLabel} </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "option",
          "selected": "option === 'Pyxis'",
          "onClick": "handleClose"
        },
        "snippet": "<MenuItem key={option} selected={option === 'Pyxis'} onClick={handleClose}> {option} </MenuItem>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/MenuList#MenuList": [
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "autoFocusItem": "state.isMenuOpened",
          "id": "custom-view-menu",
          "aria-labelledby": "custom-view-button",
          "onKeyDown": "handleListKeyDown"
        },
        "snippet": "<MenuList autoFocusItem={state.isMenuOpened} id=\"custom-view-menu\" aria-labelledby=\"custom-view-button\" onKeyDown={handleListKeyDown} > {Object.entries(state.views).map(([viewId, view]) => ( <ViewListItem key={viewId} view={view} viewId={viewId} selected={viewId === state.activeViewId} onDelete={handleDeleteView} onSelect={handleSetActiveView} /> ))} </MenuList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "split-button-menu",
          "autoFocusItem": true
        },
        "snippet": "<MenuList id=\"split-button-menu\" autoFocusItem> {options.map((option, index) => ( <MenuItem key={option} disabled={index === 2} selected={index === selectedIndex} onClick={(event) => handleMenuItemClick(event, index)} > {option} </MenuItem> ))} </MenuList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dense": true
        },
        "snippet": "<MenuList dense> <MenuItem> <ListItemText inset>Single</ListItemText> </MenuItem> <MenuItem> <ListItemText inset>1.15</ListItemText> </MenuItem> <MenuItem> <ListItemText inset>Double</ListItemText> </MenuItem> <MenuItem> <ListItemIcon> <Check /> </ListItemIcon> Custom: 1.2 </MenuItem> <Divider /> <MenuItem> <ListItemText>Add space before paragraph</ListItemText> </MenuItem> <MenuItem> <ListItemText>Add space after paragraph</ListItemText> </MenuItem> <Divider /> <MenuItem> <ListItemText>Custom spacing...</ListItemText> </MenuItem> </MenuList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<MenuList> <MenuItem> <ListItemIcon> <ContentCut fontSize=\"small\" /> </ListItemIcon> <ListItemText>Cut</ListItemText> <Typography variant=\"body2\" color=\"text.secondary\"> ⌘X </Typography> </MenuItem> <MenuItem> <ListItemIcon> <ContentCopy fontSize=\"small\" /> </ListItemIcon> <ListItemText>Copy</ListItemText> <Typography variant=\"body2\" color=\"text.secondary\"> ⌘C </Typography> </MenuItem> <MenuItem> <ListItemIcon> <ContentPaste fontSize=\"small\" /> </ListItemIcon> <ListItemText>Paste</ListItemText> <Typography variant=\"body2\" color=\"text.secondary\"> ⌘V </Typography> </MenuItem> <Divider /> <MenuItem> <ListItemIcon> <Cloud fontSize=\"small\" /> </ListItemIcon> <ListItemText>Web Clipboard</ListItemText> </MenuItem> </MenuList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<MenuList> <MenuItem> <ListItemIcon> <SendIcon fontSize=\"small\" /> </ListItemIcon> <Typography variant=\"inherit\">A short message</Typography> </MenuItem> <MenuItem> <ListItemIcon> <PriorityHighIcon fontSize=\"small\" /> </ListItemIcon> <Typography variant=\"inherit\">A very long text that overflows</Typography> </MenuItem> <MenuItem> <ListItemIcon> <DraftsIcon fontSize=\"small\" /> </ListItemIcon> <Typography variant=\"inherit\" noWrap> A very long text that overflows </Typography> </MenuItem> </MenuList>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/MobileStepper#MobileStepper": [
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "progress",
          "steps": 6,
          "position": "static",
          "activeStep": "activeStep",
          "sx": "{ maxWidth: 400, flexGrow: 1 }",
          "nextButton": " <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}> Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> ",
          "backButton": " <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> "
        },
        "snippet": "<MobileStepper variant=\"progress\" steps={6} position=\"static\" activeStep={activeStep} sx={{ maxWidth: 400, flexGrow: 1 }} nextButton={ <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}> Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> } backButton={ <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "dots",
          "steps": 6,
          "position": "static",
          "activeStep": "activeStep",
          "sx": "{ maxWidth: 400, flexGrow: 1 }",
          "nextButton": " <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}> Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> ",
          "backButton": " <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> "
        },
        "snippet": "<MobileStepper variant=\"dots\" steps={6} position=\"static\" activeStep={activeStep} sx={{ maxWidth: 400, flexGrow: 1 }} nextButton={ <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}> Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> } backButton={ <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "text",
          "steps": "maxSteps",
          "position": "static",
          "activeStep": "activeStep",
          "nextButton": " <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} > Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> ",
          "backButton": " <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> "
        },
        "snippet": "<MobileStepper variant=\"text\" steps={maxSteps} position=\"static\" activeStep={activeStep} nextButton={ <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} > Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> } backButton={ <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "steps": "maxSteps",
          "position": "static",
          "activeStep": "activeStep",
          "nextButton": " <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} > Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> ",
          "backButton": " <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> "
        },
        "snippet": "<MobileStepper steps={maxSteps} position=\"static\" activeStep={activeStep} nextButton={ <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} > Next {theme.direction === 'rtl' ? ( <KeyboardArrowLeft /> ) : ( <KeyboardArrowRight /> )} </Button> } backButton={ <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}> {theme.direction === 'rtl' ? ( <KeyboardArrowRight /> ) : ( <KeyboardArrowLeft /> )} Back </Button> } />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Modal#Modal": [
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-labelledby": "transition-modal-title",
          "aria-describedby": "transition-modal-description",
          "open": "open",
          "onClose": "handleClose",
          "closeAfterTransition": true,
          "slots": "{ backdrop: Backdrop }",
          "slotProps": "{ backdrop: { timeout: 500, }, }"
        },
        "snippet": "<Modal aria-labelledby=\"transition-modal-title\" aria-describedby=\"transition-modal-description\" open={open} onClose={handleClose} closeAfterTransition slots={{ backdrop: Backdrop }} slotProps={{ backdrop: { timeout: 500, }, }} > <Fade in={open}> <Box sx={style}> <Typography id=\"transition-modal-title\" variant=\"h6\" component=\"h2\"> Text in a modal </Typography> <Typography id=\"transition-modal-description\" sx={{ mt: 2 }}> Duis mollis, est non commodo luctus, nisi erat porttitor ligula. </Typography> </Box> </Fade> </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-labelledby": "spring-modal-title",
          "aria-describedby": "spring-modal-description",
          "open": "open",
          "onClose": "handleClose",
          "closeAfterTransition": true,
          "slots": "{ backdrop: Backdrop }",
          "slotProps": "{ backdrop: { TransitionComponent: Fade, }, }"
        },
        "snippet": "<Modal aria-labelledby=\"spring-modal-title\" aria-describedby=\"spring-modal-description\" open={open} onClose={handleClose} closeAfterTransition slots={{ backdrop: Backdrop }} slotProps={{ backdrop: { TransitionComponent: Fade, }, }} > <Fade in={open}> <Box sx={style}> <Typography id=\"spring-modal-title\" variant=\"h6\" component=\"h2\"> Text in a modal </Typography> <Typography id=\"spring-modal-description\" sx={{ mt: 2 }}> Duis mollis, est non commodo luctus, nisi erat porttitor ligula. </Typography> </Box> </Fade> </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "keepMounted": true,
          "open": "open",
          "onClose": "handleClose",
          "aria-labelledby": "keep-mounted-modal-title",
          "aria-describedby": "keep-mounted-modal-description"
        },
        "snippet": "<Modal keepMounted open={open} onClose={handleClose} aria-labelledby=\"keep-mounted-modal-title\" aria-describedby=\"keep-mounted-modal-description\" > <Box sx={style}> <Typography id=\"keep-mounted-modal-title\" variant=\"h6\" component=\"h2\"> Text in a modal </Typography> <Typography id=\"keep-mounted-modal-description\" sx={{ mt: 2 }}> Duis mollis, est non commodo luctus, nisi erat porttitor ligula. </Typography> </Box> </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "aria-labelledby": "modal-modal-title",
          "aria-describedby": "modal-modal-description"
        },
        "snippet": "<Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\" > <Box sx={style}> <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\"> Text in a modal </Typography> <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}> Duis mollis, est non commodo luctus, nisi erat porttitor ligula. </Typography> </Box> </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "aria-labelledby": "child-modal-title",
          "aria-describedby": "child-modal-description"
        },
        "snippet": "<Modal open={open} onClose={handleClose} aria-labelledby=\"child-modal-title\" aria-describedby=\"child-modal-description\" > <Box sx={{ ...style, width: 200 }}> <h2 id=\"child-modal-title\">Text in a child modal</h2> <p id=\"child-modal-description\"> Lorem ipsum, dolor sit amet consectetur adipisicing elit. </p> <Button onClick={handleClose}>Close Child Modal</Button> </Box> </Modal>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/NativeSelect#NativeSelect": [
      {
        "componentId": "@mui/material/NativeSelect#NativeSelect",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-customized-select-native",
          "value": "age",
          "onChange": "handleChange",
          "input": "<BootstrapInput />"
        },
        "snippet": "<NativeSelect id=\"demo-customized-select-native\" value={age} onChange={handleChange} input={<BootstrapInput />} > <option aria-label=\"None\" value=\"\" /> <option value={10}>Ten</option> <option value={20}>Twenty</option> <option value={30}>Thirty</option> </NativeSelect>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/NativeSelect#NativeSelect",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": 30,
          "inputProps": "{ name: 'age', id: 'uncontrolled-native', }"
        },
        "snippet": "<NativeSelect defaultValue={30} inputProps={{ name: 'age', id: 'uncontrolled-native', }} > <option value={10}>Ten</option> <option value={20}>Twenty</option> <option value={30}>Thirty</option> </NativeSelect>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/OutlinedInput#OutlinedInput": [
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-adornment-password",
          "type": "showPassword ? 'text' : 'password'",
          "endAdornment": " <InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} edge=\"end\" > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment> ",
          "label": "Password"
        },
        "snippet": "<OutlinedInput id=\"outlined-adornment-password\" type={showPassword ? 'text' : 'password'} endAdornment={ <InputAdornment position=\"end\"> <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword} edge=\"end\" > {showPassword ? <VisibilityOff /> : <Visibility />} </IconButton> </InputAdornment> } label=\"Password\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-adornment-weight",
          "endAdornment": "<InputAdornment position=\"end\">kg</InputAdornment>",
          "aria-describedby": "outlined-weight-helper-text",
          "inputProps": "{ 'aria-label': 'weight', }"
        },
        "snippet": "<OutlinedInput id=\"outlined-adornment-weight\" endAdornment={<InputAdornment position=\"end\">kg</InputAdornment>} aria-describedby=\"outlined-weight-helper-text\" inputProps={{ 'aria-label': 'weight', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-adornment-amount",
          "startAdornment": "<InputAdornment position=\"start\">$</InputAdornment>",
          "label": "Amount"
        },
        "snippet": "<OutlinedInput id=\"outlined-adornment-amount\" startAdornment={<InputAdornment position=\"start\">$</InputAdornment>} label=\"Amount\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-outlined",
          "defaultValue": "Composed TextField",
          "label": "Name"
        },
        "snippet": "<OutlinedInput id=\"component-outlined\" defaultValue=\"Composed TextField\" label=\"Name\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "select-multiple-chip",
          "label": "Chip"
        },
        "snippet": "<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Pagination#Pagination": [
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "primary",
          "variant": "outlined",
          "shape": "rounded",
          "page": "page + 1",
          "count": "pageCount",
          "renderItem": "(props2) => <PaginationItem {...props2} disableRipple />",
          "onChange": "(event: React.ChangeEvent<unknown>, value: number) => apiRef.current.setPage(value - 1) "
        },
        "snippet": "<Pagination color=\"primary\" variant=\"outlined\" shape=\"rounded\" page={page + 1} count={pageCount} // @ts-expect-error renderItem={(props2) => <PaginationItem {...props2} disableRipple />} onChange={(event: React.ChangeEvent<unknown>, value: number) => apiRef.current.setPage(value - 1) } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "(theme) => ({ padding: theme.spacing(1.5, 0) })",
          "color": "primary",
          "count": "pageCount",
          "page": "page + 1",
          "onChange": "(event, value) => apiRef.current.setPage(value - 1)"
        },
        "snippet": "<Pagination sx={(theme) => ({ padding: theme.spacing(1.5, 0) })} color=\"primary\" count={pageCount} page={page + 1} onChange={(event, value) => apiRef.current.setPage(value - 1)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "count": 11,
          "defaultPage": 6,
          "siblingCount": 0,
          "boundaryCount": 2
        },
        "snippet": "<Pagination count={11} defaultPage={6} siblingCount={0} boundaryCount={2} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "page": "page",
          "count": 10,
          "renderItem": "(item) => ( <PaginationItem component={Link} to={`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`} {...item} /> )"
        },
        "snippet": "<Pagination page={page} count={10} renderItem={(item) => ( <PaginationItem component={Link} to={`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`} {...item} /> )} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "count": 10,
          "variant": "outlined",
          "color": "secondary"
        },
        "snippet": "<Pagination count={10} variant=\"outlined\" color=\"secondary\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/PaginationItem#PaginationItem": [
      {
        "componentId": "@mui/material/PaginationItem#PaginationItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Link",
          "to": "`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`"
        },
        "snippet": "<PaginationItem component={Link} to={`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`} {...item} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/PaginationItem#PaginationItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slots": "{ previous: ArrowBackIcon, next: ArrowForwardIcon }"
        },
        "snippet": "<PaginationItem slots={{ previous: ArrowBackIcon, next: ArrowForwardIcon }} {...item} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/PaginationItem#PaginationItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableRipple": true
        },
        "snippet": "<PaginationItem {...props2} disableRipple />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Paper#Paper": [
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "role": "dialog",
          "aria-modal": "false",
          "aria-label": "Cookie banner",
          "square": true,
          "variant": "outlined",
          "tabIndex": "-1",
          "sx": "{ position: 'fixed', bottom: 0, left: 0, right: 0, m: 0, p: 2, borderWidth: 0, borderTopWidth: 1, }"
        },
        "snippet": "<Paper role=\"dialog\" aria-modal=\"false\" aria-label=\"Cookie banner\" square variant=\"outlined\" tabIndex={-1} sx={{ position: 'fixed', bottom: 0, left: 0, right: 0, m: 0, p: 2, borderWidth: 0, borderTopWidth: 1, }} > <Stack direction={{ xs: 'column', sm: 'row' }} justifyContent=\"space-between\" gap={2} > <Box sx={{ flexShrink: 1, alignSelf: { xs: 'flex-start', sm: 'center' }, }} > <Typography fontWeight=\"bold\">This website uses cookies</Typography> <Typography variant=\"body2\"> example.com relies on cookies to improve your experience. </Typography> </Box> <Stack gap={2} direction={{ xs: 'row-reverse', sm: 'row', }} sx={{ flexShrink: 0, alignSelf: { xs: 'flex-end', sm: 'center' }, }} > <Button size=\"small\" onClick={closeBanner} variant=\"contained\"> Allow all </Button> <Button size=\"small\" onClick={closeBanner}> Reject all </Button> </Stack> </Stack> </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "square": true,
          "elevation": 0,
          "sx": "{ display: 'flex', alignItems: 'center', height: 50, pl: 2, bgcolor: 'background.default', }"
        },
        "snippet": "<Paper square elevation={0} sx={{ display: 'flex', alignItems: 'center', height: 50, pl: 2, bgcolor: 'background.default', }} > <Typography>{images[activeStep].label}</Typography> </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "square": true,
          "elevation": 0,
          "sx": "{ display: 'flex', alignItems: 'center', height: 50, pl: 2, bgcolor: 'background.default', }"
        },
        "snippet": "<Paper square elevation={0} sx={{ display: 'flex', alignItems: 'center', height: 50, pl: 2, bgcolor: 'background.default', }} > <Typography>{steps[activeStep].label}</Typography> </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "square": true,
          "elevation": 0,
          "sx": "{ p: 3 }"
        },
        "snippet": "<Paper square elevation={0} sx={{ p: 3 }}> <Typography>All steps completed - you&apos;re finished</Typography> <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}> Reset </Button> </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "elevation": 0,
          "sx": "{ maxWidth: 256 }"
        },
        "snippet": "<Paper elevation={0} sx={{ maxWidth: 256 }}> <FireNav component=\"nav\" disablePadding> <ListItemButton component=\"a\" href=\"#customized-list\"> <ListItemIcon sx={{ fontSize: 20 }}>🔥</ListItemIcon> <ListItemText sx={{ my: 0 }} primary=\"Firebash\" primaryTypographyProps={{ fontSize: 20, fontWeight: 'medium', letterSpacing: 0, }} /> </ListItemButton> <Divider /> <ListItem component=\"div\" disablePadding> <ListItemButton sx={{ height: 56 }}> <ListItemIcon> <Home color=\"primary\" /> </ListItemIcon> <ListItemText primary=\"Project Overview\" primaryTypographyProps={{ color: 'primary', fontWeight: 'medium', variant: 'body2', }} /> </ListItemButton> <Tooltip title=\"Project Settings\"> <IconButton size=\"large\" sx={{ '& svg': { color: 'rgba(255,255,255,0.8)', transition: '0.2s', transform: 'translateX(0) rotate(0)', }, '&:hover, &:focus': { bgcolor: 'unset', '& svg:first-of-type': { transform: 'translateX(-4px) rotate(-20deg)', }, '& svg:last-of-type': { right: 0, opacity: 1, }, }, '&::after': { content: '\"\"', position: 'absolute', height: '80%', display: 'block', left: 0, width: '1px', bgcolor: 'divider', }, }} > <Settings /> <ArrowRight sx={{ position: 'absolute', right: 4, opacity: 0 }} /> </IconButton> </Tooltip> </ListItem> <Divider /> <Box sx={{ bgcolor: open ? 'rgba(71, 98, 130, 0.2)' : null, pb: open ? 2 : 0, }} > <ListItemButton alignItems=\"flex-start\" onClick={() => setOpen(!open)} sx={{ px: 3, pt: 2.5, pb: open ? 0 : 2.5, '&:hover, &:focus': { '& svg': { opacity: open ? 1 : 0 } }, }} > <ListItemText primary=\"Build\" primaryTypographyProps={{ fontSize: 15, fontWeight: 'medium', lineHeight: '20px', mb: '2px', }} secondary=\"Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning\" secondaryTypographyProps={{ noWrap: true, fontSize: 12, lineHeight: '16px', color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)', }} sx={{ my: 0 }} /> <KeyboardArrowDown sx={{ mr: -1, opacity: 0, transform: open ? 'rotate(-180deg)' : 'rotate(0)', transition: '0.2s', }} /> </ListItemButton> {open && data.map((item) => ( <ListItemButton key={item.label} sx={{ py: 0, minHeight: 32, color: 'rgba(255,255,255,.8)' }} > <ListItemIcon sx={{ color: 'inherit' }}> {item.icon} </ListItemIcon> <ListItemText primary={item.label} primaryTypographyProps={{ fontSize: 14, fontWeight: 'medium' }} /> </ListItemButton> ))} </Box> </FireNav> </Paper>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Popover#Popover": [
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "mouse-over-popover",
          "sx": "{ pointerEvents: 'none', }",
          "open": "open",
          "anchorEl": "anchorEl",
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'left', }",
          "transformOrigin": "{ vertical: 'top', horizontal: 'left', }",
          "onClose": "handlePopoverClose",
          "disableRestoreFocus": true
        },
        "snippet": "<Popover id=\"mouse-over-popover\" sx={{ pointerEvents: 'none', }} open={open} anchorEl={anchorEl} anchorOrigin={{ vertical: 'bottom', horizontal: 'left', }} transformOrigin={{ vertical: 'top', horizontal: 'left', }} onClose={handlePopoverClose} disableRestoreFocus > <Typography sx={{ p: 1 }}>I use Popover.</Typography> </Popover>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'left' }",
          "onClose": "handleClose",
          "disableAutoFocus": true
        },
        "snippet": "<Popover id={id} open={open} anchorEl={anchorEl} anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }} onClose={handleClose} disableAutoFocus > <Paper> <Typography sx={{ p: 2 }}>The content of the Popover.</Typography> </Paper> </Popover>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "onClose": "handleClose",
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'left', }"
        },
        "snippet": "<Popover id={id} open={open} anchorEl={anchorEl} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'left', }} > <Typography sx={{ p: 2 }}>The content of the Popover.</Typography> </Popover>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'center', }",
          "transformOrigin": "{ vertical: 'top', horizontal: 'center', }"
        },
        "snippet": "<Popover {...bindPopover(popupState)} anchorOrigin={{ vertical: 'bottom', horizontal: 'center', }} transformOrigin={{ vertical: 'top', horizontal: 'center', }} > <Typography sx={{ p: 2 }}>The content of the Popover.</Typography> </Popover>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Popper#Popper": [
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "popperId",
          "open": "state.isMenuOpened",
          "anchorEl": "state.menuAnchorEl",
          "role": "undefined",
          "transition": true,
          "placement": "bottom-start",
          "sx": "{ zIndex: 'modal' }"
        },
        "snippet": "<Popper id={popperId} open={state.isMenuOpened} anchorEl={state.menuAnchorEl} role={undefined} transition placement=\"bottom-start\" sx={{ zIndex: 'modal' }} > {({ TransitionProps }) => ( <Fade {...TransitionProps} timeout={350}> <Paper> <MenuList autoFocusItem={state.isMenuOpened} id=\"custom-view-menu\" aria-labelledby=\"custom-view-button\" onKeyDown={handleListKeyDown} > {Object.entries(state.views).map(([viewId, view]) => ( <ViewListItem key={viewId} view={view} viewId={viewId} selected={viewId === state.activeViewId} onDelete={handleDeleteView} onSelect={handleSetActiveView} /> ))} </MenuList> </Paper> </Fade> )} </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ zIndex: 1, }",
          "open": "open",
          "anchorEl": "anchorRef.current",
          "role": "undefined",
          "transition": true,
          "disablePortal": true
        },
        "snippet": "<Popper sx={{ zIndex: 1, }} open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal > {({ TransitionProps, placement }) => ( <Grow {...TransitionProps} style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom', }} > <Paper> <ClickAwayListener onClickAway={handleClose}> <MenuList id=\"split-button-menu\" autoFocusItem> {options.map((option, index) => ( <MenuItem key={option} disabled={index === 2} selected={index === selectedIndex} onClick={(event) => handleMenuItemClick(event, index)} > {option} </MenuItem> ))} </MenuList> </ClickAwayListener> </Paper> </Grow> )} </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ zIndex: 1200 }",
          "open": "open",
          "anchorEl": "anchorEl",
          "placement": "placement",
          "transition": true
        },
        "snippet": "<Popper // Note: The following zIndex style is specifically for documentation purposes and may not be necessary in your application. sx={{ zIndex: 1200 }} open={open} anchorEl={anchorEl} placement={placement} transition > {({ TransitionProps }) => ( <Fade {...TransitionProps} timeout={350}> <Paper> <Typography sx={{ p: 2 }}>The content of the Popper.</Typography> </Paper> </Fade> )} </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "transition": true,
          "placement": "bottom-start"
        },
        "snippet": "<Popper id={id} open={open} anchorEl={anchorEl} transition placement=\"bottom-start\" > {({ TransitionProps }) => ( <Fade {...TransitionProps} timeout={350}> <Paper> <Typography sx={{ p: 2 }}>The content of the Popper.</Typography> </Paper> </Fade> )} </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "transition": true
        },
        "snippet": "<Popper id={id} open={open} anchorEl={anchorEl} transition> {({ TransitionProps }) => ( <Fade {...TransitionProps} timeout={350}> <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}> The content of the Popper. </Box> </Fade> )} </Popper>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Radio#Radio": [
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "selectedValue === 'a'",
          "onChange": "handleChange",
          "value": "a",
          "name": "radio-buttons",
          "inputProps": "{ 'aria-label': 'A' }"
        },
        "snippet": "<Radio checked={selectedValue === 'a'} onChange={handleChange} value=\"a\" name=\"radio-buttons\" inputProps={{ 'aria-label': 'A' }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "selectedValue === 'b'",
          "onChange": "handleChange",
          "value": "b",
          "name": "radio-buttons",
          "inputProps": "{ 'aria-label': 'B' }"
        },
        "snippet": "<Radio checked={selectedValue === 'b'} onChange={handleChange} value=\"b\" name=\"radio-buttons\" inputProps={{ 'aria-label': 'B' }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableRipple": true,
          "color": "default",
          "checkedIcon": "<BpCheckedIcon />",
          "icon": "<BpIcon />"
        },
        "snippet": "<Radio disableRipple color=\"default\" checkedIcon={<BpCheckedIcon />} icon={<BpIcon />} {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ color: pink[800], '&.Mui-checked': { color: pink[600], }, }"
        },
        "snippet": "<Radio {...controlProps('e')} sx={{ color: pink[800], '&.Mui-checked': { color: pink[600], }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ '& .MuiSvgIcon-root': { fontSize: 28, }, }"
        },
        "snippet": "<Radio {...controlProps('c')} sx={{ '& .MuiSvgIcon-root': { fontSize: 28, }, }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/RadioGroup#RadioGroup": [
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "justifyContent",
          "aria-label": "justifyContent",
          "value": "justifyContent",
          "onChange": "(event) => { setJustifyContent( (event.target as HTMLInputElement).value as GridJustification, ); }"
        },
        "snippet": "<RadioGroup row name=\"justifyContent\" aria-label=\"justifyContent\" value={justifyContent} onChange={(event) => { setJustifyContent( (event.target as HTMLInputElement).value as GridJustification, ); }} > <FormControlLabel value=\"flex-start\" control={<Radio />} label=\"flex-start\" /> <FormControlLabel value=\"center\" control={<Radio />} label=\"center\" /> <FormControlLabel value=\"flex-end\" control={<Radio />} label=\"flex-end\" /> <FormControlLabel value=\"space-between\" control={<Radio />} label=\"space-between\" /> <FormControlLabel value=\"space-around\" control={<Radio />} label=\"space-around\" /> <FormControlLabel value=\"space-evenly\" control={<Radio />} label=\"space-evenly\" /> </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "justifyContent",
          "aria-label": "justifyContent",
          "value": "justifyContent",
          "onChange": "(event) => { setJustifyContent(event.target.value); }"
        },
        "snippet": "<RadioGroup row name=\"justifyContent\" aria-label=\"justifyContent\" value={justifyContent} onChange={(event) => { setJustifyContent(event.target.value); }} > <FormControlLabel value=\"flex-start\" control={<Radio />} label=\"flex-start\" /> <FormControlLabel value=\"center\" control={<Radio />} label=\"center\" /> <FormControlLabel value=\"flex-end\" control={<Radio />} label=\"flex-end\" /> <FormControlLabel value=\"space-between\" control={<Radio />} label=\"space-between\" /> <FormControlLabel value=\"space-around\" control={<Radio />} label=\"space-around\" /> <FormControlLabel value=\"space-evenly\" control={<Radio />} label=\"space-evenly\" /> </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "alignItems",
          "aria-label": "align items",
          "value": "alignItems",
          "onChange": "(event) => { setAlignItems( (event.target as HTMLInputElement).value as GridItemsAlignment, ); }"
        },
        "snippet": "<RadioGroup row name=\"alignItems\" aria-label=\"align items\" value={alignItems} onChange={(event) => { setAlignItems( (event.target as HTMLInputElement).value as GridItemsAlignment, ); }} > <FormControlLabel value=\"flex-start\" control={<Radio />} label=\"flex-start\" /> <FormControlLabel value=\"center\" control={<Radio />} label=\"center\" /> <FormControlLabel value=\"flex-end\" control={<Radio />} label=\"flex-end\" /> <FormControlLabel value=\"stretch\" control={<Radio />} label=\"stretch\" /> <FormControlLabel value=\"baseline\" control={<Radio />} label=\"baseline\" /> </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "alignItems",
          "aria-label": "align items",
          "value": "alignItems",
          "onChange": "(event) => { setAlignItems(event.target.value); }"
        },
        "snippet": "<RadioGroup row name=\"alignItems\" aria-label=\"align items\" value={alignItems} onChange={(event) => { setAlignItems(event.target.value); }} > <FormControlLabel value=\"flex-start\" control={<Radio />} label=\"flex-start\" /> <FormControlLabel value=\"center\" control={<Radio />} label=\"center\" /> <FormControlLabel value=\"flex-end\" control={<Radio />} label=\"flex-end\" /> <FormControlLabel value=\"stretch\" control={<Radio />} label=\"stretch\" /> <FormControlLabel value=\"baseline\" control={<Radio />} label=\"baseline\" /> </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "aria-labelledby": "tick-placement-radio-buttons-group-label",
          "name": "tick-placement",
          "value": "tickPlacement",
          "onChange": "(event) => setTickPlacement( event.target.value as 'start' | 'end' | 'middle' | 'extremities', ) "
        },
        "snippet": "<RadioGroup row aria-labelledby=\"tick-placement-radio-buttons-group-label\" name=\"tick-placement\" value={tickPlacement} onChange={(event) => setTickPlacement( event.target.value as 'start' | 'end' | 'middle' | 'extremities', ) } > <FormControlLabel value=\"start\" control={<Radio />} label=\"start\" /> <FormControlLabel value=\"end\" control={<Radio />} label=\"end\" /> <FormControlLabel value=\"middle\" control={<Radio />} label=\"middle\" /> <FormControlLabel value=\"extremities\" control={<Radio />} label=\"extremities\" /> </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Rating#Rating": [
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "hover-feedback",
          "value": "value",
          "precision": 0.5,
          "getLabelText": "getLabelText",
          "onChange": "(event, newValue) => { setValue(newValue); }",
          "onChangeActive": "(event, newHover) => { setHover(newHover); }",
          "emptyIcon": "<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />"
        },
        "snippet": "<Rating name=\"hover-feedback\" value={value} precision={0.5} getLabelText={getLabelText} onChange={(event, newValue) => { setValue(newValue); }} onChangeActive={(event, newHover) => { setHover(newHover); }} emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "custom-rating-filter-operator",
          "value": "Number(item.value)",
          "onChange": "handleFilterChange",
          "precision": 0.5,
          "ref": "ratingRef"
        },
        "snippet": "<Rating name=\"custom-rating-filter-operator\" value={Number(item.value)} onChange={handleFilterChange} precision={0.5} ref={ratingRef} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "custom-rating-filter-operator",
          "value": "Number(item.value)",
          "onChange": "handleFilterChange",
          "precision": 0.5,
          "ref": "ratingRef"
        },
        "snippet": "<Rating name=\"custom-rating-filter-operator\" value={Number(item.value)} onChange={handleFilterChange} precision={0.5} ref={ratingRef} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "text-feedback",
          "value": "value",
          "readOnly": true,
          "precision": 0.5,
          "emptyIcon": "<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />"
        },
        "snippet": "<Rating name=\"text-feedback\" value={value} readOnly precision={0.5} emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "name": "rating",
          "precision": 1,
          "value": "value",
          "onChange": "handleChange"
        },
        "snippet": "<Rating ref={ref} name=\"rating\" precision={1} value={value} onChange={handleChange} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Select#Select": [
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-multiple-chip-label",
          "id": "demo-multiple-chip",
          "multiple": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />",
          "renderValue": "(selected) => ( <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}> {selected.map((value) => ( <Chip key={value} label={value} /> ))} </Box> )",
          "MenuProps": "MenuProps"
        },
        "snippet": "<Select labelId=\"demo-multiple-chip-label\" id=\"demo-multiple-chip\" multiple value={personName} onChange={handleChange} input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />} renderValue={(selected) => ( <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}> {selected.map((value) => ( <Chip key={value} label={value} /> ))} </Box> )} MenuProps={MenuProps} > {names.map((name) => ( <MenuItem key={name} value={name} style={getStyles(name, personName, theme)} > {name} </MenuItem> ))} </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "multiple": true,
          "displayEmpty": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput />",
          "renderValue": "(selected) => { if (selected.length === 0) { return <em>Placeholder</em>; } return selected.join(', '); }",
          "MenuProps": "MenuProps",
          "inputProps": "{ 'aria-label': 'Without label' }"
        },
        "snippet": "<Select multiple displayEmpty value={personName} onChange={handleChange} input={<OutlinedInput />} renderValue={(selected) => { if (selected.length === 0) { return <em>Placeholder</em>; } return selected.join(', '); }} MenuProps={MenuProps} inputProps={{ 'aria-label': 'Without label' }} > <MenuItem disabled value=\"\"> <em>Placeholder</em> </MenuItem> {names.map((name) => ( <MenuItem key={name} value={name} style={getStyles(name, personName, theme)} > {name} </MenuItem> ))} </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-multiple-checkbox-label",
          "id": "demo-multiple-checkbox",
          "multiple": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput label=\"Tag\" />",
          "renderValue": "(selected) => selected.join(', ')",
          "MenuProps": "MenuProps"
        },
        "snippet": "<Select labelId=\"demo-multiple-checkbox-label\" id=\"demo-multiple-checkbox\" multiple value={personName} onChange={handleChange} input={<OutlinedInput label=\"Tag\" />} renderValue={(selected) => selected.join(', ')} MenuProps={MenuProps} > {names.map((name) => ( <MenuItem key={name} value={name}> <Checkbox checked={personName.indexOf(name) > -1} /> <ListItemText primary={name} /> </MenuItem> ))} </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-controlled-open-select-label",
          "id": "demo-controlled-open-select",
          "open": "open",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "value": "age",
          "label": "Age",
          "onChange": "handleChange"
        },
        "snippet": "<Select labelId=\"demo-controlled-open-select-label\" id=\"demo-controlled-open-select\" open={open} onClose={handleClose} onOpen={handleOpen} value={age} label=\"Age\" onChange={handleChange} > <MenuItem value=\"\"> <em>None</em> </MenuItem> <MenuItem value={10}>Ten</MenuItem> <MenuItem value={20}>Twenty</MenuItem> <MenuItem value={30}>Thirty</MenuItem> </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-multiple-name-label",
          "id": "demo-multiple-name",
          "multiple": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput label=\"Name\" />",
          "MenuProps": "MenuProps"
        },
        "snippet": "<Select labelId=\"demo-multiple-name-label\" id=\"demo-multiple-name\" multiple value={personName} onChange={handleChange} input={<OutlinedInput label=\"Name\" />} MenuProps={MenuProps} > {names.map((name) => ( <MenuItem key={name} value={name} style={getStyles(name, personName, theme)} > {name} </MenuItem> ))} </Select>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Skeleton#Skeleton": [
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: 'grey.900' }",
          "variant": "rectangular",
          "width": 210,
          "height": 118
        },
        "snippet": "<Skeleton sx={{ bgcolor: 'grey.900' }} variant=\"rectangular\" width={210} height={118} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "animation": "wave",
          "height": 10,
          "width": "80%",
          "style": "{ marginBottom: 6 }"
        },
        "snippet": "<Skeleton animation=\"wave\" height={10} width=\"80%\" style={{ marginBottom: 6 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "animation": "wave",
          "variant": "circular",
          "width": 40,
          "height": 40
        },
        "snippet": "<Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ height: 190 }",
          "animation": "wave",
          "variant": "rectangular"
        },
        "snippet": "<Skeleton sx={{ height: 190 }} animation=\"wave\" variant=\"rectangular\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "animation": "wave",
          "height": 10,
          "style": "{ marginBottom: 6 }"
        },
        "snippet": "<Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Slide#Slide": [
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "up",
          "in": "checked",
          "mountOnEnter": true,
          "unmountOnExit": true
        },
        "snippet": "<Slide direction=\"up\" in={checked} mountOnEnter unmountOnExit> {icon} </Slide>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "appear": false,
          "direction": "down",
          "in": "!trigger"
        },
        "snippet": "<Slide appear={false} direction=\"down\" in={!trigger}> {children} </Slide>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked",
          "container": "containerRef.current"
        },
        "snippet": "<Slide in={checked} container={containerRef.current}> {icon} </Slide>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "up",
          "ref": "ref"
        },
        "snippet": "<Slide direction=\"up\" ref={ref} {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "right"
        },
        "snippet": "<Slide {...props} direction=\"right\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Slider#Slider": [
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "min": 5,
          "step": 1,
          "max": 30,
          "scale": "calculateValue",
          "getAriaValueText": "valueLabelFormat",
          "valueLabelFormat": "valueLabelFormat",
          "onChange": "handleChange",
          "valueLabelDisplay": "auto",
          "aria-labelledby": "non-linear-slider"
        },
        "snippet": "<Slider value={value} min={5} step={1} max={30} scale={calculateValue} getAriaValueText={valueLabelFormat} valueLabelFormat={valueLabelFormat} onChange={handleChange} valueLabelDisplay=\"auto\" aria-labelledby=\"non-linear-slider\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "Temperature",
          "defaultValue": 30,
          "getAriaValueText": "valuetext",
          "valueLabelDisplay": "auto",
          "shiftStep": 30,
          "step": 10,
          "marks": true,
          "min": 10,
          "max": 110
        },
        "snippet": "<Slider aria-label=\"Temperature\" defaultValue={30} getAriaValueText={valuetext} valueLabelDisplay=\"auto\" shiftStep={30} step={10} marks min={10} max={110} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "time-indicator",
          "size": "small",
          "value": "position",
          "min": 0,
          "step": 1,
          "max": "duration",
          "onChange": "(_, value) => setPosition(value as number)",
          "sx": "{ color: theme.palette.mode === 'dark' ? '#fff' : 'rgba(0,0,0,0.87)', height: 4, '& .MuiSlider-thumb': { width: 8, height: 8, transition: '0.3s cubic-bezier(.47,1.64,.41,.8)', '&::before': { boxShadow: '0 2px 12px 0 rgba(0,0,0,0.4)', }, '&:hover, &.Mui-focusVisible': { boxShadow: `0px 0px 0px 8px ${ theme.palette.mode === 'dark' ? 'rgb(255 255 255 / 16%)' : 'rgb(0 0 0 / 16%)' }`, }, '&.Mui-active': { width: 20, height: 20, }, }, '& .MuiSlider-rail': { opacity: 0.28, }, }"
        },
        "snippet": "<Slider aria-label=\"time-indicator\" size=\"small\" value={position} min={0} step={1} max={duration} onChange={(_, value) => setPosition(value as number)} sx={{ color: theme.palette.mode === 'dark' ? '#fff' : 'rgba(0,0,0,0.87)', height: 4, '& .MuiSlider-thumb': { width: 8, height: 8, transition: '0.3s cubic-bezier(.47,1.64,.41,.8)', '&::before': { boxShadow: '0 2px 12px 0 rgba(0,0,0,0.4)', }, '&:hover, &.Mui-focusVisible': { boxShadow: `0px 0px 0px 8px ${ theme.palette.mode === 'dark' ? 'rgb(255 255 255 / 16%)' : 'rgb(0 0 0 / 16%)' }`, }, '&.Mui-active': { width: 20, height: 20, }, }, '& .MuiSlider-rail': { opacity: 0.28, }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "Small steps",
          "defaultValue": 5e-8,
          "getAriaValueText": "valuetext",
          "step": 1e-8,
          "marks": true,
          "min": "-0.00000005",
          "max": 1e-7,
          "valueLabelDisplay": "auto"
        },
        "snippet": "<Slider aria-label=\"Small steps\" defaultValue={0.00000005} getAriaValueText={valuetext} step={0.00000001} marks min={-0.00000005} max={0.0000001} valueLabelDisplay=\"auto\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "voronoiMaxRadius",
          "onChange": "handleMaxRadiusChange",
          "valueLabelDisplay": "auto",
          "min": 1,
          "max": 100,
          "aria-labelledby": "max-radius-value",
          "disabled": "disableVoronoi || undefinedRadius"
        },
        "snippet": "<Slider value={voronoiMaxRadius} onChange={handleMaxRadiusChange} valueLabelDisplay=\"auto\" min={1} max={100} aria-labelledby=\"max-radius-value\" disabled={disableVoronoi || undefinedRadius} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Snackbar#Snackbar": [
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "messageInfo ? messageInfo.key : undefined",
          "open": "open",
          "autoHideDuration": 6000,
          "onClose": "handleClose",
          "TransitionProps": "{ onExited: handleExited }",
          "message": "messageInfo ? messageInfo.message : undefined",
          "action": " <React.Fragment> <Button color=\"secondary\" size=\"small\" onClick={handleClose}> UNDO </Button> <IconButton aria-label=\"close\" color=\"inherit\" sx={{ p: 0.5 }} onClick={handleClose} > <CloseIcon /> </IconButton> </React.Fragment> "
        },
        "snippet": "<Snackbar key={messageInfo ? messageInfo.key : undefined} open={open} autoHideDuration={6000} onClose={handleClose} TransitionProps={{ onExited: handleExited }} message={messageInfo ? messageInfo.message : undefined} action={ <React.Fragment> <Button color=\"secondary\" size=\"small\" onClick={handleClose}> UNDO </Button> <IconButton aria-label=\"close\" color=\"inherit\" sx={{ p: 0.5 }} onClick={handleClose} > <CloseIcon /> </IconButton> </React.Fragment> } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "state.open",
          "onClose": "handleClose",
          "TransitionComponent": "state.Transition",
          "message": "I love snacks",
          "key": "state.Transition.name",
          "autoHideDuration": 1200
        },
        "snippet": "<Snackbar open={state.open} onClose={handleClose} TransitionComponent={state.Transition} message=\"I love snacks\" key={state.Transition.name} autoHideDuration={1200} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": true,
          "autoHideDuration": 6000,
          "message": "Archived",
          "action": " <Button color=\"inherit\" size=\"small\"> Undo </Button> ",
          "sx": "{ bottom: { xs: 90, sm: 0 } }"
        },
        "snippet": "<Snackbar open autoHideDuration={6000} message=\"Archived\" action={ <Button color=\"inherit\" size=\"small\"> Undo </Button> } sx={{ bottom: { xs: 90, sm: 0 } }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "TransitionComponent": "transition",
          "message": "I love snacks",
          "key": "transition ? transition.name : ''"
        },
        "snippet": "<Snackbar open={open} onClose={handleClose} TransitionComponent={transition} message=\"I love snacks\" key={transition ? transition.name : ''} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorOrigin": "{ vertical, horizontal }",
          "open": "open",
          "onClose": "handleClose",
          "message": "I love snacks",
          "key": "vertical + horizontal"
        },
        "snippet": "<Snackbar anchorOrigin={{ vertical, horizontal }} open={open} onClose={handleClose} message=\"I love snacks\" key={vertical + horizontal} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SnackbarContent#SnackbarContent": [
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love candy. I love cookies. I love cupcakes. I love cheesecake. I love chocolate.",
          "action": "action"
        },
        "snippet": "<SnackbarContent message={ 'I love candy. I love cookies. I love cupcakes. \\ I love cheesecake. I love chocolate.' } action={action} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love candy. I love cookies. I love cupcakes.",
          "action": "action"
        },
        "snippet": "<SnackbarContent message=\"I love candy. I love cookies. I love cupcakes.\" action={action} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love snacks.",
          "action": "action"
        },
        "snippet": "<SnackbarContent message=\"I love snacks.\" action={action} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love candy. I love cookies. I love cupcakes. I love cheesecake. I love chocolate."
        },
        "snippet": "<SnackbarContent message={ 'I love candy. I love cookies. I love cupcakes. \\ I love cheesecake. I love chocolate.' } />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SpeedDial#SpeedDial": [
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial tooltip example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon />",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "open": "open"
        },
        "snippet": "<SpeedDial ariaLabel=\"SpeedDial tooltip example\" sx={{ position: 'absolute', bottom: 16, right: 16 }} icon={<SpeedDialIcon />} onClose={handleClose} onOpen={handleOpen} open={open} > {actions.map((action) => ( <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} tooltipOpen onClick={handleClose} /> ))} </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial controlled open example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon />",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "open": "open"
        },
        "snippet": "<SpeedDial ariaLabel=\"SpeedDial controlled open example\" sx={{ position: 'absolute', bottom: 16, right: 16 }} icon={<SpeedDialIcon />} onClose={handleClose} onOpen={handleOpen} open={open} > {actions.map((action) => ( <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} onClick={handleClose} /> ))} </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial openIcon example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon openIcon={<EditIcon />} />"
        },
        "snippet": "<SpeedDial ariaLabel=\"SpeedDial openIcon example\" sx={{ position: 'absolute', bottom: 16, right: 16 }} icon={<SpeedDialIcon openIcon={<EditIcon />} />} > {actions.map((action) => ( <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} /> ))} </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial basic example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon />"
        },
        "snippet": "<SpeedDial ariaLabel=\"SpeedDial basic example\" sx={{ position: 'absolute', bottom: 16, right: 16 }} icon={<SpeedDialIcon />} > {actions.map((action) => ( <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} /> ))} </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SpeedDialAction#SpeedDialAction": [
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name",
          "tooltipOpen": true,
          "onClick": "handleClose"
        },
        "snippet": "<SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} tooltipOpen onClick={handleClose} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name",
          "onClick": "handleClose"
        },
        "snippet": "<SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} onClick={handleClose} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name"
        },
        "snippet": "<SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name"
        },
        "snippet": "<SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SpeedDialIcon#SpeedDialIcon": [
      {
        "componentId": "@mui/material/SpeedDialIcon#SpeedDialIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "openIcon": "<EditIcon />"
        },
        "snippet": "<SpeedDialIcon openIcon={<EditIcon />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialIcon#SpeedDialIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SpeedDialIcon />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Stack#Stack": [
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "spacing": 1,
          "direction": "row",
          "alignItems": "center",
          "sx": "{ mb: 1 }",
          "useFlexGap": true,
          "flexWrap": "wrap"
        },
        "snippet": "<Stack spacing={1} direction=\"row\" alignItems=\"center\" sx={{ mb: 1 }} useFlexGap flexWrap=\"wrap\" > <Button variant=\"outlined\" onClick={() => apiRef.current.autosizeColumns(autosizeOptions)} > Autosize columns </Button> <FormControlLabel sx={{ ml: 0 }} control={ <Checkbox checked={includeHeaders} onChange={(ev) => setIncludeHeaders(ev.target.checked)} /> } label=\"Include headers\" /> <FormControlLabel sx={{ ml: 0 }} control={ <Checkbox checked={includeOutliers} onChange={(event) => setExcludeOutliers(event.target.checked)} /> } label=\"Include outliers\" /> <TextField size=\"small\" label=\"Outliers factor\" value={outliersFactor} onChange={(ev) => setOutliersFactor(ev.target.value)} sx={{ width: '12ch' }} /> <FormControlLabel sx={{ ml: 0 }} control={ <Checkbox checked={expand} onChange={(ev) => setExpand(ev.target.checked)} /> } label=\"Expand\" /> </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "spacing": 1,
          "direction": "row",
          "alignItems": "center",
          "sx": "{ mb: 1 }",
          "useFlexGap": true,
          "flexWrap": "wrap"
        },
        "snippet": "<Stack spacing={1} direction=\"row\" alignItems=\"center\" sx={{ mb: 1 }} useFlexGap flexWrap=\"wrap\" > <Button variant=\"outlined\" onClick={fetchData}> Refetch data </Button> </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "{ xs: 'row', xl: 'column' }",
          "spacing": 3,
          "justifyContent": "center",
          "flexWrap": "wrap",
          "useFlexGap": true
        },
        "snippet": "<Stack direction={{ xs: 'row', xl: 'column' }} spacing={3} justifyContent=\"center\" flexWrap=\"wrap\" useFlexGap > <TextField select label=\"highlighted\" value={highlighted} onChange={(event) => setHighlighted(event.target.value)} sx={{ minWidth: 150 }} > <MenuItem value={'none'}>none</MenuItem> <MenuItem value={'item'}>item</MenuItem> <MenuItem value={'series'}>series</MenuItem> </TextField> <TextField select label=\"faded\" value={faded} onChange={(event) => setFaded(event.target.value)} sx={{ minWidth: 150 }} > <MenuItem value={'none'}>none</MenuItem> <MenuItem value={'series'}>series</MenuItem> <MenuItem value={'global'}>global</MenuItem> </TextField> {chartType === 'line' && ( <FormControlLabel control={ <Switch checked={withArea} onChange={(event) => setWithArea(event.target.checked)} /> } label=\"Fill line area\" /> )} </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "{ xs: 'row', xl: 'column' }",
          "spacing": 3,
          "justifyContent": "center",
          "flexWrap": "wrap",
          "useFlexGap": true
        },
        "snippet": "<Stack direction={{ xs: 'row', xl: 'column' }} spacing={3} justifyContent=\"center\" flexWrap=\"wrap\" useFlexGap > <TextField select label=\"highlighted\" value={highlighted} onChange={(event) => setHighlighted(event.target.value)} sx={{ minWidth: 150 }} > <MenuItem value={'none'}>none</MenuItem> <MenuItem value={'item'}>item</MenuItem> <MenuItem value={'series'}>series</MenuItem> </TextField> <TextField select label=\"faded\" value={faded} onChange={(event) => setFaded(event.target.value)} sx={{ minWidth: 150 }} > <MenuItem value={'none'}>none</MenuItem> <MenuItem value={'series'}>series</MenuItem> <MenuItem value={'global'}>global</MenuItem> </TextField> </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "direction",
          "justifyContent": "justifyContent",
          "alignItems": "alignItems",
          "spacing": "spacing",
          "sx": "{ height: 240 }"
        },
        "snippet": "<Stack direction={direction} justifyContent={justifyContent} alignItems={alignItems} spacing={spacing} sx={{ height: 240 }} > {[0, 1, 2].map((value) => ( <Paper key={value} sx={{ p: 2, pt: value + 1, pb: value + 1, color: 'text.secondary', typography: 'body2', backgroundColor: (theme) => theme.palette.mode === 'dark' ? '#1A2027' : '#fff', }} > {`Item ${value + 1}`} </Paper> ))} </Stack>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Step#Step": [
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label",
          "completed": "completed[index]"
        },
        "snippet": "<Step key={label} completed={completed[index]}> <StepButton color=\"inherit\" onClick={handleStep(index)}> {label} </StepButton> </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "step.label"
        },
        "snippet": "<Step key={step.label}> <StepLabel optional={ index === 2 ? ( <Typography variant=\"caption\">Last step</Typography> ) : null } > {step.label} </StepLabel> <StepContent> <Typography>{step.description}</Typography> <Box sx={{ mb: 2 }}> <div> <Button variant=\"contained\" onClick={handleNext} sx={{ mt: 1, mr: 1 }} > {index === steps.length - 1 ? 'Finish' : 'Continue'} </Button> <Button disabled={index === 0} onClick={handleBack} sx={{ mt: 1, mr: 1 }} > Back </Button> </div> </Box> </StepContent> </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label"
        },
        "snippet": "<Step key={label}> <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel> </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label"
        },
        "snippet": "<Step key={label}> <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel> </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label"
        },
        "snippet": "<Step key={label} {...stepProps}> <StepLabel {...labelProps}>{label}</StepLabel> </Step>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/StepButton#StepButton": [
      {
        "componentId": "@mui/material/StepButton#StepButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "inherit",
          "onClick": "handleStep(index)"
        },
        "snippet": "<StepButton color=\"inherit\" onClick={handleStep(index)}> {label} </StepButton>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/StepContent#StepContent": [
      {
        "componentId": "@mui/material/StepContent#StepContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<StepContent> <Typography>{step.description}</Typography> <Box sx={{ mb: 2 }}> <div> <Button variant=\"contained\" onClick={handleNext} sx={{ mt: 1, mr: 1 }} > {index === steps.length - 1 ? 'Finish' : 'Continue'} </Button> <Button disabled={index === 0} onClick={handleBack} sx={{ mt: 1, mr: 1 }} > Back </Button> </div> </Box> </StepContent>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/StepLabel#StepLabel": [
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "optional": " index === 2 ? ( <Typography variant=\"caption\">Last step</Typography> ) : null "
        },
        "snippet": "<StepLabel optional={ index === 2 ? ( <Typography variant=\"caption\">Last step</Typography> ) : null } > {step.label} </StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "StepIconComponent": "ColorlibStepIcon"
        },
        "snippet": "<StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "StepIconComponent": "QontoStepIcon"
        },
        "snippet": "<StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<StepLabel {...labelProps}>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<StepLabel>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Stepper#Stepper": [
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alternativeLabel": true,
          "activeStep": 1,
          "connector": "<ColorlibConnector />"
        },
        "snippet": "<Stepper alternativeLabel activeStep={1} connector={<ColorlibConnector />}> {steps.map((label) => ( <Step key={label}> <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel> </Step> ))} </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alternativeLabel": true,
          "activeStep": 1,
          "connector": "<QontoConnector />"
        },
        "snippet": "<Stepper alternativeLabel activeStep={1} connector={<QontoConnector />}> {steps.map((label) => ( <Step key={label}> <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel> </Step> ))} </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "activeStep": "activeStep",
          "orientation": "vertical"
        },
        "snippet": "<Stepper activeStep={activeStep} orientation=\"vertical\"> {steps.map((step, index) => ( <Step key={step.label}> <StepLabel optional={ index === 2 ? ( <Typography variant=\"caption\">Last step</Typography> ) : null } > {step.label} </StepLabel> <StepContent> <Typography>{step.description}</Typography> <Box sx={{ mb: 2 }}> <div> <Button variant=\"contained\" onClick={handleNext} sx={{ mt: 1, mr: 1 }} > {index === steps.length - 1 ? 'Finish' : 'Continue'} </Button> <Button disabled={index === 0} onClick={handleBack} sx={{ mt: 1, mr: 1 }} > Back </Button> </div> </Box> </StepContent> </Step> ))} </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "nonLinear": true,
          "activeStep": "activeStep"
        },
        "snippet": "<Stepper nonLinear activeStep={activeStep}> {steps.map((label, index) => ( <Step key={label} completed={completed[index]}> <StepButton color=\"inherit\" onClick={handleStep(index)}> {label} </StepButton> </Step> ))} </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "activeStep": 1,
          "alternativeLabel": true
        },
        "snippet": "<Stepper activeStep={1} alternativeLabel> {steps.map((label) => ( <Step key={label}> <StepLabel>{label}</StepLabel> </Step> ))} </Stepper>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SvgIcon#SvgIcon": [
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "className": "close",
          "fontSize": "inherit",
          "style": "{ width: 14, height: 14 }"
        },
        "snippet": "<SvgIcon className=\"close\" fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props} > {/* tslint:disable-next-line: max-line-length */} <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" /> </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "viewBox": "`0 0 ${width} ${height}`"
        },
        "snippet": "<SvgIcon ref={ref} viewBox={`0 0 ${width} ${height}`}> {typeof svgPathData === 'string' ? ( <path d={svgPathData} /> ) : ( /** * A multi-path Font Awesome icon seems to imply a duotune icon. The 0th path seems to * be the faded element (referred to as the \"secondary\" path in the Font Awesome docs) * of a duotone icon. 40% is the default opacity. * * @see https://fontawesome.com/how-to-use/on-the-web/styling/duotone-icons#changing-opacity */ svgPathData.map((d: string, i: number) => ( <path style={{ opacity: i === 0 ? 0.4 : 1 }} d={d} /> )) )} </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SvgIcon> {/* credit: plus icon from https://heroicons.com/ */} <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" > <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4.5 12a7.5 7.5 0 0015 0m-15 0a7.5 7.5 0 1115 0m-15 0H3m16.5 0H21m-1.5 0H12m-8.457 3.077l1.41-.513m14.095-5.13l1.41-.513M5.106 17.785l1.15-.964m11.49-9.642l1.149-.964M7.501 19.795l.75-1.3m7.5-12.99l.75-1.3m-6.063 16.658l.26-1.477m2.605-14.772l.26-1.477m0 17.726l-.26-1.477M10.698 4.614l-.26-1.477M16.5 19.794l-.75-1.299M7.5 4.205L12 12m6.894 5.785l-1.149-.964M6.256 7.178l-1.15-.964m15.352 8.864l-1.41-.513M4.954 9.435l-1.41-.514M12.002 12l-3.75 6.495\" /> </svg> </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SvgIcon {...props}> <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" /> </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SwipeableDrawer#SwipeableDrawer": [
      {
        "componentId": "@mui/material/SwipeableDrawer#SwipeableDrawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": "container",
          "anchor": "bottom",
          "open": "open",
          "onClose": "toggleDrawer(false)",
          "onOpen": "toggleDrawer(true)",
          "swipeAreaWidth": "drawerBleeding",
          "disableSwipeToOpen": false,
          "ModalProps": "{ keepMounted: true, }"
        },
        "snippet": "<SwipeableDrawer container={container} anchor=\"bottom\" open={open} onClose={toggleDrawer(false)} onOpen={toggleDrawer(true)} swipeAreaWidth={drawerBleeding} disableSwipeToOpen={false} ModalProps={{ keepMounted: true, }} > <StyledBox sx={{ position: 'absolute', top: -drawerBleeding, borderTopLeftRadius: 8, borderTopRightRadius: 8, visibility: 'visible', right: 0, left: 0, }} > <Puller /> <Typography sx={{ p: 2, color: 'text.secondary' }}>51 results</Typography> </StyledBox> <StyledBox sx={{ px: 2, pb: 2, height: '100%', overflow: 'auto', }} > <Skeleton variant=\"rectangular\" height=\"100%\" /> </StyledBox> </SwipeableDrawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SwipeableDrawer#SwipeableDrawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchor": "anchor",
          "open": "state[anchor]",
          "onClose": "toggleDrawer(anchor, false)",
          "onOpen": "toggleDrawer(anchor, true)"
        },
        "snippet": "<SwipeableDrawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)} onOpen={toggleDrawer(anchor, true)} > {list(anchor)} </SwipeableDrawer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Switch#Switch": [
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "end",
          "onChange": "handleToggle('bluetooth')",
          "checked": "checked.indexOf('bluetooth') !== -1",
          "inputProps": "{ 'aria-labelledby': 'switch-list-label-bluetooth', }"
        },
        "snippet": "<Switch edge=\"end\" onChange={handleToggle('bluetooth')} checked={checked.indexOf('bluetooth') !== -1} inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "end",
          "onChange": "handleToggle('wifi')",
          "checked": "checked.indexOf('wifi') !== -1",
          "inputProps": "{ 'aria-labelledby': 'switch-list-label-wifi', }"
        },
        "snippet": "<Switch edge=\"end\" onChange={handleToggle('wifi')} checked={checked.indexOf('wifi') !== -1} inputProps={{ 'aria-labelledby': 'switch-list-label-wifi', }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "loading",
          "onChange": "() => setLoading(!loading)",
          "name": "loading",
          "color": "primary"
        },
        "snippet": "<Switch checked={loading} onChange={() => setLoading(!loading)} name=\"loading\" color=\"primary\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "disabledItemsFocusable",
          "onChange": "handleToggle",
          "name": "disabledItemsFocusable"
        },
        "snippet": "<Switch checked={disabledItemsFocusable} onChange={handleToggle} name=\"disabledItemsFocusable\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "checked",
          "onChange": "handleChange",
          "inputProps": "{ 'aria-label': 'controlled' }"
        },
        "snippet": "<Switch checked={checked} onChange={handleChange} inputProps={{ 'aria-label': 'controlled' }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Tab#Tab": [
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "a",
          "onClick": "(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => { // Routing libraries handle this, you can remove the onClick handle when using them. if (samePageLinkNavigation(event)) { event.preventDefault(); } }",
          "aria-current": "props.selected && 'page'"
        },
        "snippet": "<Tab component=\"a\" onClick={(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => { // Routing libraries handle this, you can remove the onClick handle when using them. if (samePageLinkNavigation(event)) { event.preventDefault(); } }} aria-current={props.selected && 'page'} {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "one",
          "label": "New Arrivals in the Longest Text of Nonfiction that should appear in the next line",
          "wrapped": true
        },
        "snippet": "<Tab value=\"one\" label=\"New Arrivals in the Longest Text of Nonfiction that should appear in the next line\" wrapped />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<PhoneMissedIcon />",
          "iconPosition": "start",
          "label": "start"
        },
        "snippet": "<Tab icon={<PhoneMissedIcon />} iconPosition=\"start\" label=\"start\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<PersonPinIcon />",
          "iconPosition": "bottom",
          "label": "bottom"
        },
        "snippet": "<Tab icon={<PersonPinIcon />} iconPosition=\"bottom\" label=\"bottom\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<FavoriteIcon />",
          "iconPosition": "end",
          "label": "end"
        },
        "snippet": "<Tab icon={<FavoriteIcon />} iconPosition=\"end\" label=\"end\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Table#Table": [
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 750 }",
          "aria-labelledby": "tableTitle",
          "size": "dense ? 'small' : 'medium'"
        },
        "snippet": "<Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\" size={dense ? 'small' : 'medium'} > <EnhancedTableHead numSelected={selected.length} order={order} orderBy={orderBy} onSelectAllClick={handleSelectAllClick} onRequestSort={handleRequestSort} rowCount={rows.length} /> <TableBody> {visibleRows.map((row, index) => { const isItemSelected = isSelected(row.id); const labelId = `enhanced-table-checkbox-${index}`; return ( <TableRow hover onClick={(event) => handleClick(event, row.id)} role=\"checkbox\" aria-checked={isItemSelected} tabIndex={-1} key={row.id} selected={isItemSelected} sx={{ cursor: 'pointer' }} > <TableCell padding=\"checkbox\"> <Checkbox color=\"primary\" checked={isItemSelected} inputProps={{ 'aria-labelledby': labelId, }} /> </TableCell> <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\" > {row.name} </TableCell> <TableCell align=\"right\">{row.calories}</TableCell> <TableCell align=\"right\">{row.fat}</TableCell> <TableCell align=\"right\">{row.carbs}</TableCell> <TableCell align=\"right\">{row.protein}</TableCell> </TableRow> ); })} {emptyRows > 0 && ( <TableRow style={{ height: (dense ? 33 : 53) * emptyRows, }} > <TableCell colSpan={6} /> </TableRow> )} </TableBody> </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 650 }",
          "size": "small",
          "aria-label": "a dense table"
        },
        "snippet": "<Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\"> <TableHead> <TableRow> <TableCell>Dessert (100g serving)</TableCell> <TableCell align=\"right\">Calories</TableCell> <TableCell align=\"right\">Fat&nbsp;(g)</TableCell> <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell> <TableCell align=\"right\">Protein&nbsp;(g)</TableCell> </TableRow> </TableHead> <TableBody> {rows.map((row) => ( <TableRow key={row.name} sx={{ '&:last-child td, &:last-child th': { border: 0 } }} > <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell> <TableCell align=\"right\">{row.calories}</TableCell> <TableCell align=\"right\">{row.fat}</TableCell> <TableCell align=\"right\">{row.carbs}</TableCell> <TableCell align=\"right\">{row.protein}</TableCell> </TableRow> ))} </TableBody> </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 700 }",
          "aria-label": "spanning table"
        },
        "snippet": "<Table sx={{ minWidth: 700 }} aria-label=\"spanning table\"> <TableHead> <TableRow> <TableCell align=\"center\" colSpan={3}> Details </TableCell> <TableCell align=\"right\">Price</TableCell> </TableRow> <TableRow> <TableCell>Desc</TableCell> <TableCell align=\"right\">Qty.</TableCell> <TableCell align=\"right\">Unit</TableCell> <TableCell align=\"right\">Sum</TableCell> </TableRow> </TableHead> <TableBody> {rows.map((row) => ( <TableRow key={row.desc}> <TableCell>{row.desc}</TableCell> <TableCell align=\"right\">{row.qty}</TableCell> <TableCell align=\"right\">{row.unit}</TableCell> <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell> </TableRow> ))} <TableRow> <TableCell rowSpan={3} /> <TableCell colSpan={2}>Subtotal</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell> </TableRow> <TableRow> <TableCell>Tax</TableCell> <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell> </TableRow> <TableRow> <TableCell colSpan={2}>Total</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell> </TableRow> </TableBody> </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 500 }",
          "aria-label": "custom pagination table"
        },
        "snippet": "<Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\"> <TableBody> {(rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows ).map((row) => ( <TableRow key={row.name}> <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell> <TableCell style={{ width: 160 }} align=\"right\"> {row.calories} </TableCell> <TableCell style={{ width: 160 }} align=\"right\"> {row.fat} </TableCell> </TableRow> ))} {emptyRows > 0 && ( <TableRow style={{ height: 53 * emptyRows }}> <TableCell colSpan={6} /> </TableRow> )} </TableBody> <TableFooter> <TableRow> <TablePagination rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]} colSpan={3} count={rows.length} rowsPerPage={rowsPerPage} page={page} slotProps={{ select: { inputProps: { 'aria-label': 'rows per page', }, native: true, }, }} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} ActionsComponent={TablePaginationActions} /> </TableRow> </TableFooter> </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 700 }",
          "aria-label": "customized table"
        },
        "snippet": "<Table sx={{ minWidth: 700 }} aria-label=\"customized table\"> <TableHead> <TableRow> <StyledTableCell>Dessert (100g serving)</StyledTableCell> <StyledTableCell align=\"right\">Calories</StyledTableCell> <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell> <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell> <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell> </TableRow> </TableHead> <TableBody> {rows.map((row) => ( <StyledTableRow key={row.name}> <StyledTableCell component=\"th\" scope=\"row\"> {row.name} </StyledTableCell> <StyledTableCell align=\"right\">{row.calories}</StyledTableCell> <StyledTableCell align=\"right\">{row.fat}</StyledTableCell> <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell> <StyledTableCell align=\"right\">{row.protein}</StyledTableCell> </StyledTableRow> ))} </TableBody> </Table>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableBody#TableBody": [
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref"
        },
        "snippet": "<TableBody {...props} ref={ref} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody> {visibleRows.map((row, index) => { const isItemSelected = isSelected(row.id); const labelId = `enhanced-table-checkbox-${index}`; return ( <TableRow hover onClick={(event) => handleClick(event, row.id)} role=\"checkbox\" aria-checked={isItemSelected} tabIndex={-1} key={row.id} selected={isItemSelected} sx={{ cursor: 'pointer' }} > <TableCell padding=\"checkbox\"> <Checkbox color=\"primary\" checked={isItemSelected} inputProps={{ 'aria-labelledby': labelId, }} /> </TableCell> <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\" > {row.name} </TableCell> <TableCell align=\"right\">{row.calories}</TableCell> <TableCell align=\"right\">{row.fat}</TableCell> <TableCell align=\"right\">{row.carbs}</TableCell> <TableCell align=\"right\">{row.protein}</TableCell> </TableRow> ); })} {emptyRows > 0 && ( <TableRow style={{ height: (dense ? 33 : 53) * emptyRows, }} > <TableCell colSpan={6} /> </TableRow> )} </TableBody>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody> {rows.map((row) => ( <TableRow key={row.desc}> <TableCell>{row.desc}</TableCell> <TableCell align=\"right\">{row.qty}</TableCell> <TableCell align=\"right\">{row.unit}</TableCell> <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell> </TableRow> ))} <TableRow> <TableCell rowSpan={3} /> <TableCell colSpan={2}>Subtotal</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell> </TableRow> <TableRow> <TableCell>Tax</TableCell> <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell> </TableRow> <TableRow> <TableCell colSpan={2}>Total</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell> </TableRow> </TableBody>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody> {(rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows ).map((row) => ( <TableRow key={row.name}> <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell> <TableCell style={{ width: 160 }} align=\"right\"> {row.calories} </TableCell> <TableCell style={{ width: 160 }} align=\"right\"> {row.fat} </TableCell> </TableRow> ))} {emptyRows > 0 && ( <TableRow style={{ height: 53 * emptyRows }}> <TableCell colSpan={6} /> </TableRow> )} </TableBody>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody> {rows.map((row) => ( <StyledTableRow key={row.name}> <StyledTableCell component=\"th\" scope=\"row\"> {row.name} </StyledTableCell> <StyledTableCell align=\"right\">{row.calories}</StyledTableCell> <StyledTableCell align=\"right\">{row.fat}</StyledTableCell> <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell> <StyledTableCell align=\"right\">{row.protein}</StyledTableCell> </StyledTableRow> ))} </TableBody>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableCell#TableCell": [
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "column.dataKey",
          "variant": "head",
          "align": "column.numeric || false ? 'right' : 'left'",
          "style": "{ width: column.width }",
          "sx": "{ backgroundColor: 'background.paper', }"
        },
        "snippet": "<TableCell key={column.dataKey} variant=\"head\" align={column.numeric || false ? 'right' : 'left'} style={{ width: column.width }} sx={{ backgroundColor: 'background.paper', }} > {column.label} </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "headCell.id",
          "align": "headCell.numeric ? 'right' : 'left'",
          "padding": "headCell.disablePadding ? 'none' : 'normal'",
          "sortDirection": "orderBy === headCell.id ? order : false"
        },
        "snippet": "<TableCell key={headCell.id} align={headCell.numeric ? 'right' : 'left'} padding={headCell.disablePadding ? 'none' : 'normal'} sortDirection={orderBy === headCell.id ? order : false} > <TableSortLabel active={orderBy === headCell.id} direction={orderBy === headCell.id ? order : 'asc'} onClick={createSortHandler(headCell.id)} > {headCell.label} {orderBy === headCell.id ? ( <Box component=\"span\" sx={visuallyHidden}> {order === 'desc' ? 'sorted descending' : 'sorted ascending'} </Box> ) : null} </TableSortLabel> </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "th",
          "id": "labelId",
          "scope": "row",
          "padding": "none"
        },
        "snippet": "<TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\" > {row.name} </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "column.id",
          "align": "column.align",
          "style": "{ top: 57, minWidth: column.minWidth }"
        },
        "snippet": "<TableCell key={column.id} align={column.align} style={{ top: 57, minWidth: column.minWidth }} > {column.label} </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "column.id",
          "align": "column.align",
          "style": "{ minWidth: column.minWidth }"
        },
        "snippet": "<TableCell key={column.id} align={column.align} style={{ minWidth: column.minWidth }} > {column.label} </TableCell>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableContainer#TableContainer": [
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper",
          "ref": "ref"
        },
        "snippet": "<TableContainer component={Paper} {...props} ref={ref} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper"
        },
        "snippet": "<TableContainer component={Paper}> <Table sx={{ minWidth: 700 }} aria-label=\"spanning table\"> <TableHead> <TableRow> <TableCell align=\"center\" colSpan={3}> Details </TableCell> <TableCell align=\"right\">Price</TableCell> </TableRow> <TableRow> <TableCell>Desc</TableCell> <TableCell align=\"right\">Qty.</TableCell> <TableCell align=\"right\">Unit</TableCell> <TableCell align=\"right\">Sum</TableCell> </TableRow> </TableHead> <TableBody> {rows.map((row) => ( <TableRow key={row.desc}> <TableCell>{row.desc}</TableCell> <TableCell align=\"right\">{row.qty}</TableCell> <TableCell align=\"right\">{row.unit}</TableCell> <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell> </TableRow> ))} <TableRow> <TableCell rowSpan={3} /> <TableCell colSpan={2}>Subtotal</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell> </TableRow> <TableRow> <TableCell>Tax</TableCell> <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell> </TableRow> <TableRow> <TableCell colSpan={2}>Total</TableCell> <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell> </TableRow> </TableBody> </Table> </TableContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper"
        },
        "snippet": "<TableContainer component={Paper}> <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\"> <TableBody> {(rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows ).map((row) => ( <TableRow key={row.name}> <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell> <TableCell style={{ width: 160 }} align=\"right\"> {row.calories} </TableCell> <TableCell style={{ width: 160 }} align=\"right\"> {row.fat} </TableCell> </TableRow> ))} {emptyRows > 0 && ( <TableRow style={{ height: 53 * emptyRows }}> <TableCell colSpan={6} /> </TableRow> )} </TableBody> <TableFooter> <TableRow> <TablePagination rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]} colSpan={3} count={rows.length} rowsPerPage={rowsPerPage} page={page} slotProps={{ select: { inputProps: { 'aria-label': 'rows per page', }, native: true, }, }} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} ActionsComponent={TablePaginationActions} /> </TableRow> </TableFooter> </Table> </TableContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper"
        },
        "snippet": "<TableContainer component={Paper}> <Table sx={{ minWidth: 700 }} aria-label=\"customized table\"> <TableHead> <TableRow> <StyledTableCell>Dessert (100g serving)</StyledTableCell> <StyledTableCell align=\"right\">Calories</StyledTableCell> <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell> <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell> <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell> </TableRow> </TableHead> <TableBody> {rows.map((row) => ( <StyledTableRow key={row.name}> <StyledTableCell component=\"th\" scope=\"row\"> {row.name} </StyledTableCell> <StyledTableCell align=\"right\">{row.calories}</StyledTableCell> <StyledTableCell align=\"right\">{row.fat}</StyledTableCell> <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell> <StyledTableCell align=\"right\">{row.protein}</StyledTableCell> </StyledTableRow> ))} </TableBody> </Table> </TableContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ maxHeight: 440 }"
        },
        "snippet": "<TableContainer sx={{ maxHeight: 440 }}> <Table stickyHeader aria-label=\"sticky table\"> <TableHead> <TableRow> <TableCell align=\"center\" colSpan={2}> Country </TableCell> <TableCell align=\"center\" colSpan={3}> Details </TableCell> </TableRow> <TableRow> {columns.map((column) => ( <TableCell key={column.id} align={column.align} style={{ top: 57, minWidth: column.minWidth }} > {column.label} </TableCell> ))} </TableRow> </TableHead> <TableBody> {rows .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) .map((row) => { return ( <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}> {columns.map((column) => { const value = row[column.id]; return ( <TableCell key={column.id} align={column.align}> {column.format && typeof value === 'number' ? column.format(value) : value} </TableCell> ); })} </TableRow> ); })} </TableBody> </Table> </TableContainer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableFooter#TableFooter": [
      {
        "componentId": "@mui/material/TableFooter#TableFooter",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableFooter> <TableRow> <TablePagination rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]} colSpan={3} count={rows.length} rowsPerPage={rowsPerPage} page={page} slotProps={{ select: { inputProps: { 'aria-label': 'rows per page', }, native: true, }, }} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} ActionsComponent={TablePaginationActions} /> </TableRow> </TableFooter>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableHead#TableHead": [
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref"
        },
        "snippet": "<TableHead {...props} ref={ref} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead> <TableRow> <TableCell padding=\"checkbox\"> <Checkbox color=\"primary\" indeterminate={numSelected > 0 && numSelected < rowCount} checked={rowCount > 0 && numSelected === rowCount} onChange={onSelectAllClick} inputProps={{ 'aria-label': 'select all desserts', }} /> </TableCell> {headCells.map((headCell) => ( <TableCell key={headCell.id} align={headCell.numeric ? 'right' : 'left'} padding={headCell.disablePadding ? 'none' : 'normal'} sortDirection={orderBy === headCell.id ? order : false} > <TableSortLabel active={orderBy === headCell.id} direction={orderBy === headCell.id ? order : 'asc'} onClick={createSortHandler(headCell.id)} > {headCell.label} {orderBy === headCell.id ? ( <Box component=\"span\" sx={visuallyHidden}> {order === 'desc' ? 'sorted descending' : 'sorted ascending'} </Box> ) : null} </TableSortLabel> </TableCell> ))} </TableRow> </TableHead>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead> <TableRow> <StyledTableCell>Dessert (100g serving)</StyledTableCell> <StyledTableCell align=\"right\">Calories</StyledTableCell> <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell> <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell> <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell> </TableRow> </TableHead>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead> <TableRow> <TableCell align=\"center\" colSpan={2}> Country </TableCell> <TableCell align=\"center\" colSpan={3}> Details </TableCell> </TableRow> <TableRow> {columns.map((column) => ( <TableCell key={column.id} align={column.align} style={{ top: 57, minWidth: column.minWidth }} > {column.label} </TableCell> ))} </TableRow> </TableHead>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead> <TableRow> <TableCell align=\"center\" colSpan={3}> Details </TableCell> <TableCell align=\"right\">Price</TableCell> </TableRow> <TableRow> <TableCell>Desc</TableCell> <TableCell align=\"right\">Qty.</TableCell> <TableCell align=\"right\">Unit</TableCell> <TableCell align=\"right\">Sum</TableCell> </TableRow> </TableHead>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TablePagination#TablePagination": [
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rowsPerPageOptions": "[5, 10, 25, { label: 'All', value: -1 }]",
          "colSpan": 3,
          "count": "rows.length",
          "rowsPerPage": "rowsPerPage",
          "page": "page",
          "slotProps": "{ select: { inputProps: { 'aria-label': 'rows per page', }, native: true, }, }",
          "onPageChange": "handleChangePage",
          "onRowsPerPageChange": "handleChangeRowsPerPage",
          "ActionsComponent": "TablePaginationActions"
        },
        "snippet": "<TablePagination rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]} colSpan={3} count={rows.length} rowsPerPage={rowsPerPage} page={page} slotProps={{ select: { inputProps: { 'aria-label': 'rows per page', }, native: true, }, }} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} ActionsComponent={TablePaginationActions} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rowsPerPageOptions": "[10, 25, 100]",
          "component": "div",
          "count": "rows.length",
          "rowsPerPage": "rowsPerPage",
          "page": "page",
          "onPageChange": "handleChangePage",
          "onRowsPerPageChange": "handleChangeRowsPerPage"
        },
        "snippet": "<TablePagination rowsPerPageOptions={[10, 25, 100]} component=\"div\" count={rows.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rowsPerPageOptions": "[5, 10, 25]",
          "component": "div",
          "count": "rows.length",
          "rowsPerPage": "rowsPerPage",
          "page": "page",
          "onPageChange": "handleChangePage",
          "onRowsPerPageChange": "handleChangeRowsPerPage"
        },
        "snippet": "<TablePagination rowsPerPageOptions={[5, 10, 25]} component=\"div\" count={rows.length} rowsPerPage={rowsPerPage} page={page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div",
          "count": 100,
          "page": "page",
          "onPageChange": "handleChangePage",
          "rowsPerPage": "rowsPerPage",
          "onRowsPerPageChange": "handleChangeRowsPerPage"
        },
        "snippet": "<TablePagination component=\"div\" count={100} page={page} onPageChange={handleChangePage} rowsPerPage={rowsPerPage} onRowsPerPageChange={handleChangeRowsPerPage} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableRow#TableRow": [
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "hover": true,
          "onClick": "(event) => handleClick(event, row.id)",
          "role": "checkbox",
          "aria-checked": "isItemSelected",
          "tabIndex": "-1",
          "key": "row.id",
          "selected": "isItemSelected",
          "sx": "{ cursor: 'pointer' }"
        },
        "snippet": "<TableRow hover onClick={(event) => handleClick(event, row.id)} role=\"checkbox\" aria-checked={isItemSelected} tabIndex={-1} key={row.id} selected={isItemSelected} sx={{ cursor: 'pointer' }} > <TableCell padding=\"checkbox\"> <Checkbox color=\"primary\" checked={isItemSelected} inputProps={{ 'aria-labelledby': labelId, }} /> </TableCell> <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\" > {row.name} </TableCell> <TableCell align=\"right\">{row.calories}</TableCell> <TableCell align=\"right\">{row.fat}</TableCell> <TableCell align=\"right\">{row.carbs}</TableCell> <TableCell align=\"right\">{row.protein}</TableCell> </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "hover": true,
          "role": "checkbox",
          "tabIndex": "-1",
          "key": "row.code"
        },
        "snippet": "<TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}> {columns.map((column) => { const value = row[column.id]; return ( <TableCell key={column.id} align={column.align}> {column.format && typeof value === 'number' ? column.format(value) : value} </TableCell> ); })} </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "row.name",
          "sx": "{ '&:last-child td, &:last-child th': { border: 0 } }"
        },
        "snippet": "<TableRow key={row.name} sx={{ '&:last-child td, &:last-child th': { border: 0 } }} > <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell> <TableCell align=\"right\">{row.calories}</TableCell> <TableCell align=\"right\">{row.fat}</TableCell> <TableCell align=\"right\">{row.carbs}</TableCell> <TableCell align=\"right\">{row.protein}</TableCell> </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ '& > *': { borderBottom: 'unset' } }"
        },
        "snippet": "<TableRow sx={{ '& > *': { borderBottom: 'unset' } }}> <TableCell> <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)} > {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />} </IconButton> </TableCell> <TableCell component=\"th\" scope=\"row\"> {row.name} </TableCell> <TableCell align=\"right\">{row.calories}</TableCell> <TableCell align=\"right\">{row.fat}</TableCell> <TableCell align=\"right\">{row.carbs}</TableCell> <TableCell align=\"right\">{row.protein}</TableCell> </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "historyRow.date"
        },
        "snippet": "<TableRow key={historyRow.date}> <TableCell component=\"th\" scope=\"row\"> {historyRow.date} </TableCell> <TableCell>{historyRow.customerId}</TableCell> <TableCell align=\"right\">{historyRow.amount}</TableCell> <TableCell align=\"right\"> {Math.round(historyRow.amount * row.price * 100) / 100} </TableCell> </TableRow>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableSortLabel#TableSortLabel": [
      {
        "componentId": "@mui/material/TableSortLabel#TableSortLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "active": "orderBy === headCell.id",
          "direction": "orderBy === headCell.id ? order : 'asc'",
          "onClick": "createSortHandler(headCell.id)"
        },
        "snippet": "<TableSortLabel active={orderBy === headCell.id} direction={orderBy === headCell.id ? order : 'asc'} onClick={createSortHandler(headCell.id)} > {headCell.label} {orderBy === headCell.id ? ( <Box component=\"span\" sx={visuallyHidden}> {order === 'desc' ? 'sorted descending' : 'sorted ascending'} </Box> ) : null} </TableSortLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Tabs#Tabs": [
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "variant": "scrollable",
          "value": "value",
          "onChange": "handleChange",
          "aria-label": "Vertical tabs example",
          "sx": "{ borderRight: 1, borderColor: 'divider' }"
        },
        "snippet": "<Tabs orientation=\"vertical\" variant=\"scrollable\" value={value} onChange={handleChange} aria-label=\"Vertical tabs example\" sx={{ borderRight: 1, borderColor: 'divider' }} > <Tab label=\"Item One\" {...a11yProps(0)} /> <Tab label=\"Item Two\" {...a11yProps(1)} /> <Tab label=\"Item Three\" {...a11yProps(2)} /> <Tab label=\"Item Four\" {...a11yProps(3)} /> <Tab label=\"Item Five\" {...a11yProps(4)} /> <Tab label=\"Item Six\" {...a11yProps(5)} /> <Tab label=\"Item Seven\" {...a11yProps(6)} /> </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "variant": "scrollable",
          "scrollButtons": true,
          "aria-label": "visible arrows tabs example",
          "sx": "{ [`& .${tabsClasses.scrollButtons}`]: { '&.Mui-disabled': { opacity: 0.3 }, }, }"
        },
        "snippet": "<Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons aria-label=\"visible arrows tabs example\" sx={{ [`& .${tabsClasses.scrollButtons}`]: { '&.Mui-disabled': { opacity: 0.3 }, }, }} > <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> <Tab label=\"Item Four\" /> <Tab label=\"Item Five\" /> <Tab label=\"Item Six\" /> <Tab label=\"Item Seven\" /> </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "variant": "scrollable",
          "scrollButtons": true,
          "allowScrollButtonsMobile": true,
          "aria-label": "scrollable force tabs example"
        },
        "snippet": "<Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons allowScrollButtonsMobile aria-label=\"scrollable force tabs example\" > <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> <Tab label=\"Item Four\" /> <Tab label=\"Item Five\" /> <Tab label=\"Item Six\" /> <Tab label=\"Item Seven\" /> </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "indicatorColor": "secondary",
          "textColor": "inherit",
          "variant": "fullWidth",
          "aria-label": "full width tabs example"
        },
        "snippet": "<Tabs value={value} onChange={handleChange} indicatorColor=\"secondary\" textColor=\"inherit\" variant=\"fullWidth\" aria-label=\"full width tabs example\" > <Tab label=\"Item One\" {...a11yProps(0)} /> <Tab label=\"Item Two\" {...a11yProps(1)} /> <Tab label=\"Item Three\" {...a11yProps(2)} /> </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "indicatorColor": "primary",
          "textColor": "primary",
          "variant": "fullWidth",
          "aria-label": "action tabs example"
        },
        "snippet": "<Tabs value={value} onChange={handleChange} indicatorColor=\"primary\" textColor=\"primary\" variant=\"fullWidth\" aria-label=\"action tabs example\" > <Tab label=\"Item One\" {...a11yProps(0)} /> <Tab label=\"Item Two\" {...a11yProps(1)} /> <Tab label=\"Item Three\" {...a11yProps(2)} /> </Tabs>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TextField#TextField": [
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-select-currency-native",
          "select": true,
          "required": true,
          "color": "primary",
          "label": "Native select",
          "defaultValue": "EUR",
          "SelectProps": "{ native: true, }",
          "helperText": "Please select your currency",
          "variant": "filled",
          "placeholder": "Currency...",
          "size": "medium",
          "rows": 5
        },
        "snippet": "<TextField id=\"outlined-select-currency-native\" select required color=\"primary\" label=\"Native select\" defaultValue=\"EUR\" SelectProps={{ native: true, }} helperText=\"Please select your currency\" variant=\"filled\" placeholder=\"Currency...\" size=\"medium\" rows={5} > {currencies.map((option) => ( <option key={option.value} value={option.value}> {option.label} </option> ))} </TextField>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "error": true,
          "id": "filled-error-helper-text",
          "label": "Error",
          "defaultValue": "Hello World",
          "helperText": "Incorrect entry.",
          "variant": "filled",
          "placeholder": "Placeholder text...",
          "size": "medium",
          "fullWidth": true,
          "multiline": true,
          "rows": 10
        },
        "snippet": "<TextField error id=\"filled-error-helper-text\" label=\"Error\" defaultValue=\"Hello World\" helperText=\"Incorrect entry.\" variant=\"filled\" placeholder=\"Placeholder text...\" size=\"medium\" fullWidth multiline rows={10} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "lower-bound-input",
          "placeholder": "From",
          "label": "From",
          "variant": "standard",
          "value": "Number(filterValueState[0])",
          "onChange": "handleLowerFilterChange",
          "type": "number",
          "inputRef": "focusElementRef",
          "sx": "{ mr: 2 }"
        },
        "snippet": "<TextField name=\"lower-bound-input\" placeholder=\"From\" label=\"From\" variant=\"standard\" value={Number(filterValueState[0])} onChange={handleLowerFilterChange} type=\"number\" inputRef={focusElementRef} sx={{ mr: 2 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "autoFocus": true,
          "required": true,
          "margin": "dense",
          "id": "name",
          "name": "email",
          "label": "Email Address",
          "type": "email",
          "fullWidth": true,
          "variant": "standard"
        },
        "snippet": "<TextField autoFocus required margin=\"dense\" id=\"name\" name=\"email\" label=\"Email Address\" type=\"email\" fullWidth variant=\"standard\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "upper-bound-input",
          "placeholder": "To",
          "label": "To",
          "variant": "standard",
          "value": "Number(filterValueState[1])",
          "onChange": "handleUpperFilterChange",
          "type": "number",
          "InputProps": "applying ? { endAdornment: <SyncIcon /> } : {}"
        },
        "snippet": "<TextField name=\"upper-bound-input\" placeholder=\"To\" label=\"To\" variant=\"standard\" value={Number(filterValueState[1])} onChange={handleUpperFilterChange} type=\"number\" InputProps={applying ? { endAdornment: <SyncIcon /> } : {}} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ToggleButton#ToggleButton": [
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "value": "value",
          "sx": "{ p: 1 }"
        },
        "snippet": "<ToggleButton key={value} value={value} sx={{ p: 1 }}> <div style={{ width: 15, height: 15, backgroundColor: value, display: 'inline-block', }} /> </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "check",
          "selected": "selected",
          "onChange": "() => { setSelected(!selected); }"
        },
        "snippet": "<ToggleButton value=\"check\" selected={selected} onChange={() => { setSelected(!selected); }} > <CheckIcon /> </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "color",
          "aria-label": "color",
          "disabled": true
        },
        "snippet": "<ToggleButton value=\"color\" aria-label=\"color\" disabled> <FormatColorFillIcon /> <ArrowDropDownIcon /> </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "color",
          "aria-label": "color",
          "disabled": true
        },
        "snippet": "<ToggleButton value=\"color\" aria-label=\"color\" disabled> <FormatColorFillIcon /> <ArrowDropDownIcon /> </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "justify",
          "aria-label": "justified",
          "disabled": true
        },
        "snippet": "<ToggleButton value=\"justify\" aria-label=\"justified\" disabled> <FormatAlignJustifyIcon /> </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ToggleButtonGroup#ToggleButtonGroup": [
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullWidth": true,
          "color": "primary",
          "value": "currentComponent",
          "onChange": "handleCurrentComponentChange",
          "exclusive": true
        },
        "snippet": "<ToggleButtonGroup fullWidth color=\"primary\" value={currentComponent} onChange={handleCurrentComponentChange} exclusive > <ToggleButton value={'date'}>date</ToggleButton> <ToggleButton value={'time'}>time</ToggleButton> <ToggleButton value={'dateRange'}>date range</ToggleButton> </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "highlightedItem?.seriesId ?? null",
          "exclusive": true,
          "onChange": "handleHighLightedSeries",
          "aria-label": "highlighted series",
          "fullWidth": true
        },
        "snippet": "<ToggleButtonGroup value={highlightedItem?.seriesId ?? null} exclusive onChange={handleHighLightedSeries} aria-label=\"highlighted series\" fullWidth > {['A', 'B'].map((type) => ( <ToggleButton key={type} value={type} aria-label=\"left aligned\"> Series {type} </ToggleButton> ))} </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "primary",
          "value": "alignment",
          "exclusive": true,
          "onChange": "handleChange",
          "aria-label": "Platform"
        },
        "snippet": "<ToggleButtonGroup color=\"primary\" value={alignment} exclusive onChange={handleChange} aria-label=\"Platform\" > <ToggleButton value=\"web\">Web</ToggleButton> <ToggleButton value=\"android\">Android</ToggleButton> <ToggleButton value=\"ios\">iOS</ToggleButton> </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "chartType",
          "exclusive": true,
          "onChange": "handleChartType",
          "aria-label": "chart type",
          "fullWidth": true
        },
        "snippet": "<ToggleButtonGroup value={chartType} exclusive onChange={handleChartType} aria-label=\"chart type\" fullWidth > {['bar', 'line', 'scatter', 'pie'].map((type) => ( <ToggleButton key={type} value={type} aria-label=\"left aligned\"> {type} </ToggleButton> ))} </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "alignment",
          "exclusive": true,
          "onChange": "handleAlignment",
          "aria-label": "text alignment"
        },
        "snippet": "<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\" > <ToggleButton value=\"left\" aria-label=\"left aligned\"> <FormatAlignLeftIcon /> </ToggleButton> <ToggleButton value=\"center\" aria-label=\"centered\"> <FormatAlignCenterIcon /> </ToggleButton> <ToggleButton value=\"right\" aria-label=\"right aligned\"> <FormatAlignRightIcon /> </ToggleButton> <ToggleButton value=\"justify\" aria-label=\"justified\" disabled> <FormatAlignJustifyIcon /> </ToggleButton> </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Toolbar#Toolbar": [
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableGutters": true
        },
        "snippet": "<Toolbar disableGutters> <AdbIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} /> <Typography variant=\"h6\" noWrap component=\"a\" href=\"#app-bar-with-responsive-menu\" sx={{ mr: 2, display: { xs: 'none', md: 'flex' }, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }} > LOGO </Typography> <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}> <IconButton size=\"large\" aria-label=\"account of current user\" aria-controls=\"menu-appbar\" aria-haspopup=\"true\" onClick={handleOpenNavMenu} color=\"inherit\" > <MenuIcon /> </IconButton> <Menu id=\"menu-appbar\" anchorEl={anchorElNav} anchorOrigin={{ vertical: 'bottom', horizontal: 'left', }} keepMounted transformOrigin={{ vertical: 'top', horizontal: 'left', }} open={Boolean(anchorElNav)} onClose={handleCloseNavMenu} sx={{ display: { xs: 'block', md: 'none' }, }} > {pages.map((page) => ( <MenuItem key={page} onClick={handleCloseNavMenu}> <Typography textAlign=\"center\">{page}</Typography> </MenuItem> ))} </Menu> </Box> <AdbIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} /> <Typography variant=\"h5\" noWrap component=\"a\" href=\"#app-bar-with-responsive-menu\" sx={{ mr: 2, display: { xs: 'flex', md: 'none' }, flexGrow: 1, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }} > LOGO </Typography> <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}> {pages.map((page) => ( <Button key={page} onClick={handleCloseNavMenu} sx={{ my: 2, color: 'white', display: 'block' }} > {page} </Button> ))} </Box> <Box sx={{ flexGrow: 0 }}> <Tooltip title=\"Open settings\"> <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}> <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" /> </IconButton> </Tooltip> <Menu sx={{ mt: '45px' }} id=\"menu-appbar\" anchorEl={anchorElUser} anchorOrigin={{ vertical: 'top', horizontal: 'right', }} keepMounted transformOrigin={{ vertical: 'top', horizontal: 'right', }} open={Boolean(anchorElUser)} onClose={handleCloseUserMenu} > {settings.map((setting) => ( <MenuItem key={setting} onClick={handleCloseUserMenu}> <Typography textAlign=\"center\">{setting}</Typography> </MenuItem> ))} </Menu> </Box> </Toolbar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ pl: { sm: 2 }, pr: { xs: 1, sm: 1 }, ...(numSelected > 0 && { bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity), }), }"
        },
        "snippet": "<Toolbar sx={{ pl: { sm: 2 }, pr: { xs: 1, sm: 1 }, ...(numSelected > 0 && { bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity), }), }} > {numSelected > 0 ? ( <Typography sx={{ flex: '1 1 100%' }} color=\"inherit\" variant=\"subtitle1\" component=\"div\" > {numSelected} selected </Typography> ) : ( <Typography sx={{ flex: '1 1 100%' }} variant=\"h6\" id=\"tableTitle\" component=\"div\" > Nutrition </Typography> )} {numSelected > 0 ? ( <Tooltip title=\"Delete\"> <IconButton> <DeleteIcon /> </IconButton> </Tooltip> ) : ( <Tooltip title=\"Filter list\"> <IconButton> <FilterListIcon /> </IconButton> </Tooltip> )} </Toolbar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "dense"
        },
        "snippet": "<Toolbar variant=\"dense\"> <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}> <MenuIcon /> </IconButton> <Typography variant=\"h6\" color=\"inherit\" component=\"div\"> Photos </Typography> </Toolbar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "back-to-top-anchor"
        },
        "snippet": "<Toolbar id=\"back-to-top-anchor\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<Toolbar> <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" sx={{ mr: 2 }} > <MenuIcon /> </IconButton> <Typography variant=\"h6\" noWrap component=\"div\" sx={{ display: { xs: 'none', sm: 'block' } }} > MUI </Typography> <Search> <SearchIconWrapper> <SearchIcon /> </SearchIconWrapper> <StyledInputBase placeholder=\"Search…\" inputProps={{ 'aria-label': 'search' }} /> </Search> <Box sx={{ flexGrow: 1 }} /> <Box sx={{ display: { xs: 'none', md: 'flex' } }}> <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\"> <Badge badgeContent={4} color=\"error\"> <MailIcon /> </Badge> </IconButton> <IconButton size=\"large\" aria-label=\"show 17 new notifications\" color=\"inherit\" > <Badge badgeContent={17} color=\"error\"> <NotificationsIcon /> </Badge> </IconButton> <IconButton size=\"large\" edge=\"end\" aria-label=\"account of current user\" aria-controls={menuId} aria-haspopup=\"true\" onClick={handleProfileMenuOpen} color=\"inherit\" > <AccountCircle /> </IconButton> </Box> <Box sx={{ display: { xs: 'flex', md: 'none' } }}> <IconButton size=\"large\" aria-label=\"show more\" aria-controls={mobileMenuId} aria-haspopup=\"true\" onClick={handleMobileMenuOpen} color=\"inherit\" > <MoreIcon /> </IconButton> </Box> </Toolbar>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Tooltip#Tooltip": [
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "TransitionComponent": "Fade",
          "TransitionProps": "{ timeout: 600 }",
          "title": "Add",
          "placement": "top-end",
          "slotProps": "{ popper: { modifiers: [ { name: 'offset', options: { offset: [0, -14], }, }, ], }, }"
        },
        "snippet": "<Tooltip TransitionComponent={Fade} TransitionProps={{ timeout: 600 }} title=\"Add\" placement=\"top-end\" slotProps={{ popper: { modifiers: [ { name: 'offset', options: { offset: [0, -14], }, }, ], }, }} > <Button>Fade</Button> </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "You don't have permission to do this",
          "followCursor": true,
          "disableInteractive": true,
          "placement": "left-end"
        },
        "snippet": "<Tooltip title=\"You don't have permission to do this\" followCursor disableInteractive placement=\"left-end\" > <Box sx={{ bgcolor: 'text.disabled', color: 'background.paper', p: 2 }}> Disabled Action </Box> </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "Add",
          "enterDelay": 500,
          "leaveDelay": 200,
          "placement": "bottom-end"
        },
        "snippet": "<Tooltip title=\"Add\" enterDelay={500} leaveDelay={200} placement=\"bottom-end\" > <Button>[500ms, 200ms]</Button> </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "Add",
          "slotProps": "{ popper: { modifiers: [ { name: 'offset', options: { offset: [0, -14], }, }, ], }, }",
          "placement": "right-start"
        },
        "snippet": "<Tooltip title=\"Add\" slotProps={{ popper: { modifiers: [ { name: 'offset', options: { offset: [0, -14], }, }, ], }, }} placement=\"right-start\" > <Button>Offset</Button> </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "enterTouchDelay": 0,
          "placement": "top",
          "title": "value"
        },
        "snippet": "<Tooltip enterTouchDelay={0} placement=\"top\" title={value}> {children} </Tooltip>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#Typography": [
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "h5",
          "noWrap": true,
          "component": "a",
          "href": "#app-bar-with-responsive-menu",
          "sx": "{ mr: 2, display: { xs: 'flex', md: 'none' }, flexGrow: 1, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }"
        },
        "snippet": "<Typography variant=\"h5\" noWrap component=\"a\" href=\"#app-bar-with-responsive-menu\" sx={{ mr: 2, display: { xs: 'flex', md: 'none' }, flexGrow: 1, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }} > LOGO </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "h6",
          "noWrap": true,
          "component": "a",
          "href": "#app-bar-with-responsive-menu",
          "sx": "{ mr: 2, display: { xs: 'none', md: 'flex' }, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }"
        },
        "snippet": "<Typography variant=\"h6\" noWrap component=\"a\" href=\"#app-bar-with-responsive-menu\" sx={{ mr: 2, display: { xs: 'none', md: 'flex' }, fontFamily: 'monospace', fontWeight: 700, letterSpacing: '.3rem', color: 'inherit', textDecoration: 'none', }} > LOGO </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div",
          "role": "tabpanel",
          "hidden": "value !== index",
          "id": "`action-tabpanel-${index}`",
          "aria-labelledby": "`action-tab-${index}`"
        },
        "snippet": "<Typography component=\"div\" role=\"tabpanel\" hidden={value !== index} id={`action-tabpanel-${index}`} aria-labelledby={`action-tab-${index}`} {...other} > {value === index && <Box sx={{ p: 3 }}>{children}</Box>} </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "span",
          "variant": "subtitle1",
          "color": "inherit",
          "sx": "{ position: 'relative', p: 4, pt: 2, pb: (theme) => `calc(${theme.spacing(1)} + 6px)`, }"
        },
        "snippet": "<Typography component=\"span\" variant=\"subtitle1\" color=\"inherit\" sx={{ position: 'relative', p: 4, pt: 2, pb: (theme) => `calc(${theme.spacing(1)} + 6px)`, }} > {image.title} <ImageMarked className=\"MuiImageMarked-root\" /> </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-owns": "open ? 'mouse-over-popover' : undefined",
          "aria-haspopup": "true",
          "onMouseEnter": "handlePopoverOpen",
          "onMouseLeave": "handlePopoverClose"
        },
        "snippet": "<Typography aria-owns={open ? 'mouse-over-popover' : undefined} aria-haspopup=\"true\" onMouseEnter={handlePopoverOpen} onMouseLeave={handlePopoverClose} > Hover with a Popover. </Typography>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Zoom#Zoom": [
      {
        "componentId": "@mui/material/Zoom#Zoom",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "fab.color",
          "in": "value === index",
          "timeout": "transitionDuration",
          "style": "{ transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`, }",
          "unmountOnExit": true
        },
        "snippet": "<Zoom key={fab.color} in={value === index} timeout={transitionDuration} style={{ transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`, }} unmountOnExit > <Fab sx={fab.sx} aria-label={fab.label} color={fab.color}> {fab.icon} </Fab> </Zoom>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Zoom#Zoom",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked",
          "style": "{ transitionDelay: checked ? '500ms' : '0ms' }"
        },
        "snippet": "<Zoom in={checked} style={{ transitionDelay: checked ? '500ms' : '0ms' }}> {icon} </Zoom>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Zoom#Zoom",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked"
        },
        "snippet": "<Zoom in={checked}>{icon}</Zoom>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/GlobalStyles#GlobalStyles": [
      {
        "componentId": "@mui/material/GlobalStyles#GlobalStyles",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "styles": "(theme) => ({ body: { backgroundColor: theme.palette.background.paper }, })"
        },
        "snippet": "<GlobalStyles styles={(theme) => ({ body: { backgroundColor: theme.palette.background.paper }, })} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/BarChart#BarChart": [
      {
        "componentId": "@mui/x-charts/BarChart#BarChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dataset": "dataset",
          "xAxis": "[{ scaleType: 'band', dataKey: 'month' }]",
          "series": "[ { dataKey: 'london', label: 'London', valueFormatter }, { dataKey: 'paris', label: 'Paris', valueFormatter }, { dataKey: 'newYork', label: 'New York', valueFormatter }, { dataKey: 'seoul', label: 'Seoul', valueFormatter }, ]",
          "yAxis": "[ { scaleType: 'linear', label: 'rainfall (mm)', }, ]",
          "width": 500,
          "height": 300,
          "sx": "{ [`.${axisClasses.left} .${axisClasses.label}`]: { transform: 'translate(-20px, 0)', }, }",
          "margin": "{ top: 10, right: 10 }",
          "slotProps": "{ legend: { direction: 'row', position: { vertical: 'bottom', horizontal: 'middle' }, padding: -5, } }"
        },
        "snippet": "<BarChart dataset={dataset} xAxis={[{ scaleType: 'band', dataKey: 'month' }]} series={[ { dataKey: 'london', label: 'London', valueFormatter }, { dataKey: 'paris', label: 'Paris', valueFormatter }, { dataKey: 'newYork', label: 'New York', valueFormatter }, { dataKey: 'seoul', label: 'Seoul', valueFormatter }, ]} yAxis={[ { scaleType: 'linear', label: 'rainfall (mm)', }, ]} width={500} height={300} sx={{ [`.${axisClasses.left} .${axisClasses.label}`]: { transform: 'translate(-20px, 0)', }, }} margin={{ top: 10, right: 10 }} slotProps={{ legend: { direction: 'row', position: { vertical: 'bottom', horizontal: 'middle' }, padding: -5, } }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/BarChart#BarChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dataset": "dataset",
          "yAxis": "[{ scaleType: 'band', dataKey: 'month' }]",
          "series": "[{ dataKey: 'seoul', label: 'Seoul rainfall', valueFormatter }]",
          "layout": "horizontal",
          "grid": "{ vertical: true }",
          "xAxis": "[ { label: 'rainfall (mm)', }, ]",
          "width": 500,
          "height": 400
        },
        "snippet": "<BarChart dataset={dataset} yAxis={[{ scaleType: 'band', dataKey: 'month' }]} series={[{ dataKey: 'seoul', label: 'Seoul rainfall', valueFormatter }]} layout=\"horizontal\" grid={{ vertical: true }} xAxis={[ { label: 'rainfall (mm)', }, ]} width={500} height={400} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/BarChart#BarChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 300,
          "grid": "{ horizontal: true }",
          "series": "series",
          "barLabel": "(item, context) => { if ((item.value ?? 0) > 10) { return 'High'; } return context.bar.height < 60 ? null : item.value?.toString(); }",
          "margin": "{ top: 10, bottom: 20, }",
          "yAxis": "[ { colorMap: (colorY === 'continuous' && { type: 'continuous', min: -10, max: 10, color: ['red', 'green'], }) || (colorY === 'piecewise' && { type: 'piecewise', thresholds: [0], colors: ['red', 'green'], }) || undefined, }, ]",
          "xAxis": "[ { scaleType: 'band', data: [ new Date(2019, 1, 1), new Date(2020, 1, 1), new Date(2021, 1, 1), new Date(2022, 1, 1), new Date(2023, 1, 1), new Date(2024, 1, 1), ], valueFormatter: (value) => value.getFullYear().toString(), colorMap: (colorX === 'ordinal' && { type: 'ordinal', colors: [ '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#08589e', ], }) || (colorX === 'continuous' && { type: 'continuous', min: new Date(2019, 1, 1), max: new Date(2024, 1, 1), color: ['green', 'orange'], }) || (colorX === 'piecewise' && { type: 'piecewise', thresholds: [new Date(2021, 1, 1), new Date(2023, 1, 1)], colors: ['blue', 'red', 'blue'], }) || undefined, }, ]"
        },
        "snippet": "<BarChart height={300} grid={{ horizontal: true }} series={series} barLabel={(item, context) => { if ((item.value ?? 0) > 10) { return 'High'; } return context.bar.height < 60 ? null : item.value?.toString(); }} margin={{ top: 10, bottom: 20, }} yAxis={[ { colorMap: (colorY === 'continuous' && { type: 'continuous', min: -10, max: 10, color: ['red', 'green'], }) || (colorY === 'piecewise' && { type: 'piecewise', thresholds: [0], colors: ['red', 'green'], }) || undefined, }, ]} xAxis={[ { scaleType: 'band', data: [ new Date(2019, 1, 1), new Date(2020, 1, 1), new Date(2021, 1, 1), new Date(2022, 1, 1), new Date(2023, 1, 1), new Date(2024, 1, 1), ], valueFormatter: (value) => value.getFullYear().toString(), colorMap: (colorX === 'ordinal' && { type: 'ordinal', colors: [ '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#08589e', ], }) || (colorX === 'continuous' && { type: 'continuous', min: new Date(2019, 1, 1), max: new Date(2024, 1, 1), color: ['green', 'orange'], }) || (colorX === 'piecewise' && { type: 'piecewise', thresholds: [new Date(2021, 1, 1), new Date(2023, 1, 1)], colors: ['blue', 'red', 'blue'], }) || undefined, }, ]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/BarChart#BarChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "(theme) => ({ [`.${barElementClasses.root}`]: { fill: theme.palette.background.paper, strokeWidth: 2, }, [`.MuiBarElement-series-l_id`]: { stroke: colors[0], }, [`.MuiBarElement-series-r_id`]: { stroke: colors[1], }, [`.${axisClasses.root}`]: { [`.${axisClasses.tick}, .${axisClasses.line}`]: { stroke: '#006BD6', strokeWidth: 3, }, [`.${axisClasses.tickLabel}`]: { fill: '#006BD6', }, }, border: `1px solid rgba(${theme.palette.mode === 'dark' ? '255,255,255' : '0, 0, 0'}, 0.1)`, backgroundImage: `linear-gradient(rgba(${theme.palette.mode === 'dark' ? '255,255,255' : '0, 0, 0'}, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(${theme.palette.mode === 'dark' ? '255,255,255' : '0, 0, 0'}, 0.1) 1px, transparent 1px)`, backgroundSize: '35px 35px', backgroundPosition: '20px 20px, 20px 20px', })",
          "xAxis": "[{ scaleType: 'band', data: labels }]",
          "series": "[ { data: lData, label: 'l', id: 'l_id' }, { data: rData, label: 'r', id: 'r_id' }, ]",
          "colors": "colors",
          "width": 500,
          "height": 300
        },
        "snippet": "<BarChart sx={(theme) => ({ [`.${barElementClasses.root}`]: { fill: theme.palette.background.paper, strokeWidth: 2, }, [`.MuiBarElement-series-l_id`]: { stroke: colors[0], }, [`.MuiBarElement-series-r_id`]: { stroke: colors[1], }, [`.${axisClasses.root}`]: { [`.${axisClasses.tick}, .${axisClasses.line}`]: { stroke: '#006BD6', strokeWidth: 3, }, [`.${axisClasses.tickLabel}`]: { fill: '#006BD6', }, }, border: `1px solid rgba(${theme.palette.mode === 'dark' ? '255,255,255' : '0, 0, 0'}, 0.1)`, backgroundImage: `linear-gradient(rgba(${theme.palette.mode === 'dark' ? '255,255,255' : '0, 0, 0'}, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(${theme.palette.mode === 'dark' ? '255,255,255' : '0, 0, 0'}, 0.1) 1px, transparent 1px)`, backgroundSize: '35px 35px', backgroundPosition: '20px 20px, 20px 20px', })} xAxis={[{ scaleType: 'band', data: labels }]} series={[ { data: lData, label: 'l', id: 'l_id' }, { data: rData, label: 'r', id: 'r_id' }, ]} colors={colors} width={500} height={300} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/BarChart#BarChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dataset": "balanceSheet",
          "series": "addLabels([ { dataKey: 'currAss', stack: 'assets' }, { dataKey: 'nCurrAss', stack: 'assets' }, { dataKey: 'curLia', stack: 'liability' }, { dataKey: 'nCurLia', stack: 'liability' }, { dataKey: 'capStock', stack: 'equity' }, { dataKey: 'retEarn', stack: 'equity' }, { dataKey: 'treas', stack: 'equity' }, ])",
          "xAxis": "[{ scaleType: 'band', dataKey: 'year' }]",
          "slotProps": "{ legend: { hidden: true } }",
          "width": 600,
          "height": 350
        },
        "snippet": "<BarChart dataset={balanceSheet} series={addLabels([ { dataKey: 'currAss', stack: 'assets' }, { dataKey: 'nCurrAss', stack: 'assets' }, { dataKey: 'curLia', stack: 'liability' }, { dataKey: 'nCurLia', stack: 'liability' }, { dataKey: 'capStock', stack: 'equity' }, { dataKey: 'retEarn', stack: 'equity' }, { dataKey: 'treas', stack: 'equity' }, ])} xAxis={[{ scaleType: 'band', dataKey: 'year' }]} slotProps={{ legend: { hidden: true } }} width={600} height={350} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/PieChart#PieChart": [
      {
        "componentId": "@mui/x-charts/PieChart#PieChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "series": "[ { startAngle: -90, endAngle: 90, paddingAngle: 5, innerRadius: 60, outerRadius: 80, data, }, ]",
          "margin": "{ right: 5 }",
          "width": 200,
          "height": 200,
          "slotProps": "{ legend: { hidden: true }, }"
        },
        "snippet": "<PieChart series={[ { startAngle: -90, endAngle: 90, paddingAngle: 5, innerRadius: 60, outerRadius: 80, data, }, ]} margin={{ right: 5 }} width={200} height={200} slotProps={{ legend: { hidden: true }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/PieChart#PieChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "series": "[ { paddingAngle: 5, innerRadius: 60, outerRadius: 80, data, }, ]",
          "margin": "{ right: 5 }",
          "width": 200,
          "height": 200,
          "legend": "{ hidden: true }"
        },
        "snippet": "<PieChart series={[ { paddingAngle: 5, innerRadius: 60, outerRadius: 80, data, }, ]} margin={{ right: 5 }} width={200} height={200} legend={{ hidden: true }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/PieChart#PieChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "series": "[ { data: items, }, ]",
          "onItemClick": "handleClick",
          "width": 400,
          "height": 200,
          "margin": "{ right: 200 }"
        },
        "snippet": "<PieChart series={[ { data: items, }, ]} onItemClick={handleClick} width={400} height={200} margin={{ right: 200 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/PieChart#PieChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "series": "[ { innerRadius: 0, outerRadius: 80, data: data1, }, { innerRadius: 100, outerRadius: 120, data: data2, }, ]",
          "width": 400,
          "height": 300,
          "slotProps": "{ legend: { hidden: true }, }"
        },
        "snippet": "<PieChart series={[ { innerRadius: 0, outerRadius: 80, data: data1, }, { innerRadius: 100, outerRadius: 120, data: data2, }, ]} width={400} height={300} slotProps={{ legend: { hidden: true }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/PieChart#PieChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "series": "series",
          "slotProps": "{ legend: { hidden: isHidden } }",
          "width": 400,
          "height": 200
        },
        "snippet": "<PieChart series={series} slotProps={{ legend: { hidden: isHidden } }} width={400} height={200} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ScatterChart#ScatterPlot": [
      {
        "componentId": "@mui/x-charts/ScatterChart#ScatterPlot",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ScatterPlot />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/TimeClock#TimeClock": [
      {
        "componentId": "@mui/x-date-pickers/TimeClock#TimeClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "slotProps": "slotProps",
          "showViewSwitcher": true
        },
        "snippet": "<TimeClock defaultValue={dayjs('2022-04-17T15:30')} slotProps={slotProps} showViewSwitcher />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeClock#TimeClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "slots": "slots",
          "showViewSwitcher": true
        },
        "snippet": "<TimeClock defaultValue={dayjs('2022-04-17T15:30')} slots={slots} showViewSwitcher />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeClock#TimeClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<TimeClock value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeClock#TimeClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "ampm": false
        },
        "snippet": "<TimeClock defaultValue={dayjs('2022-04-17T15:30')} ampm={false} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeClock#TimeClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "disabled": true
        },
        "snippet": "<TimeClock defaultValue={dayjs('2022-04-17T15:30')} disabled />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DigitalClock#DigitalClock": [
      {
        "componentId": "@mui/x-date-pickers/DigitalClock#DigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "skipDisabled": true,
          "minTime": "dayjs('2022-04-17T09:00')",
          "timeStep": 60
        },
        "snippet": "<DigitalClock skipDisabled minTime={dayjs('2022-04-17T09:00')} timeStep={60} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DigitalClock#DigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<DigitalClock value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DigitalClock#DigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "ampm": false
        },
        "snippet": "<DigitalClock defaultValue={dayjs('2022-04-17T15:30')} ampm={false} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DigitalClock#DigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "disabled": true
        },
        "snippet": "<DigitalClock defaultValue={dayjs('2022-04-17T15:30')} disabled />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DigitalClock#DigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "readOnly": true
        },
        "snippet": "<DigitalClock defaultValue={dayjs('2022-04-17T15:30')} readOnly />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock": [
      {
        "componentId": "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "skipDisabled": true,
          "shouldDisableTime": "shouldDisableTime",
          "ampm": false
        },
        "snippet": "<MultiSectionDigitalClock skipDisabled shouldDisableTime={shouldDisableTime} ampm={false} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "timeSteps": "{ hours: 2, minutes: 15, seconds: 10 }",
          "views": "['hours', 'minutes', 'seconds']"
        },
        "snippet": "<MultiSectionDigitalClock timeSteps={{ hours: 2, minutes: 15, seconds: 10 }} views={['hours', 'minutes', 'seconds']} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<MultiSectionDigitalClock value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "ampm": false
        },
        "snippet": "<MultiSectionDigitalClock defaultValue={dayjs('2022-04-17T15:30')} ampm={false} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/MultiSectionDigitalClock#MultiSectionDigitalClock",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "disabled": true
        },
        "snippet": "<MultiSectionDigitalClock defaultValue={dayjs('2022-04-17T15:30')} disabled />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/PickersDay#PickersDay": [
      {
        "componentId": "@mui/x-date-pickers/PickersDay#PickersDay",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "outsideCurrentMonth": "outsideCurrentMonth",
          "day": "day"
        },
        "snippet": "<PickersDay {...other} outsideCurrentMonth={outsideCurrentMonth} day={day} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DateField#DateField": [
      {
        "componentId": "@mui/x-date-pickers/DateField#DateField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: '300px' }",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)",
          "onClear": "() => setCleared(true)",
          "clearable": true
        },
        "snippet": "<DateField sx={{ width: '300px' }} value={value} onChange={(newValue) => setValue(newValue)} onClear={() => setCleared(true)} clearable />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateField#DateField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Date Field",
          "format": "M/D/YYYY",
          "defaultValue": "dayjs('2022-04-17')",
          "shouldRespectLeadingZeros": true
        },
        "snippet": "<DateField label=\"Date Field\" format=\"M/D/YYYY\" defaultValue={dayjs('2022-04-17')} shouldRespectLeadingZeros />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateField#DateField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "inputRef": "inputRef",
          "selectedSections": "selectedSections",
          "onSelectedSectionsChange": "setSelectedSections"
        },
        "snippet": "<DateField inputRef={inputRef} selectedSections={selectedSections} onSelectedSectionsChange={setSelectedSections} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateField#DateField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Controlled field",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<DateField label=\"Controlled field\" value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateField#DateField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Dash separator",
          "defaultValue": "dayjs('2022-04-17')",
          "format": "MM-DD-YYYY"
        },
        "snippet": "<DateField label=\"Dash separator\" defaultValue={dayjs('2022-04-17')} format=\"MM-DD-YYYY\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/TimeField#TimeField": [
      {
        "componentId": "@mui/x-date-pickers/TimeField#TimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Format without meridiem",
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "format": "HH:mm"
        },
        "snippet": "<TimeField label=\"Format without meridiem\" defaultValue={dayjs('2022-04-17T15:30')} format=\"HH:mm\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeField#TimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Format with seconds",
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "format": "HH:mm:ss"
        },
        "snippet": "<TimeField label=\"Format with seconds\" defaultValue={dayjs('2022-04-17T15:30')} format=\"HH:mm:ss\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeField#TimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Format with meridiem",
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "format": "hh:mm a"
        },
        "snippet": "<TimeField label=\"Format with meridiem\" defaultValue={dayjs('2022-04-17T15:30')} format=\"hh:mm a\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeField#TimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Controlled field",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<TimeField label=\"Controlled field\" value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimeField#TimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Uncontrolled field",
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<TimeField label=\"Uncontrolled field\" defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DateTimeField#DateTimeField": [
      {
        "componentId": "@mui/x-date-pickers/DateTimeField#DateTimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Localized format with full letter month",
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "format": "LLL"
        },
        "snippet": "<DateTimeField label=\"Localized format with full letter month\" defaultValue={dayjs('2022-04-17T15:30')} format=\"LLL\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimeField#DateTimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Format without meridiem",
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "format": "L HH:mm"
        },
        "snippet": "<DateTimeField label=\"Format without meridiem\" defaultValue={dayjs('2022-04-17T15:30')} format=\"L HH:mm\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimeField#DateTimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Format with meridiem",
          "defaultValue": "dayjs('2022-04-17T15:30')",
          "format": "L hh:mm a"
        },
        "snippet": "<DateTimeField label=\"Format with meridiem\" defaultValue={dayjs('2022-04-17T15:30')} format=\"L hh:mm a\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimeField#DateTimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Controlled field",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<DateTimeField label=\"Controlled field\" value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimeField#DateTimeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Uncontrolled field",
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<DateTimeField label=\"Uncontrolled field\" defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DateCalendar#DateCalendar": [
      {
        "componentId": "@mui/x-date-pickers/DateCalendar#DateCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)",
          "showDaysOutsideCurrentMonth": true,
          "displayWeekNumber": true,
          "slots": "{ day: Day }",
          "slotProps": "{ day: (ownerState) => ({ selectedDay: value, hoveredDay, onPointerEnter: () => setHoveredDay(ownerState.day), onPointerLeave: () => setHoveredDay(null), }) as any, }"
        },
        "snippet": "<DateCalendar value={value} onChange={(newValue) => setValue(newValue)} showDaysOutsideCurrentMonth displayWeekNumber slots={{ day: Day }} slotProps={{ day: (ownerState) => ({ selectedDay: value, hoveredDay, onPointerEnter: () => setHoveredDay(ownerState.day), onPointerLeave: () => setHoveredDay(null), }) as any, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateCalendar#DateCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "initialValue",
          "loading": "isLoading",
          "onMonthChange": "handleMonthChange",
          "renderLoading": "() => <DayCalendarSkeleton />",
          "slots": "{ day: ServerDay, }",
          "slotProps": "{ day: { highlightedDays, } as any, }"
        },
        "snippet": "<DateCalendar defaultValue={initialValue} loading={isLoading} onMonthChange={handleMonthChange} renderLoading={() => <DayCalendarSkeleton />} slots={{ day: ServerDay, }} slotProps={{ day: { highlightedDays, } as any, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateCalendar#DateCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ monthButton: { sx: { color: '#1565c0', borderRadius: '2px', borderColor: '#2196f3', border: '1px solid', backgroundColor: '#90caf9', }, }, }",
          "views": "['month', 'day']",
          "openTo": "month"
        },
        "snippet": "<DateCalendar slotProps={{ monthButton: { sx: { color: '#1565c0', borderRadius: '2px', borderColor: '#2196f3', border: '1px solid', backgroundColor: '#90caf9', }, }, }} views={['month', 'day']} openTo=\"month\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateCalendar#DateCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)",
          "dayOfWeekFormatter": "(weekday) => `${weekday.format('dd')}.`"
        },
        "snippet": "<DateCalendar value={value} onChange={(newValue) => setValue(newValue)} dayOfWeekFormatter={(weekday) => `${weekday.format('dd')}.`} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateCalendar#DateCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slots": "{ monthButton: CustomMonthButton }",
          "views": "['month', 'day']",
          "openTo": "month"
        },
        "snippet": "<DateCalendar slots={{ monthButton: CustomMonthButton }} views={['month', 'day']} openTo=\"month\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/MonthCalendar#MonthCalendar": [
      {
        "componentId": "@mui/x-date-pickers/MonthCalendar#MonthCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<MonthCalendar />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/YearCalendar#YearCalendar": [
      {
        "componentId": "@mui/x-date-pickers/YearCalendar#YearCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<YearCalendar />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DayCalendarSkeleton#DayCalendarSkeleton": [
      {
        "componentId": "@mui/x-date-pickers/DayCalendarSkeleton#DayCalendarSkeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DayCalendarSkeleton />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DatePicker#DatePicker": [
      {
        "componentId": "@mui/x-date-pickers/DatePicker#DatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Picker with error icon",
          "maxDate": "dayjs('2022-04-17')",
          "defaultValue": "dayjs('2022-04-18')",
          "onError": "setError",
          "slots": "{ inputAdornment: CustomInputAdornment }",
          "slotProps": "{ inputAdornment: { hasError: !!error } as any, }"
        },
        "snippet": "<DatePicker label=\"Picker with error icon\" maxDate={dayjs('2022-04-17')} defaultValue={dayjs('2022-04-18')} onError={setError} slots={{ inputAdornment: CustomInputAdornment }} slotProps={{ inputAdornment: { hasError: !!error } as any, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DatePicker#DatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slots": "{ ...props.slots, field: ButtonField }",
          "slotProps": "{ ...props.slotProps, field: { setOpen } as any }",
          "open": "open",
          "onClose": "() => setOpen(false)",
          "onOpen": "() => setOpen(true)"
        },
        "snippet": "<DatePicker slots={{ ...props.slots, field: ButtonField }} slotProps={{ ...props.slotProps, field: { setOpen } as any }} {...props} open={open} onClose={() => setOpen(false)} onOpen={() => setOpen(true)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DatePicker#DatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-07-17')",
          "onError": "(newError) => setError(newError)",
          "slotProps": "{ textField: { helperText: errorMessage, }, }",
          "minDate": "startOfQ12022",
          "maxDate": "endOfQ12022"
        },
        "snippet": "<DatePicker defaultValue={dayjs('2022-07-17')} onError={(newError) => setError(newError)} slotProps={{ textField: { helperText: errorMessage, }, }} minDate={startOfQ12022} maxDate={endOfQ12022} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DatePicker#DatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(newValue, context) => { if (context.validationError == null) { setValue(newValue); } }",
          "minDate": "dayjs('2022-01-01')",
          "maxDate": "dayjs('2022-12-31')"
        },
        "snippet": "<DatePicker value={value} onChange={(newValue, context) => { if (context.validationError == null) { setValue(newValue); } }} minDate={dayjs('2022-01-01')} maxDate={dayjs('2022-12-31')} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DatePicker#DatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Date Picker",
          "format": "M/D/YYYY",
          "defaultValue": "dayjs('2022-04-17')",
          "slotProps": "{ field: { shouldRespectLeadingZeros: true } }"
        },
        "snippet": "<DatePicker label=\"Date Picker\" format=\"M/D/YYYY\" defaultValue={dayjs('2022-04-17')} slotProps={{ field: { shouldRespectLeadingZeros: true } }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DatePicker#DatePickerToolbar": [
      {
        "componentId": "@mui/x-date-pickers/DatePicker#DatePickerToolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ flex: '1 1 100%' }"
        },
        "snippet": "<DatePickerToolbar {...other} sx={{ flex: '1 1 100%' }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DatePicker#DatePickerToolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DatePickerToolbar {...props} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DesktopDatePicker#DesktopDatePicker": [
      {
        "componentId": "@mui/x-date-pickers/DesktopDatePicker#DesktopDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 260 }",
          "slotProps": "{ field: { clearable: true, onClear: () => setCleared(true) }, }"
        },
        "snippet": "<DesktopDatePicker sx={{ width: 260 }} slotProps={{ field: { clearable: true, onClear: () => setCleared(true) }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DesktopDatePicker#DesktopDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17')"
        },
        "snippet": "<DesktopDatePicker defaultValue={dayjs('2022-04-17')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/MobileDatePicker#MobileDatePicker": [
      {
        "componentId": "@mui/x-date-pickers/MobileDatePicker#MobileDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17')"
        },
        "snippet": "<MobileDatePicker defaultValue={dayjs('2022-04-17')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker": [
      {
        "componentId": "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17')",
          "slots": "{ toolbar: CustomToolbar, }",
          "slotProps": "{ toolbar: { toolbarFormat: 'YYYY', toolbarPlaceholder: '??', }, actionBar: { actions: ['clear'], }, }"
        },
        "snippet": "<StaticDatePicker defaultValue={dayjs('2022-04-17')} slots={{ toolbar: CustomToolbar, }} slotProps={{ toolbar: { toolbarFormat: 'YYYY', toolbarPlaceholder: '??', }, actionBar: { actions: ['clear'], }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "displayStaticWrapperAs": "desktop",
          "defaultValue": "dayjs('2022-04-17')",
          "slotProps": "{ toolbar: { toolbarFormat: 'ddd DD MMMM', hidden: false }, }"
        },
        "snippet": "<StaticDatePicker displayStaticWrapperAs=\"desktop\" defaultValue={dayjs('2022-04-17')} slotProps={{ toolbar: { toolbarFormat: 'ddd DD MMMM', hidden: false }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17')",
          "slots": "{ actionBar: CustomActionBar, }",
          "slotProps": "{ actionBar: { actions: ['today'], }, }"
        },
        "snippet": "<StaticDatePicker defaultValue={dayjs('2022-04-17')} slots={{ actionBar: CustomActionBar, }} slotProps={{ actionBar: { actions: ['today'], }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "slotProps": "{ shortcuts: { items: shortcutsItems, }, }"
        },
        "snippet": "<StaticDatePicker value={value} onChange={handleChange} slotProps={{ shortcuts: { items: shortcutsItems, }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticDatePicker#StaticDatePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ layout: { sx: { [`.${pickersLayoutClasses.actionBar}`]: { gridColumn: 1, gridRow: 2, }, }, }, }",
          "slots": "{ actionBar: ActionList, }"
        },
        "snippet": "<StaticDatePicker slotProps={{ layout: { sx: { [`.${pickersLayoutClasses.actionBar}`]: { gridColumn: 1, gridRow: 2, }, }, }, }} slots={{ actionBar: ActionList, }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/TimePicker#TimePicker": [
      {
        "componentId": "@mui/x-date-pickers/TimePicker#TimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Minutes and seconds",
          "views": "['minutes', 'seconds']",
          "openTo": "minutes",
          "format": "mm:ss",
          "defaultValue": "dayjs('2022-04-17T15:30:10')"
        },
        "snippet": "<TimePicker label=\"Minutes and seconds\" views={['minutes', 'seconds']} openTo=\"minutes\" format=\"mm:ss\" defaultValue={dayjs('2022-04-17T15:30:10')} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimePicker#TimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Hours, minutes and seconds",
          "views": "['hours', 'minutes', 'seconds']",
          "format": "HH:mm:ss",
          "defaultValue": "dayjs('2022-04-17T15:30:10')"
        },
        "snippet": "<TimePicker label=\"Hours, minutes and seconds\" views={['hours', 'minutes', 'seconds']} format=\"HH:mm:ss\" defaultValue={dayjs('2022-04-17T15:30:10')} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimePicker#TimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "setValue",
          "timezone": "America/New_York",
          "label": "Rendered in \"America/New_York\""
        },
        "snippet": "<TimePicker value={value} onChange={setValue} timezone=\"America/New_York\" label={'Rendered in \"America/New_York\"'} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimePicker#TimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "setValue",
          "timezone": "Europe/Paris",
          "label": "Rendered in \"Europe/Paris\""
        },
        "snippet": "<TimePicker value={value} onChange={setValue} timezone=\"Europe/Paris\" label={'Rendered in \"Europe/Paris\"'} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/TimePicker#TimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Controlled picker",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<TimePicker label=\"Controlled picker\" value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DesktopTimePicker#DesktopTimePicker": [
      {
        "componentId": "@mui/x-date-pickers/DesktopTimePicker#DesktopTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<DesktopTimePicker defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/MobileTimePicker#MobileTimePicker": [
      {
        "componentId": "@mui/x-date-pickers/MobileTimePicker#MobileTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "\"seconds\"",
          "openTo": "seconds",
          "views": "['minutes', 'seconds']",
          "format": "mm:ss"
        },
        "snippet": "<MobileTimePicker label={'\"seconds\"'} openTo=\"seconds\" views={['minutes', 'seconds']} format=\"mm:ss\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/MobileTimePicker#MobileTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "\"minutes\"",
          "openTo": "minutes"
        },
        "snippet": "<MobileTimePicker label={'\"minutes\"'} openTo=\"minutes\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/MobileTimePicker#MobileTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "\"hours\"",
          "openTo": "hours"
        },
        "snippet": "<MobileTimePicker label={'\"hours\"'} openTo=\"hours\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/MobileTimePicker#MobileTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<MobileTimePicker defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/StaticTimePicker#StaticTimePicker": [
      {
        "componentId": "@mui/x-date-pickers/StaticTimePicker#StaticTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<StaticTimePicker defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticTimePicker#StaticTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "landscape"
        },
        "snippet": "<StaticTimePicker orientation=\"landscape\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticTimePicker#StaticTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<StaticTimePicker />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DateTimePicker#DateTimePicker": [
      {
        "componentId": "@mui/x-date-pickers/DateTimePicker#DateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Date Picker",
          "defaultValue": "moment(new Date(2022, 1, 1))",
          "minDate": "moment(new Date(1938, 0, 1))",
          "maxDate": "moment(new Date(2075, 11, 31))"
        },
        "snippet": "<DateTimePicker label=\"Date Picker\" defaultValue={moment(new Date(2022, 1, 1))} // moment-hijri support dates between 1356-01-01 and 1499-12-29 H (1937-03-14 and 2076-11-26) minDate={moment(new Date(1938, 0, 1))} maxDate={moment(new Date(2075, 11, 31))} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimePicker#DateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "today",
          "shouldDisableMonth": "isInCurrentMonth",
          "views": "['year', 'month', 'day', 'hours', 'minutes']"
        },
        "snippet": "<DateTimePicker defaultValue={today} shouldDisableMonth={isInCurrentMonth} views={['year', 'month', 'day', 'hours', 'minutes']} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimePicker#DateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "nextSunday",
          "shouldDisableDate": "isWeekend",
          "views": "['year', 'month', 'day', 'hours', 'minutes']"
        },
        "snippet": "<DateTimePicker defaultValue={nextSunday} shouldDisableDate={isWeekend} views={['year', 'month', 'day', 'hours', 'minutes']} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimePicker#DateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "today",
          "maxDate": "yesterday",
          "views": "['year', 'month', 'day', 'hours', 'minutes']"
        },
        "snippet": "<DateTimePicker defaultValue={today} maxDate={yesterday} views={['year', 'month', 'day', 'hours', 'minutes']} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/DateTimePicker#DateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "today",
          "minDate": "tomorrow",
          "views": "['year', 'month', 'day', 'hours', 'minutes']"
        },
        "snippet": "<DateTimePicker defaultValue={today} minDate={tomorrow} views={['year', 'month', 'day', 'hours', 'minutes']} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DateTimePicker#DateTimePickerTabs": [
      {
        "componentId": "@mui/x-date-pickers/DateTimePicker#DateTimePickerTabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DateTimePickerTabs {...props} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/DesktopDateTimePicker#DesktopDateTimePicker": [
      {
        "componentId": "@mui/x-date-pickers/DesktopDateTimePicker#DesktopDateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<DesktopDateTimePicker defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/MobileDateTimePicker#MobileDateTimePicker": [
      {
        "componentId": "@mui/x-date-pickers/MobileDateTimePicker#MobileDateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<MobileDateTimePicker defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/StaticDateTimePicker#StaticDateTimePicker": [
      {
        "componentId": "@mui/x-date-pickers/StaticDateTimePicker#StaticDateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17')",
          "slots": "{ tabs: CustomTabs }",
          "slotProps": "{ tabs: { hidden: false, dateIcon: <LightModeIcon />, timeIcon: <AcUnitIcon />, }, }"
        },
        "snippet": "<StaticDateTimePicker defaultValue={dayjs('2022-04-17')} slots={{ tabs: CustomTabs }} slotProps={{ tabs: { hidden: false, dateIcon: <LightModeIcon />, timeIcon: <AcUnitIcon />, }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticDateTimePicker#StaticDateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "dayjs('2022-04-17T15:30')"
        },
        "snippet": "<StaticDateTimePicker defaultValue={dayjs('2022-04-17T15:30')} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers/StaticDateTimePicker#StaticDateTimePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "landscape"
        },
        "snippet": "<StaticDateTimePicker orientation=\"landscape\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers/PickersTextField#PickersTextField": [
      {
        "componentId": "@mui/x-date-pickers/PickersTextField#PickersTextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "size": "small"
        },
        "snippet": "<PickersTextField {...props} ref={ref} size=\"small\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-data-grid#DataGrid": [
      {
        "componentId": "@mui/x-data-grid#DataGrid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rows": "rows",
          "pagination": true,
          "checkboxSelection": true,
          "paginationModel": "paginationModel",
          "pageSizeOptions": "[5]",
          "rowCount": 100,
          "paginationMode": "server",
          "onPaginationModelChange": "setPaginationModel",
          "onRowSelectionModelChange": "(newRowSelectionModel) => { setRowSelectionModel(newRowSelectionModel); }",
          "rowSelectionModel": "rowSelectionModel",
          "loading": "loading",
          "keepNonExistentRowsSelected": true
        },
        "snippet": "<DataGrid {...data} rows={rows} pagination checkboxSelection paginationModel={paginationModel} pageSizeOptions={[5]} rowCount={100} paginationMode=\"server\" onPaginationModelChange={setPaginationModel} onRowSelectionModelChange={(newRowSelectionModel) => { setRowSelectionModel(newRowSelectionModel); }} rowSelectionModel={rowSelectionModel} loading={loading} keepNonExistentRowsSelected />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid#DataGrid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "columns": "columns",
          "initialState": "{ filter: { filterModel, }, }",
          "disableColumnFilter": true,
          "disableColumnSelector": true,
          "disableDensitySelector": true,
          "slots": "{ toolbar: GridToolbar }",
          "slotProps": "{ toolbar: { showQuickFilter: true, }, }",
          "filterModel": "filterModel",
          "onFilterModelChange": "handleFilterModelChange",
          "columnVisibilityModel": "columnVisibilityModel",
          "onColumnVisibilityModelChange": "handleColumnVisibilityChange"
        },
        "snippet": "<DataGrid {...data} columns={columns} initialState={{ filter: { filterModel, }, }} disableColumnFilter disableColumnSelector disableDensitySelector slots={{ toolbar: GridToolbar }} slotProps={{ toolbar: { showQuickFilter: true, }, }} filterModel={filterModel} onFilterModelChange={handleFilterModelChange} columnVisibilityModel={columnVisibilityModel} onColumnVisibilityModelChange={handleColumnVisibilityChange} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid#DataGrid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "ignoreDiacritics.toString()",
          "rows": "rows",
          "columns": "columns",
          "filterModel": "filterModel",
          "onFilterModelChange": "setFilterModel",
          "disableColumnSelector": true,
          "disableDensitySelector": true,
          "hideFooter": true,
          "slots": "{ toolbar: GridToolbar }",
          "slotProps": "{ toolbar: { showQuickFilter: true } }",
          "ignoreDiacritics": "ignoreDiacritics"
        },
        "snippet": "<DataGrid key={ignoreDiacritics.toString()} rows={rows} columns={columns} filterModel={filterModel} onFilterModelChange={setFilterModel} disableColumnSelector disableDensitySelector hideFooter slots={{ toolbar: GridToolbar }} slotProps={{ toolbar: { showQuickFilter: true } }} ignoreDiacritics={ignoreDiacritics} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid#DataGrid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "pagination": true,
          "slots": "{ ...unstable_joySlots, toolbar: GridToolbar, }",
          "loading": "loading",
          "columns": "columns",
          "rows": "rows",
          "checkboxSelection": true,
          "disableRowSelectionOnClick": true,
          "initialState": "{ pagination: { paginationModel: { pageSize: 5, page: 0 }, }, }",
          "pageSizeOptions": "[5, 10, 20]",
          "slotProps": "{ filterPanel: { sx: { '& .MuiDataGrid-filterForm': { alignItems: 'flex-end', }, '& .MuiDataGrid-panelContent': { // To prevent the Select popup being hidden by the panel overflow: 'visible', }, }, }, }"
        },
        "snippet": "<DataGrid pagination slots={{ ...unstable_joySlots, toolbar: GridToolbar, }} loading={loading} columns={columns} rows={rows} checkboxSelection disableRowSelectionOnClick initialState={{ pagination: { paginationModel: { pageSize: 5, page: 0 }, }, }} pageSizeOptions={[5, 10, 20]} slotProps={{ filterPanel: { sx: { '& .MuiDataGrid-filterForm': { alignItems: 'flex-end', }, '& .MuiDataGrid-panelContent': { // To prevent the Select popup being hidden by the panel overflow: 'visible', }, }, }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid#DataGrid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rows": "rows",
          "pageSizeOptions": "[PAGE_SIZE]",
          "rowCount": "rowCountState",
          "onRowCountChange": "(newRowCount) => setRowCountState(newRowCount)",
          "estimatedRowCount": "estimatedRowCount",
          "paginationMeta": "paginationMeta",
          "paginationMode": "server",
          "onPaginationModelChange": "handlePaginationModelChange",
          "paginationModel": "paginationModel",
          "loading": "isLoading"
        },
        "snippet": "<DataGrid rows={rows} {...data} pageSizeOptions={[PAGE_SIZE]} rowCount={rowCountState} onRowCountChange={(newRowCount) => setRowCountState(newRowCount)} estimatedRowCount={estimatedRowCount} paginationMeta={paginationMeta} paginationMode=\"server\" onPaginationModelChange={handlePaginationModelChange} paginationModel={paginationModel} loading={isLoading} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsClipPath#ChartsClipPath": [
      {
        "componentId": "@mui/x-charts/ChartsClipPath#ChartsClipPath",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "clipPathId"
        },
        "snippet": "<ChartsClipPath id={clipPathId} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine": [
      {
        "componentId": "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "x": "new Date(2023, 8, 2, 9)",
          "lineStyle": "{ strokeDasharray: '10 5' }",
          "labelStyle": "{ fontSize: '10' }",
          "label": "`Wake up\\n9AM`",
          "labelAlign": "start"
        },
        "snippet": "<ChartsReferenceLine x={new Date(2023, 8, 2, 9)} lineStyle={{ strokeDasharray: '10 5' }} labelStyle={{ fontSize: '10' }} label={`Wake up\\n9AM`} labelAlign=\"start\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "x": "Page C",
          "label": "Max PV PAGE",
          "lineStyle": "{ stroke: 'red' }"
        },
        "snippet": "<ChartsReferenceLine x=\"Page C\" label=\"Max PV PAGE\" lineStyle={{ stroke: 'red' }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "y": 9800,
          "label": "Max",
          "lineStyle": "{ stroke: 'red' }"
        },
        "snippet": "<ChartsReferenceLine y={9800} label=\"Max\" lineStyle={{ stroke: 'red' }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "y": 50,
          "label": "Middle value",
          "labelAlign": "end"
        },
        "snippet": "<ChartsReferenceLine y={50} label=\"Middle value\" labelAlign=\"end\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsReferenceLine#ChartsReferenceLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "y": 0
        },
        "snippet": "<ChartsReferenceLine y={0} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsXAxis#ChartsXAxis": [
      {
        "componentId": "@mui/x-charts/ChartsXAxis#ChartsXAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "date",
          "position": "bottom",
          "axisId": "date",
          "tickInterval": "(value, index) => { return index % 30 === 0; }",
          "tickLabelStyle": "{ fontSize: 10, }"
        },
        "snippet": "<ChartsXAxis label=\"date\" position=\"bottom\" axisId=\"date\" tickInterval={(value, index) => { return index % 30 === 0; }} tickLabelStyle={{ fontSize: 10, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsXAxis#ChartsXAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "axisId": "quarters",
          "label": "2021 quarters",
          "labelFontSize": 18
        },
        "snippet": "<ChartsXAxis axisId=\"quarters\" label=\"2021 quarters\" labelFontSize={18} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsXAxis#ChartsXAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "X axis",
          "position": "bottom",
          "axisId": "x-axis-id"
        },
        "snippet": "<ChartsXAxis label=\"X axis\" position=\"bottom\" axisId=\"x-axis-id\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsXAxis#ChartsXAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ChartsXAxis />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsYAxis#ChartsYAxis": [
      {
        "componentId": "@mui/x-charts/ChartsYAxis#ChartsYAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Price (USD)",
          "position": "left",
          "axisId": "price",
          "tickLabelStyle": "{ fontSize: 10 }",
          "sx": "{ [`& .${axisClasses.label}`]: { transform: 'translateX(-5px)', }, }"
        },
        "snippet": "<ChartsYAxis label=\"Price (USD)\" position=\"left\" axisId=\"price\" tickLabelStyle={{ fontSize: 10 }} sx={{ [`& .${axisClasses.label}`]: { transform: 'translateX(-5px)', }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsYAxis#ChartsYAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Volume",
          "position": "right",
          "axisId": "volume",
          "tickLabelStyle": "{ fontSize: 10 }",
          "sx": "{ [`& .${axisClasses.label}`]: { transform: 'translateX(5px)', }, }"
        },
        "snippet": "<ChartsYAxis label=\"Volume\" position=\"right\" axisId=\"volume\" tickLabelStyle={{ fontSize: 10 }} sx={{ [`& .${axisClasses.label}`]: { transform: 'translateX(5px)', }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsYAxis#ChartsYAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "axisId": "money",
          "position": "right",
          "label": "revenue"
        },
        "snippet": "<ChartsYAxis axisId=\"money\" position=\"right\" label=\"revenue\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsYAxis#ChartsYAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "right",
          "axisId": "right_axis_id"
        },
        "snippet": "<ChartsYAxis position=\"right\" axisId=\"right_axis_id\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartsYAxis#ChartsYAxis",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "axisId": "quantities",
          "label": "# units sold"
        },
        "snippet": "<ChartsYAxis axisId=\"quantities\" label=\"# units sold\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsGrid#ChartsGrid": [
      {
        "componentId": "@mui/x-charts/ChartsGrid#ChartsGrid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "vertical": true,
          "horizontal": true
        },
        "snippet": "<ChartsGrid vertical horizontal />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsTooltip#ChartsTooltip": [
      {
        "componentId": "@mui/x-charts/ChartsTooltip#ChartsTooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ChartsTooltip />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsLegend#ContinuousColorLegend": [
      {
        "componentId": "@mui/x-charts/ChartsLegend#ContinuousColorLegend",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "axisDirection": "y",
          "position": " props.direction === 'row' ? { vertical: 'top', horizontal: 'middle' } : { vertical: 'middle', horizontal: 'right' } ",
          "direction": "props.direction",
          "length": "`${props.length}%`",
          "thickness": "props.thickness",
          "align": "props.align",
          "labelStyle": "{ fontSize: props.fontSize }"
        },
        "snippet": "<ContinuousColorLegend axisDirection=\"y\" position={ props.direction === 'row' ? { vertical: 'top', horizontal: 'middle' } : { vertical: 'middle', horizontal: 'right' } } direction={props.direction} length={`${props.length}%`} thickness={props.thickness} align={props.align} labelStyle={{ fontSize: props.fontSize }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartsAxisHighlight#ChartsAxisHighlight": [
      {
        "componentId": "@mui/x-charts/ChartsAxisHighlight#ChartsAxisHighlight",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "x": "line"
        },
        "snippet": "<ChartsAxisHighlight x=\"line\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/BarChart#BarPlot": [
      {
        "componentId": "@mui/x-charts/BarChart#BarPlot",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<BarPlot />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/LineChart#LineChart": [
      {
        "componentId": "@mui/x-charts/LineChart#LineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dataset": "dataset",
          "series": "[ { label: 'Global temperature anomaly relative to 1961-1990', dataKey: 'anomaly', showMark: false, valueFormatter: (value) => `${value?.toFixed(2)}°`, }, ]",
          "xAxis": "[ { scaleType: 'time', dataKey: 'year', disableLine: true, valueFormatter: (value) => value.getFullYear().toString(), }, ]",
          "yAxis": "[ { disableLine: true, disableTicks: true, valueFormatter: (value) => `${value}°`, colorMap: { type: 'continuous', min: -0.5, max: 1.5, color: (t) => interpolateRdYlBu(1 - t), }, }, ]",
          "grid": "{ horizontal: true }",
          "height": 300,
          "margin": "{ top: props.direction === 'row' ? 50 : 20, right: props.direction === 'row' ? 20 : 50, }",
          "slotProps": "{ legend: { hidden: true } }"
        },
        "snippet": "<LineChart dataset={dataset} series={[ { label: 'Global temperature anomaly relative to 1961-1990', dataKey: 'anomaly', showMark: false, valueFormatter: (value) => `${value?.toFixed(2)}°`, }, ]} xAxis={[ { scaleType: 'time', dataKey: 'year', disableLine: true, valueFormatter: (value) => value.getFullYear().toString(), }, ]} yAxis={[ { disableLine: true, disableTicks: true, valueFormatter: (value) => `${value}°`, colorMap: { type: 'continuous', min: -0.5, max: 1.5, color: (t) => interpolateRdYlBu(1 - t), }, }, ]} grid={{ horizontal: true }} height={300} margin={{ top: props.direction === 'row' ? 50 : 20, right: props.direction === 'row' ? 20 : 50, }} slotProps={{ legend: { hidden: true } }} > <ChartsReferenceLine y={0} /> <ContinuousColorLegend axisDirection=\"y\" position={ props.direction === 'row' ? { vertical: 'top', horizontal: 'middle' } : { vertical: 'middle', horizontal: 'right' } } direction={props.direction} length={`${props.length}%`} thickness={props.thickness} align={props.align} labelStyle={{ fontSize: props.fontSize }} /> </LineChart>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/LineChart#LineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dataset": "dataset",
          "series": "[ { label: 'Global temperature anomaly relative to 1961-1990', dataKey: 'anomaly', showMark: false, valueFormatter: (value) => `${value?.toFixed(2)}°`, }, ]",
          "xAxis": "[ { scaleType: 'time', dataKey: 'year', disableLine: true, valueFormatter: (value) => value.getFullYear().toString(), colorMap: { type: 'piecewise', thresholds: [new Date(1961, 0, 1), new Date(1990, 0, 1)], colors: ['blue', 'gray', 'red'], }, }, ]",
          "yAxis": "[ { disableLine: true, disableTicks: true, valueFormatter: (value) => `${value}°`, }, ]",
          "grid": "{ horizontal: true }",
          "height": 300,
          "margin": "{ top: 30, right: 150 }",
          "slotProps": "{ legend: { hidden: true } }"
        },
        "snippet": "<LineChart dataset={dataset} series={[ { label: 'Global temperature anomaly relative to 1961-1990', dataKey: 'anomaly', showMark: false, valueFormatter: (value) => `${value?.toFixed(2)}°`, }, ]} xAxis={[ { scaleType: 'time', dataKey: 'year', disableLine: true, valueFormatter: (value) => value.getFullYear().toString(), colorMap: { type: 'piecewise', thresholds: [new Date(1961, 0, 1), new Date(1990, 0, 1)], colors: ['blue', 'gray', 'red'], }, }, ]} yAxis={[ { disableLine: true, disableTicks: true, valueFormatter: (value) => `${value}°`, }, ]} grid={{ horizontal: true }} height={300} margin={{ top: 30, right: 150 }} slotProps={{ legend: { hidden: true } }} > <PiecewiseColorLegend axisDirection=\"x\" position={{ vertical: 'top', horizontal: 'right' }} direction=\"column\" /> <ChartsReferenceLine y={0} /> </LineChart>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/LineChart#LineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dataset": "dataset",
          "sx": "{ [`& .${lineElementClasses.root}`]: { strokeDasharray: '10 5', strokeWidth: 4, }, '& .MuiAreaElement-series-Germany': { fill: \"url('#myGradient')\", }, }",
          "xAxis": "[ { id: 'Years', dataKey: 'date', scaleType: 'time', valueFormatter: (date) => date.getFullYear().toString(), }, ]",
          "series": "[ { id: 'France', dataKey: 'fr', stack: 'total', area: true, showMark: false, }, { id: 'Germany', dataKey: 'dl', stack: 'total', area: true, showMark: false, }, { id: 'United Kingdom', dataKey: 'gb', stack: 'total', area: true, showMark: false, }, ]",
          "margin": "{ left: 60, top: 10, right: 20 }",
          "width": 600,
          "height": 300
        },
        "snippet": "<LineChart dataset={dataset} sx={{ [`& .${lineElementClasses.root}`]: { strokeDasharray: '10 5', strokeWidth: 4, }, '& .MuiAreaElement-series-Germany': { fill: \"url('#myGradient')\", }, }} xAxis={[ { id: 'Years', dataKey: 'date', scaleType: 'time', valueFormatter: (date) => date.getFullYear().toString(), }, ]} series={[ { id: 'France', dataKey: 'fr', stack: 'total', area: true, showMark: false, }, { id: 'Germany', dataKey: 'dl', stack: 'total', area: true, showMark: false, }, { id: 'United Kingdom', dataKey: 'gb', stack: 'total', area: true, showMark: false, }, ]} margin={{ left: 60, top: 10, right: 20 }} width={600} height={300} > <defs> <linearGradient id=\"myGradient\" gradientTransform=\"rotate(90)\"> <stop offset=\"5%\" stopColor=\"gold\" /> <stop offset=\"95%\" stopColor=\"red\" /> </linearGradient> </defs> </LineChart>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/LineChart#LineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 300,
          "grid": "{ horizontal: true }",
          "series": "[ { data: [-2, -9, 12, 11, 6, -4], area: true, }, ]",
          "margin": "{ top: 10, bottom: 20, }",
          "yAxis": "[ { colorMap: (colorY === 'continuous' && { type: 'continuous', min: -10, max: 10, color: ['red', 'green'], }) || (colorY === 'piecewise' && { type: 'piecewise', thresholds: [0, 10], colors: ['red', 'green', 'blue'], }) || undefined, }, ]",
          "xAxis": "[ { scaleType: 'time', data: [ new Date(2019, 0, 1), new Date(2020, 0, 1), new Date(2021, 0, 1), new Date(2022, 0, 1), new Date(2023, 0, 1), new Date(2024, 0, 1), ], valueFormatter: (value) => value.getFullYear().toString(), colorMap: (colorX === 'continuous' && { type: 'continuous', min: new Date(2019, 1, 1), max: new Date(2024, 1, 1), color: ['green', 'orange'], }) || (colorX === 'piecewise' && { type: 'piecewise', thresholds: [new Date(2021, 1, 1), new Date(2023, 1, 1)], colors: ['blue', 'red', 'blue'], }) || undefined, }, ]"
        },
        "snippet": "<LineChart height={300} grid={{ horizontal: true }} series={[ { data: [-2, -9, 12, 11, 6, -4], area: true, }, ]} margin={{ top: 10, bottom: 20, }} yAxis={[ { colorMap: (colorY === 'continuous' && { type: 'continuous', min: -10, max: 10, color: ['red', 'green'], }) || (colorY === 'piecewise' && { type: 'piecewise', thresholds: [0, 10], colors: ['red', 'green', 'blue'], }) || undefined, }, ]} xAxis={[ { scaleType: 'time', data: [ new Date(2019, 0, 1), new Date(2020, 0, 1), new Date(2021, 0, 1), new Date(2022, 0, 1), new Date(2023, 0, 1), new Date(2024, 0, 1), ], valueFormatter: (value) => value.getFullYear().toString(), colorMap: (colorX === 'continuous' && { type: 'continuous', min: new Date(2019, 1, 1), max: new Date(2024, 1, 1), color: ['green', 'orange'], }) || (colorX === 'piecewise' && { type: 'piecewise', thresholds: [new Date(2021, 1, 1), new Date(2023, 1, 1)], colors: ['blue', 'red', 'blue'], }) || undefined, }, ]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/LineChart#LineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dataset": "dataset",
          "xAxis": "[ { id: 'Years', dataKey: 'date', scaleType: 'time', valueFormatter: (date) => date.getFullYear().toString(), }, ]",
          "series": "[ { id: 'France', label: 'French GDP per capita', dataKey: 'fr', stack: 'total', area: true, showMark: false, }, { id: 'Germany', label: 'German GDP per capita', dataKey: 'dl', stack: 'total', area: true, showMark: false, }, { id: 'United Kingdom', label: 'UK GDP per capita', dataKey: 'gb', stack: 'total', area: true, showMark: false, }, ]",
          "width": 600,
          "height": 400,
          "margin": "{ left: 70 }"
        },
        "snippet": "<LineChart dataset={dataset} xAxis={[ { id: 'Years', dataKey: 'date', scaleType: 'time', valueFormatter: (date) => date.getFullYear().toString(), }, ]} series={[ { id: 'France', label: 'French GDP per capita', dataKey: 'fr', stack: 'total', area: true, showMark: false, }, { id: 'Germany', label: 'German GDP per capita', dataKey: 'dl', stack: 'total', area: true, showMark: false, }, { id: 'United Kingdom', label: 'UK GDP per capita', dataKey: 'gb', stack: 'total', area: true, showMark: false, }, ]} width={600} height={400} margin={{ left: 70 }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/LineChart#LinePlot": [
      {
        "componentId": "@mui/x-charts/LineChart#LinePlot",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<LinePlot />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/LineChart#AreaPlot": [
      {
        "componentId": "@mui/x-charts/LineChart#AreaPlot",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AreaPlot />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/LineChart#MarkPlot": [
      {
        "componentId": "@mui/x-charts/LineChart#MarkPlot",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<MarkPlot />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/LineChart#LineHighlightPlot": [
      {
        "componentId": "@mui/x-charts/LineChart#LineHighlightPlot",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<LineHighlightPlot />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/LineChart#AnimatedLine": [
      {
        "componentId": "@mui/x-charts/LineChart#AnimatedLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "sxBefore"
        },
        "snippet": "<AnimatedLine {...other} sx={sxBefore} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/LineChart#AnimatedLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "sxAfter"
        },
        "snippet": "<AnimatedLine {...other} sx={sxAfter} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/LineChart#AnimatedLine",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AnimatedLine {...other} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ScatterChart#ScatterChart": [
      {
        "componentId": "@mui/x-charts/ScatterChart#ScatterChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 300,
          "grid": "{ horizontal: true, vertical: true }",
          "series": "series",
          "margin": "{ top: 10, bottom: 20, }",
          "yAxis": "[ { min: -3, max: 3, tickInterval: [-3, -1.5, 0, 1.5, 3], colorMap: (colorY === 'continuous' && { type: 'continuous', min: -2, max: 2, color: ['blue', 'red'], }) || (colorY === 'piecewise' && { type: 'piecewise', thresholds: [-1.5, 0, 1.5], colors: ['lightblue', 'blue', 'orange', 'red'], }) || undefined, }, ]",
          "xAxis": "[ { min: -3, max: 3, tickInterval: [-3, -1.5, 0, 1.5, 3], colorMap: (colorX === 'continuous' && { type: 'continuous', min: -2, max: 2, color: ['green', 'orange'], }) || (colorX === 'piecewise' && { type: 'piecewise', thresholds: [-1.5, 0, 1.5], colors: ['#d01c8b', '#f1b6da', '#b8e186', '#4dac26'], }) || undefined, }, ]",
          "zAxis": "[ { data: colorZ === 'ordinal' ? [ ...[...Array(POINTS_NUMBER)].map(() => 'A'), ...[...Array(POINTS_NUMBER)].map(() => 'B'), ...[...Array(POINTS_NUMBER)].map(() => 'C'), ...[...Array(POINTS_NUMBER)].map(() => 'D'), ] : undefined, colorMap: (colorZ === 'continuous' && { type: 'continuous', min: -2, max: 2, color: ['green', 'orange'], }) || (colorZ === 'piecewise' && { type: 'piecewise', thresholds: [-1.5, 0, 1.5], colors: ['#d01c8b', '#f1b6da', '#b8e186', '#4dac26'], }) || (colorZ === 'ordinal' && { type: 'ordinal', values: ['A', 'B', 'C', 'D'], colors: ['#d01c8b', '#f1b6da', '#b8e186', '#4dac26'], }) || undefined, }, ]"
        },
        "snippet": "<ScatterChart height={300} grid={{ horizontal: true, vertical: true }} series={series} margin={{ top: 10, bottom: 20, }} yAxis={[ { min: -3, max: 3, tickInterval: [-3, -1.5, 0, 1.5, 3], colorMap: (colorY === 'continuous' && { type: 'continuous', min: -2, max: 2, color: ['blue', 'red'], }) || (colorY === 'piecewise' && { type: 'piecewise', thresholds: [-1.5, 0, 1.5], colors: ['lightblue', 'blue', 'orange', 'red'], }) || undefined, }, ]} xAxis={[ { min: -3, max: 3, tickInterval: [-3, -1.5, 0, 1.5, 3], colorMap: (colorX === 'continuous' && { type: 'continuous', min: -2, max: 2, color: ['green', 'orange'], }) || (colorX === 'piecewise' && { type: 'piecewise', thresholds: [-1.5, 0, 1.5], colors: ['#d01c8b', '#f1b6da', '#b8e186', '#4dac26'], }) || undefined, }, ]} zAxis={[ { data: colorZ === 'ordinal' ? [ ...[...Array(POINTS_NUMBER)].map(() => 'A'), ...[...Array(POINTS_NUMBER)].map(() => 'B'), ...[...Array(POINTS_NUMBER)].map(() => 'C'), ...[...Array(POINTS_NUMBER)].map(() => 'D'), ] : undefined, colorMap: (colorZ === 'continuous' && { type: 'continuous', min: -2, max: 2, color: ['green', 'orange'], }) || (colorZ === 'piecewise' && { type: 'piecewise', thresholds: [-1.5, 0, 1.5], colors: ['#d01c8b', '#f1b6da', '#b8e186', '#4dac26'], }) || (colorZ === 'ordinal' && { type: 'ordinal', values: ['A', 'B', 'C', 'D'], colors: ['#d01c8b', '#f1b6da', '#b8e186', '#4dac26'], }) || undefined, }, ]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ScatterChart#ScatterChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 500,
          "height": 300,
          "series": "[ { data: data1, yAxisId: 'leftAxis', valueFormatter: ({ x, y }) => `${x}cm, ${y}kg`, }, { data: data2, yAxisId: 'rightAxis', valueFormatter: ({ x, y }) => `${x}cm, ${y}kg`, }, ]",
          "xAxis": "[{ min: 0 }]",
          "yAxis": "[ { id: 'leftAxis', min: 0 }, { id: 'rightAxis', min: 0 }, ]",
          "rightAxis": "rightAxis",
          "sx": "{ [`& .${axisClasses.left}`]: { line: { stroke: '#8884d8' }, text: { fill: '#8884d8' }, }, [`& .${axisClasses.right}`]: { line: { stroke: '#82ca9d' }, text: { fill: '#82ca9d' }, }, }"
        },
        "snippet": "<ScatterChart width={500} height={300} series={[ { data: data1, yAxisId: 'leftAxis', valueFormatter: ({ x, y }) => `${x}cm, ${y}kg`, }, { data: data2, yAxisId: 'rightAxis', valueFormatter: ({ x, y }) => `${x}cm, ${y}kg`, }, ]} xAxis={[{ min: 0 }]} yAxis={[ { id: 'leftAxis', min: 0 }, { id: 'rightAxis', min: 0 }, ]} rightAxis=\"rightAxis\" sx={{ [`& .${axisClasses.left}`]: { line: { stroke: '#8884d8' }, text: { fill: '#8884d8' }, }, [`& .${axisClasses.right}`]: { line: { stroke: '#82ca9d' }, text: { fill: '#82ca9d' }, }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ScatterChart#ScatterChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 300,
          "disableVoronoi": "disableVoronoi",
          "voronoiMaxRadius": "undefinedRadius ? undefined : voronoiMaxRadius",
          "dataset": "data",
          "series": "[ { label: 'Series A', data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })), }, { label: 'Series B', data: data.map((v) => ({ x: v.x2, y: v.y2, id: v.id })), }, ]"
        },
        "snippet": "<ScatterChart height={300} disableVoronoi={disableVoronoi} voronoiMaxRadius={undefinedRadius ? undefined : voronoiMaxRadius} dataset={data} series={[ { label: 'Series A', data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })), }, { label: 'Series B', data: data.map((v) => ({ x: v.x2, y: v.y2, id: v.id })), }, ]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ScatterChart#ScatterChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "leftAxis": "null",
          "bottomAxis": "null",
          "topAxis": "{}",
          "rightAxis": "{}",
          "margin": "{ top: 30, bottom: 10 }"
        },
        "snippet": "<ScatterChart {...params} leftAxis={null} bottomAxis={null} topAxis={{}} rightAxis={{}} margin={{ top: 30, bottom: 10 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ScatterChart#ScatterChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 600,
          "height": 300,
          "series": "[ { label: 'Series A', data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })), }, { label: 'Series B', data: data.map((v) => ({ x: v.x1, y: v.y2, id: v.id })), }, ]",
          "grid": "{ vertical: true, horizontal: true }"
        },
        "snippet": "<ScatterChart width={600} height={300} series={[ { label: 'Series A', data: data.map((v) => ({ x: v.x1, y: v.y1, id: v.id })), }, { label: 'Series B', data: data.map((v) => ({ x: v.x1, y: v.y2, id: v.id })), }, ]} grid={{ vertical: true, horizontal: true }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/SparkLineChart#SparkLineChart": [
      {
        "componentId": "@mui/x-charts/SparkLineChart#SparkLineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "plotType": "bar",
          "data": "[1, 4, 2, 5, 7, 2, 4, 6]",
          "height": 100,
          "showTooltip": true,
          "showHighlight": true,
          "xAxis": "{ scaleType: 'band', data: [ new Date(2016, 0, 1), new Date(2017, 0, 1), new Date(2018, 0, 1), new Date(2019, 0, 1), new Date(2020, 0, 1), new Date(2021, 0, 1), new Date(2022, 0, 1), new Date(2023, 0, 1), ], valueFormatter: (value) => value.getFullYear(), }"
        },
        "snippet": "<SparkLineChart plotType=\"bar\" data={[1, 4, 2, 5, 7, 2, 4, 6]} height={100} showTooltip showHighlight xAxis={{ scaleType: 'band', data: [ new Date(2016, 0, 1), new Date(2017, 0, 1), new Date(2018, 0, 1), new Date(2019, 0, 1), new Date(2020, 0, 1), new Date(2021, 0, 1), new Date(2022, 0, 1), new Date(2023, 0, 1), ], valueFormatter: (value) => value.getFullYear(), }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/SparkLineChart#SparkLineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "data": "[1, 4, 2, 5, 7, 2, 4, 6]",
          "xAxis": "{ scaleType: 'time', data: [ new Date(2022, 5, 1), new Date(2022, 5, 2), new Date(2022, 5, 5), new Date(2022, 5, 6), new Date(2022, 5, 7), new Date(2022, 5, 8), new Date(2022, 5, 11), new Date(2022, 5, 12), ], valueFormatter: (value) => value.toISOString().slice(0, 10), }",
          "height": 100,
          "showTooltip": true,
          "showHighlight": true
        },
        "snippet": "<SparkLineChart data={[1, 4, 2, 5, 7, 2, 4, 6]} xAxis={{ scaleType: 'time', data: [ new Date(2022, 5, 1), new Date(2022, 5, 2), new Date(2022, 5, 5), new Date(2022, 5, 6), new Date(2022, 5, 7), new Date(2022, 5, 8), new Date(2022, 5, 11), new Date(2022, 5, 12), ], valueFormatter: (value) => value.toISOString().slice(0, 10), }} height={100} showTooltip showHighlight />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/SparkLineChart#SparkLineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "plotType": "bar",
          "data": "[1, 4, 2, 5, 7, 2, 4, 6]",
          "height": 100,
          "showHighlight": "showHighlight",
          "showTooltip": "showTooltip"
        },
        "snippet": "<SparkLineChart plotType=\"bar\" data={[1, 4, 2, 5, 7, 2, 4, 6]} height={100} showHighlight={showHighlight} showTooltip={showTooltip} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/SparkLineChart#SparkLineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "data": "[1, 4, 2, 5, 7, 2, 4, 6]",
          "height": 100,
          "showHighlight": "showHighlight",
          "showTooltip": "showTooltip"
        },
        "snippet": "<SparkLineChart data={[1, 4, 2, 5, 7, 2, 4, 6]} height={100} showHighlight={showHighlight} showTooltip={showTooltip} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/SparkLineChart#SparkLineChart",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "data": "[3, -10, -2, 5, 7, -2, 4, 6]",
          "height": 100,
          "curve": "natural",
          "area": true
        },
        "snippet": "<SparkLineChart data={[3, -10, -2, 5, 7, -2, 4, 6]} height={100} curve=\"natural\" area />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/Gauge#Gauge": [
      {
        "componentId": "@mui/x-charts/Gauge#Gauge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 100,
          "height": 100,
          "value": 60,
          "startAngle": "-90",
          "endAngle": 90
        },
        "snippet": "<Gauge width={100} height={100} value={60} startAngle={-90} endAngle={90} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/Gauge#Gauge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 100,
          "height": 100,
          "value": 50,
          "valueMin": 10,
          "valueMax": 60
        },
        "snippet": "<Gauge width={100} height={100} value={50} valueMin={10} valueMax={60} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/Gauge#Gauge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 100,
          "height": 100,
          "value": 60
        },
        "snippet": "<Gauge width={100} height={100} value={60} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/Gauge#Gauge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 100,
          "height": 100,
          "value": 50
        },
        "snippet": "<Gauge width={100} height={100} value={50} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/Gauge#Gauge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "cornerRadius": "50%",
          "sx": "(theme) => ({ [`& .${gaugeClasses.valueText}`]: { fontSize: 40, }, [`& .${gaugeClasses.valueArc}`]: { fill: '#52b202', }, [`& .${gaugeClasses.referenceArc}`]: { fill: theme.palette.text.disabled, }, })"
        },
        "snippet": "<Gauge {...settings} cornerRadius=\"50%\" sx={(theme) => ({ [`& .${gaugeClasses.valueText}`]: { fontSize: 40, }, [`& .${gaugeClasses.valueArc}`]: { fill: '#52b202', }, [`& .${gaugeClasses.referenceArc}`]: { fill: theme.palette.text.disabled, }, })} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/Gauge#GaugeContainer": [
      {
        "componentId": "@mui/x-charts/Gauge#GaugeContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 200,
          "height": 200,
          "startAngle": "-110",
          "endAngle": 110,
          "value": 30
        },
        "snippet": "<GaugeContainer width={200} height={200} startAngle={-110} endAngle={110} value={30} > <GaugeReferenceArc /> <GaugeValueArc /> <GaugePointer /> </GaugeContainer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ChartContainer#ChartContainer": [
      {
        "componentId": "@mui/x-charts/ChartContainer#ChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 500,
          "height": 300,
          "series": "[{ type: 'line', data: pData }]",
          "xAxis": "[{ scaleType: 'point', data: xLabels }]",
          "sx": "{ [`& .${lineElementClasses.root}`]: { stroke: '#8884d8', strokeWidth: 2, }, [`& .${markElementClasses.root}`]: { stroke: '#8884d8', scale: '0.6', fill: '#fff', strokeWidth: 2, }, }",
          "disableAxisListener": true
        },
        "snippet": "<ChartContainer width={500} height={300} series={[{ type: 'line', data: pData }]} xAxis={[{ scaleType: 'point', data: xLabels }]} sx={{ [`& .${lineElementClasses.root}`]: { stroke: '#8884d8', strokeWidth: 2, }, [`& .${markElementClasses.root}`]: { stroke: '#8884d8', scale: '0.6', fill: '#fff', strokeWidth: 2, }, }} disableAxisListener > <LinePlot /> <MarkPlot /> </ChartContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartContainer#ChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 500,
          "height": 300,
          "series": "[ { data: pData, label: 'pv', type: 'line' }, { data: uData, label: 'uv', type: 'line' }, ]",
          "xAxis": "[{ scaleType: 'point', data: xLabels }]"
        },
        "snippet": "<ChartContainer width={500} height={300} series={[ { data: pData, label: 'pv', type: 'line' }, { data: uData, label: 'uv', type: 'line' }, ]} xAxis={[{ scaleType: 'point', data: xLabels }]} > <LinePlot /> <MarkPlot /> <ChartsReferenceLine x=\"Page C\" label=\"Max PV PAGE\" lineStyle={{ stroke: 'red' }} /> <ChartsReferenceLine y={9800} label=\"Max\" lineStyle={{ stroke: 'red' }} /> <ChartsXAxis /> <ChartsYAxis /> </ChartContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartContainer#ChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 500,
          "height": 300,
          "series": "[ { data: uData, type: 'line', label: 'uv', area: true, stack: 'total', }, ]",
          "xAxis": "[{ scaleType: 'point', data: xLabels }]"
        },
        "snippet": "<ChartContainer width={500} height={300} series={[ { data: uData, type: 'line', label: 'uv', area: true, stack: 'total', }, ]} xAxis={[{ scaleType: 'point', data: xLabels }]} > <AreaPlot /> </ChartContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ChartContainer#ChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 500,
          "height": 300,
          "series": "[{ data: uData, label: 'uv', type: 'bar' }]",
          "xAxis": "[{ scaleType: 'band', data: xLabels }]"
        },
        "snippet": "<ChartContainer width={500} height={300} series={[{ data: uData, label: 'uv', type: 'bar' }]} xAxis={[{ scaleType: 'band', data: xLabels }]} > <BarPlot /> </ChartContainer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer": [
      {
        "componentId": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xAxis": "[ { scaleType: 'band', data: ['Q1', 'Q2', 'Q3', 'Q4'], id: 'quarters', label: 'Quarters', }, ]",
          "yAxis": "[{ id: 'money' }, { id: 'quantities' }]",
          "series": "[ { type: 'line', id: 'revenue', yAxisId: 'money', data: [5645, 7542, 9135, 12221], }, { type: 'bar', id: 'cookies', yAxisId: 'quantities', data: [3205, 2542, 3135, 8374], }, { type: 'bar', id: 'icecream', yAxisId: 'quantities', data: [1645, 5542, 5146, 3735], }, ]",
          "height": 400,
          "margin": "{ left: 70, right: 70 }",
          "sx": "{ [`.${axisClasses.left} .${axisClasses.label}`]: { transform: 'translate(-25px, 0)', }, [`.${axisClasses.right} .${axisClasses.label}`]: { transform: 'translate(30px, 0)', }, }"
        },
        "snippet": "<ResponsiveChartContainer xAxis={[ { scaleType: 'band', data: ['Q1', 'Q2', 'Q3', 'Q4'], id: 'quarters', label: 'Quarters', }, ]} yAxis={[{ id: 'money' }, { id: 'quantities' }]} series={[ { type: 'line', id: 'revenue', yAxisId: 'money', data: [5645, 7542, 9135, 12221], }, { type: 'bar', id: 'cookies', yAxisId: 'quantities', data: [3205, 2542, 3135, 8374], }, { type: 'bar', id: 'icecream', yAxisId: 'quantities', data: [1645, 5542, 5146, 3735], }, ]} height={400} margin={{ left: 70, right: 70 }} sx={{ [`.${axisClasses.left} .${axisClasses.label}`]: { transform: 'translate(-25px, 0)', }, [`.${axisClasses.right} .${axisClasses.label}`]: { transform: 'translate(30px, 0)', }, }} > <BarPlot /> <LinePlot /> <ChartsXAxis axisId=\"quarters\" label=\"2021 quarters\" labelFontSize={18} /> <ChartsYAxis axisId=\"quantities\" label=\"# units sold\" /> <ChartsYAxis axisId=\"money\" position=\"right\" label=\"revenue\" /> </ResponsiveChartContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "svgRef",
          "margin": "{ top: 20, left: 50, right: 50, bottom: 30 }",
          "height": 300,
          "series": "[ { type: 'line', data: [5, 15, 20, 24, 30, 38, 40, 51, 52, 61], yAxisId: 'left_axis_id', }, { type: 'line', data: [ 50134, 48361, 46362, 44826, 42376, 40168, 38264, 36159, 34259, 32168, ], yAxisId: 'right_axis_id', }, ]",
          "xAxis": "[{ data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], scaleType: 'point' }]",
          "yAxis": "[ { id: 'left_axis_id', }, { id: 'right_axis_id', }, ]"
        },
        "snippet": "<ResponsiveChartContainer ref={svgRef} margin={{ top: 20, left: 50, right: 50, bottom: 30 }} height={300} series={[ { type: 'line', data: [5, 15, 20, 24, 30, 38, 40, 51, 52, 61], yAxisId: 'left_axis_id', }, { type: 'line', data: [ 50134, 48361, 46362, 44826, 42376, 40168, 38264, 36159, 34259, 32168, ], yAxisId: 'right_axis_id', }, ]} xAxis={[{ data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], scaleType: 'point' }]} yAxis={[ { id: 'left_axis_id', }, { id: 'right_axis_id', }, ]} > <LinePlot /> <ChartsYAxis position=\"left\" axisId=\"left_axis_id\" /> <ChartsYAxis position=\"right\" axisId=\"right_axis_id\" /> <ValueHighlight svgRef={svgRef} /> </ResponsiveChartContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "series": "series",
          "height": 400,
          "margin": "{ top: 10 }",
          "xAxis": "[ { id: 'date', data: alphabetStock.map((day) => new Date(day.date)), scaleType: 'band', valueFormatter: (value) => value.toLocaleDateString(), }, ]",
          "yAxis": "[ { id: 'price', scaleType: 'linear', }, { id: 'volume', scaleType: 'linear', valueFormatter: (value) => `${(value / 1000000).toLocaleString()}M`, }, ]"
        },
        "snippet": "<ResponsiveChartContainer series={series} height={400} margin={{ top: 10 }} xAxis={[ { id: 'date', data: alphabetStock.map((day) => new Date(day.date)), scaleType: 'band', valueFormatter: (value) => value.toLocaleDateString(), }, ]} yAxis={[ { id: 'price', scaleType: 'linear', }, { id: 'volume', scaleType: 'linear', valueFormatter: (value) => `${(value / 1000000).toLocaleString()}M`, }, ]} > <ChartsAxisHighlight x=\"line\" /> <BarPlot /> <LinePlot /> <LineHighlightPlot /> <ChartsXAxis label=\"date\" position=\"bottom\" axisId=\"date\" tickInterval={(value, index) => { return index % 30 === 0; }} tickLabelStyle={{ fontSize: 10, }} /> <ChartsYAxis label=\"Price (USD)\" position=\"left\" axisId=\"price\" tickLabelStyle={{ fontSize: 10 }} sx={{ [`& .${axisClasses.label}`]: { transform: 'translateX(-5px)', }, }} /> <ChartsYAxis label=\"Volume\" position=\"right\" axisId=\"volume\" tickLabelStyle={{ fontSize: 10 }} sx={{ [`& .${axisClasses.label}`]: { transform: 'translateX(5px)', }, }} /> <ChartsTooltip /> </ResponsiveChartContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "margin": "{ top: 5, left: 5, right: 5, bottom: 5 }",
          "height": 300,
          "series": "[ { type: 'line', data: linear, }, { type: 'line', data: poly, }, ]",
          "xAxis": "[{ data: x, scaleType: 'linear', min: -1, max: 3 }]",
          "yAxis": "[{ min: -2, max: 5 }]"
        },
        "snippet": "<ResponsiveChartContainer margin={{ top: 5, left: 5, right: 5, bottom: 5 }} height={300} series={[ { type: 'line', data: linear, }, { type: 'line', data: poly, }, ]} xAxis={[{ data: x, scaleType: 'linear', min: -1, max: 3 }]} yAxis={[{ min: -2, max: 5 }]} > <CartesianAxis /> <LinePlot /> </ResponsiveChartContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts/ResponsiveChartContainer#ResponsiveChartContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xAxis": "[ { label: 'x', min: xLimits[0], max: xLimits[1], data: [-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25], }, ]",
          "series": "[ { type: 'scatter', data, markerSize: 8 }, { type: 'line', data: [10, 13, 12, 5, -6, -3, 4, 20, 18, 17, 12, 11], showMark: true, }, ]",
          "height": 300,
          "margin": "{ top: 10 }"
        },
        "snippet": "<ResponsiveChartContainer xAxis={[ { label: 'x', min: xLimits[0], max: xLimits[1], data: [-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25], }, ]} series={[ { type: 'scatter', data, markerSize: 8 }, { type: 'line', data: [10, 13, 12, 5, -6, -3, 4, 20, 18, 17, 12, 11], showMark: true, }, ]} height={300} margin={{ top: 10 }} > <ChartsGrid vertical horizontal /> <g clipPath={`url(#${clipPathId})`}> <ScatterPlot /> <LinePlot /> </g> <ChartsXAxis /> <ChartsYAxis /> <MarkPlot /> {isLimited && <ChartsClipPath id={clipPathId} />} </ResponsiveChartContainer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-tree-view/SimpleTreeView#SimpleTreeView": [
      {
        "componentId": "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "apiRef": "apiRef",
          "defaultExpandedItems": "['grid']",
          "multiSelect": true,
          "defaultSelectedItems": "['grid-premium']"
        },
        "snippet": "<SimpleTreeView apiRef={apiRef} defaultExpandedItems={['grid']} multiSelect defaultSelectedItems={['grid-premium']} > <TreeItem itemId=\"grid\" label=\"Data Grid\"> <TreeItem itemId=\"grid-community\" label=\"@mui/x-data-grid\" /> <TreeItem itemId=\"grid-pro\" label=\"@mui/x-data-grid-pro\" /> <TreeItem itemId=\"grid-premium\" label=\"@mui/x-data-grid-premium\" /> </TreeItem> <TreeItem itemId=\"pickers\" label=\"Date and Time Pickers\"> <TreeItem itemId=\"pickers-community\" label=\"@mui/x-date-pickers\" /> <TreeItem itemId=\"pickers-pro\" label=\"@mui/x-date-pickers-pro\" /> </TreeItem> <TreeItem itemId=\"charts\" label=\"Charts\"> <TreeItem itemId=\"charts-community\" label=\"@mui/x-charts\" /> </TreeItem> <TreeItem itemId=\"tree-view\" label=\"Tree View\"> <TreeItem itemId=\"tree-view-community\" label=\"@mui/x-tree-view\" /> </TreeItem> </SimpleTreeView>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "customized",
          "defaultExpandedItems": "['1', '3']",
          "slots": "{ expandIcon: ExpandIcon, collapseIcon: CollapseIcon, endIcon: EndIcon, }",
          "sx": "{ overflowX: 'hidden', minHeight: 270, flexGrow: 1, maxWidth: 300 }"
        },
        "snippet": "<SimpleTreeView aria-label=\"customized\" defaultExpandedItems={['1', '3']} slots={{ expandIcon: ExpandIcon, collapseIcon: CollapseIcon, endIcon: EndIcon, }} sx={{ overflowX: 'hidden', minHeight: 270, flexGrow: 1, maxWidth: 300 }} > <CustomTreeItem itemId=\"1\" label=\"Main\"> <CustomTreeItem itemId=\"2\" label=\"Hello\" /> <CustomTreeItem itemId=\"3\" label=\"Subtree with children\"> <CustomTreeItem itemId=\"6\" label=\"Hello\" /> <CustomTreeItem itemId=\"7\" label=\"Sub-subtree with children\"> <CustomTreeItem itemId=\"9\" label=\"Child 1\" /> <CustomTreeItem itemId=\"10\" label=\"Child 2\" /> <CustomTreeItem itemId=\"11\" label=\"Child 3\" /> </CustomTreeItem> <CustomTreeItem itemId=\"8\" label=\"Hello\" /> </CustomTreeItem> <CustomTreeItem itemId=\"4\" label=\"World\" /> <CustomTreeItem itemId=\"5\" label=\"Something something\" /> </CustomTreeItem> </SimpleTreeView>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "selectedItems": "selectedItems",
          "onSelectedItemsChange": "handleSelectedItemsChange",
          "multiSelect": true
        },
        "snippet": "<SimpleTreeView selectedItems={selectedItems} onSelectedItemsChange={handleSelectedItemsChange} multiSelect > <TreeItem itemId=\"grid\" label=\"Data Grid\"> <TreeItem itemId=\"grid-community\" label=\"@mui/x-data-grid\" /> <TreeItem itemId=\"grid-pro\" label=\"@mui/x-data-grid-pro\" /> <TreeItem itemId=\"grid-premium\" label=\"@mui/x-data-grid-premium\" /> </TreeItem> <TreeItem itemId=\"pickers\" label=\"Date and Time Pickers\"> <TreeItem itemId=\"pickers-community\" label=\"@mui/x-date-pickers\" /> <TreeItem itemId=\"pickers-pro\" label=\"@mui/x-date-pickers-pro\" /> </TreeItem> <TreeItem itemId=\"charts\" label=\"Charts\"> <TreeItem itemId=\"charts-community\" label=\"@mui/x-charts\" /> </TreeItem> <TreeItem itemId=\"tree-view\" label=\"Tree View\"> <TreeItem itemId=\"tree-view-community\" label=\"@mui/x-tree-view\" /> </TreeItem> </SimpleTreeView>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultExpandedItems": "['grid']",
          "slots": "{ expandIcon: AddBoxIcon, collapseIcon: IndeterminateCheckBoxIcon, endIcon: CloseSquare, }"
        },
        "snippet": "<SimpleTreeView defaultExpandedItems={['grid']} slots={{ expandIcon: AddBoxIcon, collapseIcon: IndeterminateCheckBoxIcon, endIcon: CloseSquare, }} > <CustomTreeItem itemId=\"grid\" label=\"Data Grid\"> <CustomTreeItem itemId=\"grid-community\" label=\"@mui/x-data-grid\" /> <CustomTreeItem itemId=\"grid-pro\" label=\"@mui/x-data-grid-pro\" /> <CustomTreeItem itemId=\"grid-premium\" label=\"@mui/x-data-grid-premium\" /> </CustomTreeItem> <CustomTreeItem itemId=\"pickers\" label=\"Date and Time Pickers\"> <CustomTreeItem itemId=\"pickers-community\" label=\"@mui/x-date-pickers\" /> <CustomTreeItem itemId=\"pickers-pro\" label=\"@mui/x-date-pickers-pro\" /> </CustomTreeItem> <CustomTreeItem itemId=\"charts\" label=\"Charts\"> <CustomTreeItem itemId=\"charts-community\" label=\"@mui/x-charts\" /> </CustomTreeItem> <CustomTreeItem itemId=\"tree-view\" label=\"Tree View\"> <CustomTreeItem itemId=\"tree-view-community\" label=\"@mui/x-tree-view\" /> </CustomTreeItem> </SimpleTreeView>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/SimpleTreeView#SimpleTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandedItems": "expandedItems",
          "onExpandedItemsChange": "handleExpandedItemsChange"
        },
        "snippet": "<SimpleTreeView expandedItems={expandedItems} onExpandedItemsChange={handleExpandedItemsChange} > <TreeItem itemId=\"grid\" label=\"Data Grid\"> <TreeItem itemId=\"grid-community\" label=\"@mui/x-data-grid\" /> <TreeItem itemId=\"grid-pro\" label=\"@mui/x-data-grid-pro\" /> <TreeItem itemId=\"grid-premium\" label=\"@mui/x-data-grid-premium\" /> </TreeItem> <TreeItem itemId=\"pickers\" label=\"Date and Time Pickers\"> <TreeItem itemId=\"pickers-community\" label=\"@mui/x-date-pickers\" /> <TreeItem itemId=\"pickers-pro\" label=\"@mui/x-date-pickers-pro\" /> </TreeItem> <TreeItem itemId=\"charts\" label=\"Charts\"> <TreeItem itemId=\"charts-community\" label=\"@mui/x-charts\" /> </TreeItem> <TreeItem itemId=\"tree-view\" label=\"Tree View\"> <TreeItem itemId=\"tree-view-community\" label=\"@mui/x-tree-view\" /> </TreeItem> </SimpleTreeView>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-tree-view/RichTreeView#RichTreeView": [
      {
        "componentId": "@mui/x-tree-view/RichTreeView#RichTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "ITEMS",
          "slots": "{ item: CustomTreeItem2 }",
          "experimentalFeatures": "{ labelEditing: true }",
          "isItemEditable": true,
          "defaultExpandedItems": "['1', '2']",
          "getItemLabel": "(item) => `${item.firstName} ${item.lastName}`"
        },
        "snippet": "<RichTreeView items={ITEMS} slots={{ item: CustomTreeItem2 }} experimentalFeatures={{ labelEditing: true }} isItemEditable defaultExpandedItems={['1', '2']} getItemLabel={(item) => `${item.firstName} ${item.lastName}`} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/RichTreeView#RichTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "MUI_X_PRODUCTS",
          "slots": "{ item: CustomTreeItem2 }",
          "experimentalFeatures": "{ labelEditing: true }",
          "isItemEditable": true,
          "defaultExpandedItems": "['grid', 'pickers']",
          "expansionTrigger": "iconContainer"
        },
        "snippet": "<RichTreeView items={MUI_X_PRODUCTS} slots={{ item: CustomTreeItem2 }} experimentalFeatures={{ labelEditing: true }} isItemEditable defaultExpandedItems={['grid', 'pickers']} expansionTrigger=\"iconContainer\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/RichTreeView#RichTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "MUI_X_PRODUCTS",
          "slots": "{ item: CustomTreeItem2 }",
          "experimentalFeatures": "{ labelEditing: true }",
          "isItemEditable": true,
          "defaultExpandedItems": "['grid', 'pickers']"
        },
        "snippet": "<RichTreeView items={MUI_X_PRODUCTS} slots={{ item: CustomTreeItem2 }} experimentalFeatures={{ labelEditing: true }} isItemEditable defaultExpandedItems={['grid', 'pickers']} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/RichTreeView#RichTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "MUI_X_PRODUCTS",
          "slots": "{ item: CustomTreeItem2 }",
          "isItemEditable": true,
          "experimentalFeatures": "{ labelEditing: true }",
          "defaultExpandedItems": "['grid', 'pickers']"
        },
        "snippet": "<RichTreeView items={MUI_X_PRODUCTS} slots={{ item: CustomTreeItem2 }} isItemEditable experimentalFeatures={{ labelEditing: true }} defaultExpandedItems={['grid', 'pickers']} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/RichTreeView#RichTreeView",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "MUI_X_PRODUCTS",
          "apiRef": "apiRef",
          "defaultExpandedItems": "['grid']",
          "multiSelect": true,
          "defaultSelectedItems": "['grid-premium']"
        },
        "snippet": "<RichTreeView items={MUI_X_PRODUCTS} apiRef={apiRef} defaultExpandedItems={['grid']} multiSelect defaultSelectedItems={['grid-premium']} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-tree-view/TreeItem#TreeItem": [
      {
        "componentId": "@mui/x-tree-view/TreeItem#TreeItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "itemId": "tree-view",
          "label": "Tree View",
          "disabled": true
        },
        "snippet": "<TreeItem itemId=\"tree-view\" label=\"Tree View\" disabled> <TreeItem itemId=\"tree-view-community\" label=\"@mui/x-tree-view\" /> </TreeItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem#TreeItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "itemId": "tree-view",
          "label": "Tree View",
          "disabled": true
        },
        "snippet": "<TreeItem itemId=\"tree-view\" label=\"Tree View\" disabled> <TreeItem itemId=\"tree-view-community\" label=\"@mui/x-tree-view\" /> </TreeItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem#TreeItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "itemId": "charts-community",
          "label": "@mui/x-charts",
          "disabled": true
        },
        "snippet": "<TreeItem itemId=\"charts-community\" label=\"@mui/x-charts\" disabled />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem#TreeItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "itemId": "grid",
          "label": "Data Grid"
        },
        "snippet": "<TreeItem itemId=\"grid\" label=\"Data Grid\"> <TreeItem itemId=\"grid-community\" label=\"@mui/x-data-grid\" /> <TreeItem itemId=\"grid-pro\" label=\"@mui/x-data-grid-pro\" /> <TreeItem itemId=\"grid-premium\" label=\"@mui/x-data-grid-premium\" /> </TreeItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem#TreeItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "itemId": "grid",
          "label": "Data Grid"
        },
        "snippet": "<TreeItem itemId=\"grid\" label=\"Data Grid\"> <TreeItem itemId=\"grid-community\" label=\"@mui/x-data-grid\" /> <TreeItem itemId=\"grid-pro\" label=\"@mui/x-data-grid-pro\" /> <TreeItem itemId=\"grid-premium\" label=\"@mui/x-data-grid-premium\" /> </TreeItem>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-tree-view/TreeItem2#TreeItem2": [
      {
        "componentId": "@mui/x-tree-view/TreeItem2#TreeItem2",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "slots": "{ label: CustomLabel, labelInput: CustomLabelInput }",
          "slotProps": "{ label: { onDoubleClick: handleContentDoubleClick, editable: status.editable, editing: status.editing, toggleItemEditing: interactions.toggleItemEditing, } as CustomLabelProps, labelInput: { onBlur: handleInputBlur, onKeyDown: handleInputKeyDown, handleCancelItemLabelEditing: interactions.handleCancelItemLabelEditing, handleSaveItemLabel: interactions.handleSaveItemLabel, } as CustomLabelInputProps, }"
        },
        "snippet": "<TreeItem2 {...props} ref={ref} slots={{ label: CustomLabel, labelInput: CustomLabelInput }} slotProps={{ label: { onDoubleClick: handleContentDoubleClick, editable: status.editable, editing: status.editing, toggleItemEditing: interactions.toggleItemEditing, } as CustomLabelProps, labelInput: { onBlur: handleInputBlur, onKeyDown: handleInputKeyDown, handleCancelItemLabelEditing: interactions.handleCancelItemLabelEditing, handleSaveItemLabel: interactions.handleSaveItemLabel, } as CustomLabelInputProps, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem2#TreeItem2",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "slots": "{ label: Label, labelInput: LabelInput }",
          "slotProps": "{ labelInput: { item: publicAPI.getItem(props.itemId), onBlur: handleInputBlur, onKeyDown: handleInputKeyDown, handleCancelItemLabelEditing: interactions.handleCancelItemLabelEditing, handleSaveItemLabel: interactions.handleSaveItemLabel, } as any, }"
        },
        "snippet": "<TreeItem2 {...props} ref={ref} slots={{ label: Label, labelInput: LabelInput }} slotProps={{ labelInput: { item: publicAPI.getItem(props.itemId), onBlur: handleInputBlur, onKeyDown: handleInputKeyDown, handleCancelItemLabelEditing: interactions.handleCancelItemLabelEditing, handleSaveItemLabel: interactions.handleSaveItemLabel, } as any, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem2#TreeItem2",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "slots": "{ label: CustomLabel, }",
          "slotProps": "{ content: { onClick: handleContentClick }, iconContainer: { onClick: handleIconContainerClick }, label: { onChange: handleLabelValueChange, } as any, }"
        },
        "snippet": "<TreeItem2 ref={ref} {...props} slots={{ label: CustomLabel, }} slotProps={{ content: { onClick: handleContentClick }, iconContainer: { onClick: handleIconContainerClick }, label: { onChange: handleLabelValueChange, } as any, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem2#TreeItem2",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "slots": "{ labelInput: CustomLabelInput }",
          "slotProps": "{ labelInput: { onBlur: handleInputBlur, onKeyDown: handleInputKeyDown, onChange: handleInputChange, error, } as CustomLabelInputProps, }"
        },
        "snippet": "<TreeItem2 {...props} ref={ref} slots={{ labelInput: CustomLabelInput }} slotProps={{ labelInput: { onBlur: handleInputBlur, onKeyDown: handleInputKeyDown, onChange: handleInputChange, error, } as CustomLabelInputProps, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view/TreeItem2#TreeItem2",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "slots": "{ label: CustomLabel }",
          "slotProps": "{ label: { tooltip: labelTooltip } as any }"
        },
        "snippet": "<TreeItem2 {...other} ref={ref} slots={{ label: CustomLabel }} slotProps={{ label: { tooltip: labelTooltip } as any }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts-pro/Heatmap#Heatmap": [
      {
        "componentId": "@mui/x-charts-pro/Heatmap#Heatmap",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ [`.${heatmapClasses.cell}`]: { [`&.${heatmapClasses.highlighted}`]: { filter: 'none', // Remove the default filter effect. rx: '10px', // Round the corners }, [`&.${heatmapClasses.faded}`]: { filter: 'saturated(95%)', // Reduce the faded default saturation }, }, }",
          "xAxis": "[{ data: [1, 2, 3, 4] }]",
          "yAxis": "[{ data: ['A', 'B', 'C', 'D', 'E'] }]",
          "series": "[ { data, highlightScope: { highlight: 'item', fade: 'global', }, }, ]",
          "margin": "{ top: 5, right: 5, left: 20 }",
          "height": 300
        },
        "snippet": "<Heatmap sx={{ [`.${heatmapClasses.cell}`]: { [`&.${heatmapClasses.highlighted}`]: { filter: 'none', // Remove the default filter effect. rx: '10px', // Round the corners }, [`&.${heatmapClasses.faded}`]: { filter: 'saturated(95%)', // Reduce the faded default saturation }, }, }} xAxis={[{ data: [1, 2, 3, 4] }]} yAxis={[{ data: ['A', 'B', 'C', 'D', 'E'] }]} series={[ { data, highlightScope: { highlight: 'item', fade: 'global', }, }, ]} margin={{ top: 5, right: 5, left: 20 }} height={300} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts-pro/Heatmap#Heatmap",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slots": "{ cell: CustomCell }",
          "xAxis": "[{ data: [1, 2, 3, 4] }]",
          "yAxis": "[{ data: ['A', 'B', 'C', 'D', 'E'] }]",
          "series": "[{ data, highlightScope: { highlight: 'item' } }]",
          "margin": "{ top: 5, right: 5, left: 20 }",
          "height": 300
        },
        "snippet": "<Heatmap slots={{ cell: CustomCell }} xAxis={[{ data: [1, 2, 3, 4] }]} yAxis={[{ data: ['A', 'B', 'C', 'D', 'E'] }]} series={[{ data, highlightScope: { highlight: 'item' } }]} margin={{ top: 5, right: 5, left: 20 }} height={300} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts-pro/Heatmap#Heatmap",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 400,
          "width": 600,
          "xAxis": "[{ data: xData }]",
          "yAxis": "[{ data: yData }]",
          "series": "[{ data }]",
          "zAxis": "[ { min: 20, max: 300, colorMap: { type: 'continuous', color: interpolateBlues, }, }, ]"
        },
        "snippet": "<Heatmap height={400} width={600} xAxis={[{ data: xData }]} yAxis={[{ data: yData }]} series={[{ data }]} zAxis={[ { min: 20, max: 300, colorMap: { type: 'continuous', color: interpolateBlues, }, }, ]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts-pro/Heatmap#Heatmap",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xAxis": "[{ data: [1, 2, 3, 4] }]",
          "yAxis": "[{ data: ['A', 'B', 'C', 'D', 'E'] }]",
          "series": "[{ data, highlightScope: { highlight: 'item', fade: 'global' } }]",
          "margin": "{ top: 5, right: 5, left: 20 }",
          "height": 300
        },
        "snippet": "<Heatmap xAxis={[{ data: [1, 2, 3, 4] }]} yAxis={[{ data: ['A', 'B', 'C', 'D', 'E'] }]} series={[{ data, highlightScope: { highlight: 'item', fade: 'global' } }]} margin={{ top: 5, right: 5, left: 20 }} height={300} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts-pro/Heatmap#Heatmap",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xAxis": "[{ data: [1, 2, 3, 4] }]",
          "yAxis": "[{ data: ['A', 'B', 'C', 'D', 'E'] }]",
          "series": "[{ data }]",
          "margin": "{ top: 5, right: 5, left: 20 }",
          "height": 300
        },
        "snippet": "<Heatmap xAxis={[{ data: [1, 2, 3, 4] }]} yAxis={[{ data: ['A', 'B', 'C', 'D', 'E'] }]} series={[{ data }]} margin={{ top: 5, right: 5, left: 20 }} height={300} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts-pro/BarChartPro#BarChartPro": [
      {
        "componentId": "@mui/x-charts-pro/BarChartPro#BarChartPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 600,
          "height": 300,
          "xAxis": "[ { scaleType: 'band', data: data.map((v, i) => i), zoom: true, }, ]",
          "series": "series"
        },
        "snippet": "<BarChartPro width={600} height={300} xAxis={[ { scaleType: 'band', data: data.map((v, i) => i), zoom: true, }, ]} series={series} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts-pro/BarChartPro#BarChartPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 300,
          "xAxis": "[ { scaleType: 'band', data: data.map((v, i) => i), zoom: props, }, ]",
          "series": "series"
        },
        "snippet": "<BarChartPro height={300} xAxis={[ { scaleType: 'band', data: data.map((v, i) => i), zoom: props, }, ]} series={series} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts-pro/LineChartPro#LineChartPro": [
      {
        "componentId": "@mui/x-charts-pro/LineChartPro#LineChartPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 600,
          "height": 300,
          "xAxis": "[ { zoom: true, scaleType: 'point', data: data.map((v, i) => i), }, ]",
          "series": "series"
        },
        "snippet": "<LineChartPro width={600} height={300} xAxis={[ { zoom: true, scaleType: 'point', data: data.map((v, i) => i), }, ]} series={series} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-charts-pro/LineChartPro#LineChartPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "zoom": "zoom",
          "onZoomChange": "setZoom",
          "xAxis": "[ { zoom: true, scaleType: 'point', id: 'my-x-axis', data: data.map((v, i) => i), }, ]"
        },
        "snippet": "<LineChartPro {...chartProps} zoom={zoom} onZoomChange={setZoom} xAxis={[ { zoom: true, scaleType: 'point', id: 'my-x-axis', data: data.map((v, i) => i), }, ]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-charts-pro/ScatterChartPro#ScatterChartPro": [
      {
        "componentId": "@mui/x-charts-pro/ScatterChartPro#ScatterChartPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "width": 600,
          "height": 300,
          "xAxis": "[ { zoom: true, }, ]",
          "yAxis": "[ { zoom: true, }, ]",
          "series": "series"
        },
        "snippet": "<ScatterChartPro width={600} height={300} xAxis={[ { zoom: true, }, ]} yAxis={[ { zoom: true, }, ]} series={series} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-data-grid-premium#DataGridPremium": [
      {
        "componentId": "@mui/x-data-grid-premium#DataGridPremium",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "apiRef": "apiRef",
          "autoHeight": true,
          "disableRowSelectionOnClick": true,
          "onRowClick": "onRowClick",
          "slots": "{ toolbar: CustomToolbar, detailPanelExpandIcon: ArrowDown, detailPanelCollapseIcon: ArrowUp, }",
          "slotProps": "{ toolbar: { showQuickFilter: true }, }",
          "getDetailPanelContent": "getDetailPanelContent",
          "getDetailPanelHeight": "getDetailPanelHeight",
          "getRowHeight": "getRowHeight",
          "initialState": "{ sorting: { sortModel: [{ field: 'plan', sort: 'asc' }], }, }",
          "sx": "{ fontFamily: 'IBM Plex Sans', // Do not target cells in nested grids [`& > div > div > div > div > div > .${gridClasses.cell}`]: { py: 1.5, }, [`& .${gridClasses.columnHeaderTitle}`]: { fontWeight: 'medium', }, [`& .${gridClasses.withBorderColor}`]: { borderColor: 'divider', }, [`& .${gridClasses.detailPanel}`]: { background: 'transparent', }, [`& .${gridClasses.cell}:focus, & .${gridClasses.cell}:focus-within`]: { outline: 'none', }, [`& .${gridClasses.columnHeader}:focus, & .${gridClasses.columnHeader}:focus-within`]: { outline: 'none', }, border: 0, }",
          "rows": "featuresSet",
          "columns": "columns",
          "hideFooter": true,
          "groupingColDef": "memoizedGroupingDef"
        },
        "snippet": "<DataGridPremium apiRef={apiRef} autoHeight disableRowSelectionOnClick onRowClick={onRowClick} slots={{ toolbar: CustomToolbar, detailPanelExpandIcon: ArrowDown, detailPanelCollapseIcon: ArrowUp, }} slotProps={{ toolbar: { showQuickFilter: true }, }} getDetailPanelContent={getDetailPanelContent} getDetailPanelHeight={getDetailPanelHeight} getRowHeight={getRowHeight} initialState={{ sorting: { sortModel: [{ field: 'plan', sort: 'asc' }], }, }} sx={{ fontFamily: 'IBM Plex Sans', // Do not target cells in nested grids [`& > div > div > div > div > div > .${gridClasses.cell}`]: { py: 1.5, }, [`& .${gridClasses.columnHeaderTitle}`]: { fontWeight: 'medium', }, [`& .${gridClasses.withBorderColor}`]: { borderColor: 'divider', }, [`& .${gridClasses.detailPanel}`]: { background: 'transparent', }, [`& .${gridClasses.cell}:focus, & .${gridClasses.cell}:focus-within`]: { outline: 'none', }, [`& .${gridClasses.columnHeader}:focus, & .${gridClasses.columnHeader}:focus-within`]: { outline: 'none', }, border: 0, }} rows={featuresSet} columns={columns} hideFooter groupingColDef={memoizedGroupingDef} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-premium#DataGridPremium",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "columns": "columns",
          "apiRef": "apiRef",
          "disableRowSelectionOnClick": true,
          "cellSelection": true,
          "processRowUpdate": "processRowUpdate",
          "ignoreValueFormatterDuringExport": true,
          "sx": "{ [`& .${gridClasses.row}.row--removed`]: { backgroundColor: (theme) => { if (theme.palette.mode === 'light') { return 'rgba(255, 170, 170, 0.3)'; } return darken('rgba(255, 170, 170, 1)', 0.7); }, }, [`& .${gridClasses.row}.row--edited`]: { backgroundColor: (theme) => { if (theme.palette.mode === 'light') { return 'rgba(255, 254, 176, 0.3)'; } return darken('rgba(255, 254, 176, 1)', 0.6); }, }, }",
          "loading": "isSaving",
          "getRowClassName": "getRowClassName"
        },
        "snippet": "<DataGridPremium {...data} columns={columns} apiRef={apiRef} disableRowSelectionOnClick cellSelection processRowUpdate={processRowUpdate} ignoreValueFormatterDuringExport sx={{ [`& .${gridClasses.row}.row--removed`]: { backgroundColor: (theme) => { if (theme.palette.mode === 'light') { return 'rgba(255, 170, 170, 0.3)'; } return darken('rgba(255, 170, 170, 1)', 0.7); }, }, [`& .${gridClasses.row}.row--edited`]: { backgroundColor: (theme) => { if (theme.palette.mode === 'light') { return 'rgba(255, 254, 176, 0.3)'; } return darken('rgba(255, 254, 176, 1)', 0.6); }, }, }} loading={isSaving} getRowClassName={getRowClassName} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-premium#DataGridPremium",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "loading": "loading",
          "initialState": "initialState",
          "cellSelection": true,
          "processRowUpdate": "processRowUpdate",
          "onBeforeClipboardPasteStart": "confirmPaste",
          "onClipboardPasteStart": "() => setLoading(true)",
          "onClipboardPasteEnd": "() => setLoading(false)",
          "ignoreValueFormatterDuringExport": true,
          "disableRowSelectionOnClick": true
        },
        "snippet": "<DataGridPremium {...data} loading={loading} initialState={initialState} cellSelection processRowUpdate={processRowUpdate} onBeforeClipboardPasteStart={confirmPaste} onClipboardPasteStart={() => setLoading(true)} onClipboardPasteEnd={() => setLoading(false)} ignoreValueFormatterDuringExport disableRowSelectionOnClick />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-premium#DataGridPremium",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "treeData": true,
          "getTreeDataPath": "getTreeDataPath",
          "rows": "rows",
          "columns": "columns",
          "groupingColDef": "groupingColDef",
          "defaultGroupingExpansionDepth": "-1",
          "slots": "{ toolbar: GridToolbar }",
          "slotProps": "{ toolbar: { excelOptions } }"
        },
        "snippet": "<DataGridPremium treeData getTreeDataPath={getTreeDataPath} rows={rows} columns={columns} groupingColDef={groupingColDef} defaultGroupingExpansionDepth={-1} slots={{ toolbar: GridToolbar }} slotProps={{ toolbar: { excelOptions } }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-premium#DataGridPremium",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "treeData": true,
          "rows": "rows",
          "columns": "columns",
          "getTreeDataPath": "getTreeDataPath",
          "getRowId": "getRowId",
          "groupingColDef": "{ headerName: 'Files', width: 350 }",
          "initialState": "{ aggregation: { model: { size: 'sum', updatedAt: 'max', }, }, }"
        },
        "snippet": "<DataGridPremium treeData rows={rows} columns={columns} getTreeDataPath={getTreeDataPath} getRowId={getRowId} groupingColDef={{ headerName: 'Files', width: 350 }} initialState={{ aggregation: { model: { size: 'sum', updatedAt: 'max', }, }, }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-data-grid-pro#DataGridPro": [
      {
        "componentId": "@mui/x-data-grid-pro#DataGridPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "columns": "columns",
          "rows": "rows",
          "loading": "loading",
          "onRowsScrollEnd": "handleOnRowsScrollEnd",
          "scrollEndThreshold": 200,
          "sortingMode": "server",
          "sortModel": "sortModel",
          "onSortModelChange": "setSortModel",
          "filterMode": "server",
          "filterModel": "filterModel",
          "onFilterModelChange": "setFilterModel",
          "initialState": "{ columns: { columnVisibilityModel: { id: false } }, }",
          "slots": "{ loadingOverlay: LinearProgress as GridSlots['loadingOverlay'], }",
          "hideFooterPagination": true
        },
        "snippet": "<DataGridPro columns={columns} rows={rows} loading={loading} onRowsScrollEnd={handleOnRowsScrollEnd} scrollEndThreshold={200} sortingMode=\"server\" sortModel={sortModel} onSortModelChange={setSortModel} filterMode=\"server\" filterModel={filterModel} onFilterModelChange={setFilterModel} initialState={{ columns: { columnVisibilityModel: { id: false } }, }} slots={{ loadingOverlay: LinearProgress as GridSlots['loadingOverlay'], }} hideFooterPagination />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-pro#DataGridPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "columns": "columns",
          "unstable_dataSource": "dataSource",
          "treeData": true,
          "apiRef": "apiRef",
          "pagination": true,
          "pageSizeOptions": "pageSizeOptions",
          "initialState": "initialStateWithPagination",
          "slots": "{ toolbar: GridToolbar }",
          "slotProps": "{ toolbar: { showQuickFilter: true } }",
          "defaultGroupingExpansionDepth": "-1"
        },
        "snippet": "<DataGridPro columns={columns} unstable_dataSource={dataSource} treeData apiRef={apiRef} pagination pageSizeOptions={pageSizeOptions} initialState={initialStateWithPagination} slots={{ toolbar: GridToolbar }} slotProps={{ toolbar: { showQuickFilter: true } }} defaultGroupingExpansionDepth={-1} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-pro#DataGridPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "unstable_dataSource": "dataSource",
          "unstable_dataSourceCache": "cache",
          "treeData": true,
          "apiRef": "apiRef",
          "pagination": true,
          "pageSizeOptions": "pageSizeOptions",
          "initialState": "initialState",
          "slots": "{ toolbar: GridToolbar }",
          "slotProps": "{ toolbar: { showQuickFilter: true } }"
        },
        "snippet": "<DataGridPro {...props} unstable_dataSource={dataSource} unstable_dataSourceCache={cache} treeData apiRef={apiRef} pagination pageSizeOptions={pageSizeOptions} initialState={initialState} slots={{ toolbar: GridToolbar }} slotProps={{ toolbar: { showQuickFilter: true } }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-pro#DataGridPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "columns": "columns",
          "unstable_dataSource": "dataSource",
          "treeData": true,
          "apiRef": "apiRef",
          "pagination": true,
          "pageSizeOptions": "pageSizeOptions",
          "initialState": "initialStateWithPagination",
          "slots": "{ toolbar: GridToolbar }",
          "slotProps": "{ toolbar: { showQuickFilter: true } }"
        },
        "snippet": "<DataGridPro columns={columns} unstable_dataSource={dataSource} treeData apiRef={apiRef} pagination pageSizeOptions={pageSizeOptions} initialState={initialStateWithPagination} slots={{ toolbar: GridToolbar }} slotProps={{ toolbar: { showQuickFilter: true } }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-data-grid-pro#DataGridPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "columns": "columns",
          "rows": "rows",
          "initialState": "{ pinnedColumns: { left: ['day'], }, }",
          "autoHeight": true,
          "disableRowSelectionOnClick": true,
          "hideFooter": true,
          "showCellVerticalBorder": true,
          "showColumnVerticalBorder": true,
          "disableColumnReorder": true
        },
        "snippet": "<DataGridPro columns={columns} rows={rows} initialState={{ pinnedColumns: { left: ['day'], }, }} autoHeight disableRowSelectionOnClick hideFooter showCellVerticalBorder showColumnVerticalBorder disableColumnReorder />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar": [
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]",
          "calendars": 2,
          "slotProps": "{ calendarHeader: { format: 'MM/YYYY' } }"
        },
        "snippet": "<DateRangeCalendar defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} calendars={2} slotProps={{ calendarHeader: { format: 'MM/YYYY' } }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]",
          "slots": "{ day: DateRangePickerDay }"
        },
        "snippet": "<DateRangeCalendar defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} slots={{ day: DateRangePickerDay }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]",
          "slotProps": "slotProps"
        },
        "snippet": "<DateRangeCalendar defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} slotProps={slotProps} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]",
          "slots": "slots"
        },
        "snippet": "<DateRangeCalendar defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} slots={slots} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangeCalendar#DateRangeCalendar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]",
          "disabled": true
        },
        "snippet": "<DateRangeCalendar defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} disabled />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/MultiInputDateRangeField#MultiInputDateRangeField": [
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputDateRangeField#MultiInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 300 }",
          "slotProps": "{ textField: (ownerState) => ({ inputRef: ownerState.position === 'start' ? startInputRef : endInputRef, }), }",
          "selectedSections": "selectedSections",
          "onSelectedSectionsChange": "setSelectedSections"
        },
        "snippet": "<MultiInputDateRangeField sx={{ minWidth: 300 }} slotProps={{ textField: (ownerState) => ({ inputRef: ownerState.position === 'start' ? startInputRef : endInputRef, }), }} selectedSections={selectedSections} onSelectedSectionsChange={setSelectedSections} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputDateRangeField#MultiInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ textField: ({ position }) => ({ label: position === 'start' ? 'Departure' : 'Return', }), }"
        },
        "snippet": "<MultiInputDateRangeField slotProps={{ textField: ({ position }) => ({ label: position === 'start' ? 'Departure' : 'Return', }), }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputDateRangeField#MultiInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]"
        },
        "snippet": "<MultiInputDateRangeField defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputDateRangeField#MultiInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[date1, date2]"
        },
        "snippet": "<MultiInputDateRangeField defaultValue={[date1, date2]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/MultiInputTimeRangeField#MultiInputTimeRangeField": [
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputTimeRangeField#MultiInputTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ textField: ({ position }) => ({ label: position === 'start' ? 'From' : 'To', }), }"
        },
        "snippet": "<MultiInputTimeRangeField slotProps={{ textField: ({ position }) => ({ label: position === 'start' ? 'From' : 'To', }), }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputTimeRangeField#MultiInputTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17T15:30'), dayjs('2022-04-17T18:30')]"
        },
        "snippet": "<MultiInputTimeRangeField defaultValue={[dayjs('2022-04-17T15:30'), dayjs('2022-04-17T18:30')]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputTimeRangeField#MultiInputTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[date1, date2]"
        },
        "snippet": "<MultiInputTimeRangeField defaultValue={[date1, date2]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/MultiInputDateTimeRangeField#MultiInputDateTimeRangeField": [
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputDateTimeRangeField#MultiInputDateTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ textField: ({ position }) => ({ label: position === 'start' ? 'Check-in' : 'Check-out', }), }"
        },
        "snippet": "<MultiInputDateTimeRangeField slotProps={{ textField: ({ position }) => ({ label: position === 'start' ? 'Check-in' : 'Check-out', }), }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputDateTimeRangeField#MultiInputDateTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]"
        },
        "snippet": "<MultiInputDateTimeRangeField defaultValue={[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/MultiInputDateTimeRangeField#MultiInputDateTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[date1, date2]"
        },
        "snippet": "<MultiInputDateTimeRangeField defaultValue={[date1, date2]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker": [
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "open": "isOpen",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "slots": "{ ...props.slots, field: BrowserSingleInputDateRangeField }",
          "slotProps": "{ ...props.slotProps, field: { onAdornmentClick: toggleOpen, ...props.slotProps?.field, } as any, }"
        },
        "snippet": "<DateRangePicker ref={ref} {...props} open={isOpen} onClose={handleClose} onOpen={handleOpen} slots={{ ...props.slots, field: BrowserSingleInputDateRangeField }} slotProps={{ ...props.slotProps, field: { onAdornmentClick: toggleOpen, ...props.slotProps?.field, } as any, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "open": "isOpen",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "slots": "{ ...props.slots, field: JoySingleInputDateRangeField }",
          "slotProps": "{ ...props.slotProps, field: { ...props.slotProps?.field, onAdornmentClick: toggleOpen, } as any, }"
        },
        "snippet": "<DateRangePicker {...props} ref={ref} open={isOpen} onClose={handleClose} onOpen={handleOpen} slots={{ ...props.slots, field: JoySingleInputDateRangeField }} slotProps={{ ...props.slotProps, field: { ...props.slotProps?.field, onAdornmentClick: toggleOpen, } as any, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slots": "{ field: DateRangeButtonField, ...props.slots }",
          "slotProps": "{ field: { setOpen } as any }",
          "ref": "ref",
          "open": "open",
          "onClose": "() => setOpen(false)",
          "onOpen": "() => setOpen(true)"
        },
        "snippet": "<DateRangePicker slots={{ field: DateRangeButtonField, ...props.slots }} slotProps={{ field: { setOpen } as any }} ref={ref} {...props} open={open} onClose={() => setOpen(false)} onOpen={() => setOpen(true)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Picker with error icon",
          "maxDate": "dayjs('2022-04-19')",
          "defaultValue": "[dayjs('2022-04-18'), dayjs('2022-04-21')]",
          "onError": "setError",
          "slotProps": "{ textField: (ownerState) => ({ InputProps: { endAdornment: ( <CustomInputAdornment position=\"end\" hasError={!!error[ownerState.position === 'start' ? 0 : 1]} /> ), }, }), }"
        },
        "snippet": "<DateRangePicker label=\"Picker with error icon\" maxDate={dayjs('2022-04-19')} defaultValue={[dayjs('2022-04-18'), dayjs('2022-04-21')]} onError={setError} slotProps={{ textField: (ownerState) => ({ InputProps: { endAdornment: ( <CustomInputAdornment position=\"end\" hasError={!!error[ownerState.position === 'start' ? 0 : 1]} /> ), }, }), }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateRangePicker#DateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ textField: ({ position }) => ({ color: position === 'start' ? 'success' : 'warning', focused: true, }), }",
          "defaultValue": "[dayjs('2022-04-17'), null]"
        },
        "snippet": "<DateRangePicker slotProps={{ textField: ({ position }) => ({ color: position === 'start' ? 'success' : 'warning', focused: true, }), }} defaultValue={[dayjs('2022-04-17'), null]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField": [
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 300 }",
          "unstableFieldRef": "fieldRef",
          "inputRef": "inputRef",
          "selectedSections": "selectedSections",
          "onSelectedSectionsChange": "setSelectedSections"
        },
        "snippet": "<SingleInputDateRangeField sx={{ minWidth: 300 }} unstableFieldRef={fieldRef} inputRef={inputRef} selectedSections={selectedSections} onSelectedSectionsChange={setSelectedSections} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Controlled field",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<SingleInputDateRangeField label=\"Controlled field\" value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Date Range Field",
          "clearable": true,
          "slots": "{ clearIcon: BackspaceIcon }"
        },
        "snippet": "<SingleInputDateRangeField label=\"Date Range Field\" clearable slots={{ clearIcon: BackspaceIcon }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Uncontrolled field",
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]"
        },
        "snippet": "<SingleInputDateRangeField label=\"Uncontrolled field\" defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateRangeField#SingleInputDateRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "setValue"
        },
        "snippet": "<SingleInputDateRangeField value={value} onChange={setValue} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker": [
      {
        "componentId": "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slots": "{ shortcuts: CustomRangeShortcuts, }",
          "slotProps": "{ shortcuts: { items: shortcutsItems, }, toolbar: { hidden: true, }, actionBar: { hidden: true, }, }",
          "calendars": 2
        },
        "snippet": "<StaticDateRangePicker slots={{ shortcuts: CustomRangeShortcuts, }} slotProps={{ shortcuts: { items: shortcutsItems, }, toolbar: { hidden: true, }, actionBar: { hidden: true, }, }} calendars={2} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]",
          "sx": "{ [`.${pickersLayoutClasses.contentWrapper}`]: { alignItems: 'center', }, }"
        },
        "snippet": "<StaticDateRangePicker defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} sx={{ [`.${pickersLayoutClasses.contentWrapper}`]: { alignItems: 'center', }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "shouldDisableDate": "shouldDisableDate",
          "slotProps": "{ shortcuts: { items: shortcutsItems, }, }"
        },
        "snippet": "<StaticDateRangePicker shouldDisableDate={shouldDisableDate} slotProps={{ shortcuts: { items: shortcutsItems, }, }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ shortcuts: { items: shortcutsItems, }, actionBar: { actions: [] }, }",
          "calendars": 2
        },
        "snippet": "<StaticDateRangePicker slotProps={{ shortcuts: { items: shortcutsItems, }, actionBar: { actions: [] }, }} calendars={2} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/StaticDateRangePicker#StaticDateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slotProps": "{ shortcuts: { items: shortcutsItems, }, }"
        },
        "snippet": "<StaticDateRangePicker slotProps={{ shortcuts: { items: shortcutsItems, }, }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/DesktopDateRangePicker#DesktopDateRangePicker": [
      {
        "componentId": "@mui/x-date-pickers-pro/DesktopDateRangePicker#DesktopDateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]"
        },
        "snippet": "<DesktopDateRangePicker defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/MobileDateRangePicker#MobileDateRangePicker": [
      {
        "componentId": "@mui/x-date-pickers-pro/MobileDateRangePicker#MobileDateRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17'), dayjs('2022-04-21')]"
        },
        "snippet": "<MobileDateRangePicker defaultValue={[dayjs('2022-04-17'), dayjs('2022-04-21')]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField#SingleInputDateTimeRangeField": [
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField#SingleInputDateTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Controlled field",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<SingleInputDateTimeRangeField label=\"Controlled field\" value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField#SingleInputDateTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Uncontrolled field",
          "defaultValue": "[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]"
        },
        "snippet": "<SingleInputDateTimeRangeField label=\"Uncontrolled field\" defaultValue={[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField#SingleInputDateTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[date1, date2]"
        },
        "snippet": "<SingleInputDateTimeRangeField defaultValue={[date1, date2]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputDateTimeRangeField#SingleInputDateTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Check-in - Check-out"
        },
        "snippet": "<SingleInputDateTimeRangeField label=\"Check-in - Check-out\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker": [
      {
        "componentId": "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "views": "['day', 'hours']",
          "timeSteps": "{ minutes: 20 }",
          "viewRenderers": "{ hours: renderDigitalClockTimeView }"
        },
        "snippet": "<DateTimeRangePicker views={['day', 'hours']} timeSteps={{ minutes: 20 }} viewRenderers={{ hours: renderDigitalClockTimeView }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[lastSunday, nextSunday]",
          "shouldDisableDate": "(date, position) => { if (position === 'end') { return false; } return isWeekend(date); }"
        },
        "snippet": "<DateTimeRangePicker defaultValue={[lastSunday, nextSunday]} shouldDisableDate={(date, position) => { if (position === 'end') { return false; } return isWeekend(date); }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[defaultValue, defaultValue.add(30, 'minutes')]",
          "shouldDisableTime": "shouldDisableTime"
        },
        "snippet": "<DateTimeRangePicker defaultValue={[defaultValue, defaultValue.add(30, 'minutes')]} shouldDisableTime={shouldDisableTime} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[lastMonday, nextSunday]",
          "shouldDisableDate": "isWeekend"
        },
        "snippet": "<DateTimeRangePicker defaultValue={[lastMonday, nextSunday]} shouldDisableDate={isWeekend} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/DateTimeRangePicker#DateTimeRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[todayAt9AM, todayAtNoon]",
          "maxDateTime": "todayAt9AM"
        },
        "snippet": "<DateTimeRangePicker defaultValue={[todayAt9AM, todayAtNoon]} maxDateTime={todayAt9AM} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/DesktopDateTimeRangePicker#DesktopDateTimeRangePicker": [
      {
        "componentId": "@mui/x-date-pickers-pro/DesktopDateTimeRangePicker#DesktopDateTimeRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]"
        },
        "snippet": "<DesktopDateTimeRangePicker defaultValue={[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/MobileDateTimeRangePicker#MobileDateTimeRangePicker": [
      {
        "componentId": "@mui/x-date-pickers-pro/MobileDateTimeRangePicker#MobileDateTimeRangePicker",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]"
        },
        "snippet": "<MobileDateTimeRangePicker defaultValue={[dayjs('2022-04-17T15:30'), dayjs('2022-04-21T18:30')]} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-date-pickers-pro/SingleInputTimeRangeField#SingleInputTimeRangeField": [
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputTimeRangeField#SingleInputTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Controlled field",
          "value": "value",
          "onChange": "(newValue) => setValue(newValue)"
        },
        "snippet": "<SingleInputTimeRangeField label=\"Controlled field\" value={value} onChange={(newValue) => setValue(newValue)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputTimeRangeField#SingleInputTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Uncontrolled field",
          "defaultValue": "[dayjs('2022-04-17T15:30'), dayjs('2022-04-17T18:30')]"
        },
        "snippet": "<SingleInputTimeRangeField label=\"Uncontrolled field\" defaultValue={[dayjs('2022-04-17T15:30'), dayjs('2022-04-17T18:30')]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputTimeRangeField#SingleInputTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": "[date1, date2]"
        },
        "snippet": "<SingleInputTimeRangeField defaultValue={[date1, date2]} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-date-pickers-pro/SingleInputTimeRangeField#SingleInputTimeRangeField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "From - To"
        },
        "snippet": "<SingleInputTimeRangeField label=\"From - To\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/x-tree-view-pro/RichTreeViewPro#RichTreeViewPro": [
      {
        "componentId": "@mui/x-tree-view-pro/RichTreeViewPro#RichTreeViewPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "MUI_X_PRODUCTS",
          "itemsReordering": true,
          "defaultExpandedItems": "['grid', 'pickers']",
          "experimentalFeatures": "{ indentationAtItemLevel: true, itemsReordering: true, }",
          "canMoveItemToNewPosition": "(params) => params.oldPosition.parentId === params.newPosition.parentId "
        },
        "snippet": "<RichTreeViewPro items={MUI_X_PRODUCTS} itemsReordering defaultExpandedItems={['grid', 'pickers']} experimentalFeatures={{ indentationAtItemLevel: true, itemsReordering: true, }} canMoveItemToNewPosition={(params) => params.oldPosition.parentId === params.newPosition.parentId } />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view-pro/RichTreeViewPro#RichTreeViewPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "MUI_X_PRODUCTS",
          "itemsReordering": true,
          "experimentalFeatures": "{ indentationAtItemLevel: true, itemsReordering: true, }",
          "defaultExpandedItems": "['grid', 'pickers']",
          "onItemPositionChange": "(params) => setLastReorder(params)"
        },
        "snippet": "<RichTreeViewPro items={MUI_X_PRODUCTS} itemsReordering experimentalFeatures={{ indentationAtItemLevel: true, itemsReordering: true, }} defaultExpandedItems={['grid', 'pickers']} onItemPositionChange={(params) => setLastReorder(params)} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/x-tree-view-pro/RichTreeViewPro#RichTreeViewPro",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "items": "ITEMS",
          "itemsReordering": true,
          "defaultExpandedItems": "['grid', 'pickers']",
          "experimentalFeatures": "{ indentationAtItemLevel: true, itemsReordering: true, }"
        },
        "snippet": "<RichTreeViewPro items={ITEMS} itemsReordering defaultExpandedItems={['grid', 'pickers']} experimentalFeatures={{ indentationAtItemLevel: true, itemsReordering: true, }} />",
        "tags": [
          "external-lib"
        ]
      }
    ]
  }
}